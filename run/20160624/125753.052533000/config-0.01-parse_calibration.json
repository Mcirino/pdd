{
  "deepdive": {
    "db": {
      "default": {
        "dbname": "pdd_test_big_",
        "driver": "org.postgresql.Driver",
        "host": "localhost",
        "incremental_mode": "ORIGINAL",
        "password": "",
        "port": "6432",
        "url": "jdbc:postgresql://localhost:6432/pdd_test_big_",
        "user": "marycirino"
      }
    },
    "extraction": {
      "extractors": {
        "ext_all_entity_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"all_entity_candidate\"\n\tdeepdive sql 'INSERT INTO all_entity_candidate SELECT R0.docid AS \"entity_formation_candidate.R0.docid\", '\\''FORMATION'\\'' AS column_1, R0.eid AS \"entity_formation_candidate.R0.eid\", R0.entity AS \"entity_formation_candidate.R0.entity\", R0.prov AS \"entity_formation_candidate.R0.prov\"\nFROM entity_formation_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_temporal_candidate.R0.docid\", '\\''INTERVAL'\\'' AS column_1, R0.eid AS \"entity_temporal_candidate.R0.eid\", R0.entity AS \"entity_temporal_candidate.R0.entity\", R0.prov AS \"entity_temporal_candidate.R0.prov\"\nFROM entity_temporal_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_taxon_candidate.R0.docid\", '\\''TAXON-'\\'' || R0.type AS column_1, R0.eid AS \"entity_taxon_candidate.R0.eid\", R0.entity AS \"entity_taxon_candidate.R0.entity\", R0.prov AS \"entity_taxon_candidate.R0.prov\"\nFROM entity_taxon_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_location_candidate.R0.docid\", '\\''LOCATION'\\'' AS column_1, R0.eid AS \"entity_location_candidate.R0.eid\", R0.entity AS \"entity_location_candidate.R0.entity\", R0.prov AS \"entity_location_candidate.R0.prov\"\nFROM entity_location_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate",
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local",
            "ext_entity_taxon_candidate",
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_relations": [
            "entity_formation_candidate",
            "entity_temporal_candidate",
            "entity_taxon_candidate",
            "entity_location_candidate"
          ],
          "output_relation": "all_entity_candidate",
          "style": "cmd_extractor"
        },
        "ext_all_entity_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"all_entity_per_doc\"\n\tdeepdive sql 'INSERT INTO all_entity_per_doc SELECT R0.docid AS \"all_entity_candidate.R0.docid\", ARRAY_AGG(R0.eid) AS column_1, ARRAY_AGG(R0.entity) AS column_2, ARRAY_AGG(R0.type) AS column_3, ARRAY_AGG(R0.prov) AS column_4\nFROM all_entity_candidate R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_all_entity_candidate"
          ],
          "input_relations": [
            "all_entity_candidate"
          ],
          "output_relation": "all_entity_per_doc",
          "style": "cmd_extractor"
        },
        "ext_document_with_all_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_all_entities\"\n\tdeepdive sql 'INSERT INTO document_with_all_entities SELECT R0.docid AS \"all_entity_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, array_to_string(R0.eid, '\\''@@@@@'\\'') AS column_3, array_to_string(R0.prov, '\\''@@@@@'\\'') AS column_4, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM all_entity_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_all_entity_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "all_entity_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_all_entities",
          "style": "cmd_extractor"
        },
        "ext_document_with_formation_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_formation_entities\"\n\tdeepdive sql 'INSERT INTO document_with_formation_entities SELECT R0.docid AS \"formation_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM formation_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_formation_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "formation_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_formation_entities",
          "style": "cmd_extractor"
        },
        "ext_document_with_taxon_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_taxon_entities\"\n\tdeepdive sql 'INSERT INTO document_with_taxon_entities SELECT R0.docid AS \"taxon_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM taxon_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_taxon_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "taxon_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_taxon_entities",
          "style": "cmd_extractor"
        },
        "ext_documents": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"documents\"\n\tdeepdive sql 'INSERT INTO documents SELECT DISTINCT R0.docid AS \"sentences_serialized.R0.docid\", ARRAY_AGG(R0.sentid) AS column_1, ARRAY_AGG(R0.wordidxs) AS column_2, ARRAY_AGG(R0.words) AS column_3, ARRAY_AGG(R0.poses) AS column_4, ARRAY_AGG(R0.ners) AS column_5, ARRAY_AGG(R0.lemmas) AS column_6, ARRAY_AGG(R0.dep_paths) AS column_7, ARRAY_AGG(R0.dep_parents) AS column_8, ARRAY_AGG(R0.font) AS column_9, ARRAY_AGG(R0.layout) AS column_10\nFROM sentences_serialized R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "documents",
          "style": "cmd_extractor"
        },
        "ext_documents_serialized": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"documents_serialized\"\n\tdeepdive sql 'INSERT INTO documents_serialized SELECT R0.docid AS \"documents.R0.docid\", array_to_string(R0.sentids, '\\''|||||'\\'') AS column_1, array_to_string(R0.wordidxs, '\\''|||||'\\'') AS column_2, array_to_string(R0.words, '\\''|||||'\\'') AS column_3, array_to_string(R0.poses, '\\''|||||'\\'') AS column_4, array_to_string(R0.ners, '\\''|||||'\\'') AS column_5, array_to_string(R0.lemmas, '\\''|||||'\\'') AS column_6, array_to_string(R0.dep_paths, '\\''|||||'\\'') AS column_7, array_to_string(R0.dep_parents, '\\''|||||'\\'') AS column_8, array_to_string(R0.font, '\\''|||||'\\'') AS column_9, array_to_string(R0.layout, '\\''|||||'\\'') AS column_10\nFROM documents R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_documents"
          ],
          "input_relations": [
            "documents"
          ],
          "output_relation": "documents_serialized",
          "style": "cmd_extractor"
        },
        "ext_entity_formation": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_formation\"\n\tdeepdive sql 'INSERT INTO entity_formation SELECT R0.docid AS \"entity_formation_candidate.R0.docid\", R0.type AS \"entity_formation_candidate.R0.type\", R0.eid AS \"entity_formation_candidate.R0.eid\", R0.entity AS \"entity_formation_candidate.R0.entity\", R0.prov AS \"entity_formation_candidate.R0.prov\"\nFROM entity_formation_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate"
          ],
          "input_relations": [
            "entity_formation_candidate"
          ],
          "output_relation": "entity_formation",
          "style": "cmd_extractor"
        },
        "ext_entity_formation_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_formation_candidate\"\n\tdeepdive sql 'INSERT INTO entity_formation_candidate SELECT R0.docid AS \"entity_formation_candidate__0.R0.docid\", R0.type AS \"entity_formation_candidate__0.R0.type\", R0.eid AS \"entity_formation_candidate__0.R0.eid\", R0.entity AS \"entity_formation_candidate__0.R0.entity\", R0.prov AS \"entity_formation_candidate__0.R0.prov\"\nFROM entity_formation_candidate__0 R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_formation_candidate_local.R0.docid\", R0.type AS \"entity_formation_candidate_local.R0.type\", R0.eid AS \"entity_formation_candidate_local.R0.eid\", R0.entity AS \"entity_formation_candidate_local.R0.entity\", R0.prov AS \"entity_formation_candidate_local.R0.prov\"\nFROM entity_formation_candidate_local R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate__0_by_ext_entity_formation_global",
            "ext_entity_formation_candidate_local_by_ext_entity_formation_local"
          ],
          "input_relations": [
            "entity_formation_candidate__0",
            "entity_formation_candidate_local"
          ],
          "output_relation": "entity_formation_candidate",
          "style": "cmd_extractor"
        },
        "ext_entity_formation_candidate__0_by_ext_entity_formation_global": {
          "dependencies": [
            "ext_document_with_formation_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_formation_entities.R0.docid\", R0.entities AS \"document_with_formation_entities.R0.entities\", R0.types AS \"document_with_formation_entities.R0.types\", R0.sentids AS \"document_with_formation_entities.R0.sentids\", R0.wordidxs AS \"document_with_formation_entities.R0.wordidxs\", R0.words AS \"document_with_formation_entities.R0.words\", R0.poses AS \"document_with_formation_entities.R0.poses\", R0.ners AS \"document_with_formation_entities.R0.ners\", R0.lemmas AS \"document_with_formation_entities.R0.lemmas\", R0.dep_paths AS \"document_with_formation_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_formation_entities.R0.dep_parents\", R0.font AS \"document_with_formation_entities.R0.font\", R0.layout AS \"document_with_formation_entities.R0.layout\"\nFROM document_with_formation_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_formation_entities"
          ],
          "output_relation": "entity_formation_candidate__0",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_formation_global.py"
        },
        "ext_entity_formation_candidate_local_by_ext_entity_formation_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_formation_candidate_local",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_formation_local.py"
        },
        "ext_entity_location": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_location\"\n\tdeepdive sql 'INSERT INTO entity_location SELECT R0.docid AS \"entity_location_candidate.R0.docid\", R0.type AS \"entity_location_candidate.R0.type\", R0.eid AS \"entity_location_candidate.R0.eid\", R0.entity AS \"entity_location_candidate.R0.entity\", R0.prov AS \"entity_location_candidate.R0.prov\"\nFROM entity_location_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_relations": [
            "entity_location_candidate"
          ],
          "output_relation": "entity_location",
          "style": "cmd_extractor"
        },
        "ext_entity_location_candidate_by_ext_entity_location_global": {
          "dependencies": [
            "ext_documents_serialized"
          ],
          "input": " SELECT R0.docid AS \"documents_serialized.R0.docid\", R0.sentids AS \"documents_serialized.R0.sentids\", R0.wordidxs AS \"documents_serialized.R0.wordidxs\", R0.words AS \"documents_serialized.R0.words\", R0.poses AS \"documents_serialized.R0.poses\", R0.ners AS \"documents_serialized.R0.ners\", R0.lemmas AS \"documents_serialized.R0.lemmas\", R0.dep_paths AS \"documents_serialized.R0.dep_paths\", R0.dep_parents AS \"documents_serialized.R0.dep_parents\", R0.font AS \"documents_serialized.R0.font\", R0.layout AS \"documents_serialized.R0.layout\"\nFROM documents_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "documents_serialized"
          ],
          "output_relation": "entity_location_candidate",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_location_global.py"
        },
        "ext_entity_taxon": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_taxon\"\n\tdeepdive sql 'INSERT INTO entity_taxon SELECT R0.docid AS \"entity_taxon_candidate.R0.docid\", R0.type AS \"entity_taxon_candidate.R0.type\", R0.eid AS \"entity_taxon_candidate.R0.eid\", R0.entity AS \"entity_taxon_candidate.R0.entity\", R0.author_year AS \"entity_taxon_candidate.R0.author_year\", R0.prov AS \"entity_taxon_candidate.R0.prov\"\nFROM entity_taxon_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate"
          ],
          "input_relations": [
            "entity_taxon_candidate"
          ],
          "output_relation": "entity_taxon",
          "style": "cmd_extractor"
        },
        "ext_entity_taxon_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_taxon_candidate\"\n\tdeepdive sql 'INSERT INTO entity_taxon_candidate SELECT R0.docid AS \"entity_taxon_candidate__0.R0.docid\", R0.type AS \"entity_taxon_candidate__0.R0.type\", R0.eid AS \"entity_taxon_candidate__0.R0.eid\", R0.entity AS \"entity_taxon_candidate__0.R0.entity\", R0.author_year AS \"entity_taxon_candidate__0.R0.author_year\", R0.prov AS \"entity_taxon_candidate__0.R0.prov\"\nFROM entity_taxon_candidate__0 R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_taxon_candidate_local.R0.docid\", R0.type AS \"entity_taxon_candidate_local.R0.type\", R0.eid AS \"entity_taxon_candidate_local.R0.eid\", R0.entity AS \"entity_taxon_candidate_local.R0.entity\", R0.author_year AS \"entity_taxon_candidate_local.R0.author_year\", R0.prov AS \"entity_taxon_candidate_local.R0.prov\"\nFROM entity_taxon_candidate_local R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
            "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
          ],
          "input_relations": [
            "entity_taxon_candidate__0",
            "entity_taxon_candidate_local"
          ],
          "output_relation": "entity_taxon_candidate",
          "style": "cmd_extractor"
        },
        "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global": {
          "dependencies": [
            "ext_document_with_taxon_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_taxon_entities.R0.docid\", R0.entities AS \"document_with_taxon_entities.R0.entities\", R0.types AS \"document_with_taxon_entities.R0.types\", R0.sentids AS \"document_with_taxon_entities.R0.sentids\", R0.wordidxs AS \"document_with_taxon_entities.R0.wordidxs\", R0.words AS \"document_with_taxon_entities.R0.words\", R0.poses AS \"document_with_taxon_entities.R0.poses\", R0.ners AS \"document_with_taxon_entities.R0.ners\", R0.lemmas AS \"document_with_taxon_entities.R0.lemmas\", R0.dep_paths AS \"document_with_taxon_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_taxon_entities.R0.dep_parents\", R0.font AS \"document_with_taxon_entities.R0.font\", R0.layout AS \"document_with_taxon_entities.R0.layout\"\nFROM document_with_taxon_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_taxon_entities"
          ],
          "output_relation": "entity_taxon_candidate__0",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_taxon_global.py"
        },
        "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_taxon_candidate_local",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_taxon_local.py"
        },
        "ext_entity_temporal": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_temporal\"\n\tdeepdive sql 'INSERT INTO entity_temporal SELECT R0.docid AS \"entity_temporal_candidate.R0.docid\", R0.type AS \"entity_temporal_candidate.R0.type\", R0.eid AS \"entity_temporal_candidate.R0.eid\", R0.entity AS \"entity_temporal_candidate.R0.entity\", R0.prov AS \"entity_temporal_candidate.R0.prov\"\nFROM entity_temporal_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "input_relations": [
            "entity_temporal_candidate"
          ],
          "output_relation": "entity_temporal",
          "style": "cmd_extractor"
        },
        "ext_entity_temporal_candidate_by_ext_entity_temporal_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_temporal_candidate",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_temporal_local.py"
        },
        "ext_formation_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"formation_per_doc\"\n\tdeepdive sql 'INSERT INTO formation_per_doc SELECT R0.docid AS \"entity_formation_candidate_local.R0.docid\", ARRAY_AGG(R0.entity) AS column_1, ARRAY_AGG(R0.type) AS column_2\nFROM entity_formation_candidate_local R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate_local_by_ext_entity_formation_local"
          ],
          "input_relations": [
            "entity_formation_candidate_local"
          ],
          "output_relation": "formation_per_doc",
          "style": "cmd_extractor"
        },
        "ext_relation_candidates_by_ext_relation_same_sent": {
          "dependencies": [
            "ext_document_with_all_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_all_entities.R0.docid\", R0.entities AS \"document_with_all_entities.R0.entities\", R0.types AS \"document_with_all_entities.R0.types\", R0.eids AS \"document_with_all_entities.R0.eids\", R0.provs AS \"document_with_all_entities.R0.provs\", R0.sentids AS \"document_with_all_entities.R0.sentids\", R0.wordidxs AS \"document_with_all_entities.R0.wordidxs\", R0.words AS \"document_with_all_entities.R0.words\", R0.poses AS \"document_with_all_entities.R0.poses\", R0.ners AS \"document_with_all_entities.R0.ners\", R0.lemmas AS \"document_with_all_entities.R0.lemmas\", R0.dep_paths AS \"document_with_all_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_all_entities.R0.dep_parents\", R0.font AS \"document_with_all_entities.R0.font\", R0.layout AS \"document_with_all_entities.R0.layout\"\nFROM document_with_all_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_all_entities"
          ],
          "output_relation": "relation_candidates",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_relation_samesent.py"
        },
        "ext_relation_formation": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formation\"\n\tdeepdive sql 'INSERT INTO relation_formation SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_formation_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formation_supervise_by_ext_relation_variable_formation"
          ],
          "input_relations": [
            "relation_formation_supervise"
          ],
          "output_relation": "relation_formation",
          "style": "cmd_extractor"
        },
        "ext_relation_formation_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formation_global\"\n\tdeepdive sql 'INSERT INTO relation_formation_global SELECT DISTINCT R0.type AS \"relation_formation.R0.type\", R0.eid1 AS \"relation_formation.R0.eid1\", R0.eid2 AS \"relation_formation.R0.eid2\"\nFROM relation_formation R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formation"
          ],
          "input_relations": [
            "relation_formation"
          ],
          "output_relation": "relation_formation_global",
          "style": "cmd_extractor"
        },
        "ext_relation_formation_supervise_by_ext_relation_variable_formation": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_formation_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_formation.py"
        },
        "ext_relation_formationtemporal": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formationtemporal\"\n\tdeepdive sql 'INSERT INTO relation_formationtemporal SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_formationtemporal_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal"
          ],
          "input_relations": [
            "relation_formationtemporal_supervise"
          ],
          "output_relation": "relation_formationtemporal",
          "style": "cmd_extractor"
        },
        "ext_relation_formationtemporal_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formationtemporal_global\"\n\tdeepdive sql 'INSERT INTO relation_formationtemporal_global SELECT DISTINCT R0.type AS \"relation_formationtemporal.R0.type\", R0.eid1 AS \"relation_formationtemporal.R0.eid1\", R0.eid2 AS \"relation_formationtemporal.R0.eid2\"\nFROM relation_formationtemporal R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formationtemporal"
          ],
          "input_relations": [
            "relation_formationtemporal"
          ],
          "output_relation": "relation_formationtemporal_global",
          "style": "cmd_extractor"
        },
        "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_formationtemporal_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_formationtemporal.py"
        },
        "ext_relation_taxonomy": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_taxonomy\"\n\tdeepdive sql 'INSERT INTO relation_taxonomy SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_taxonomy_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy"
          ],
          "input_relations": [
            "relation_taxonomy_supervise"
          ],
          "output_relation": "relation_taxonomy",
          "style": "cmd_extractor"
        },
        "ext_relation_taxonomy_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_taxonomy_global\"\n\tdeepdive sql 'INSERT INTO relation_taxonomy_global SELECT DISTINCT R0.type AS \"relation_taxonomy.R0.type\", R0.eid1 AS \"relation_taxonomy.R0.eid1\", R0.eid2 AS \"relation_taxonomy.R0.eid2\"\nFROM relation_taxonomy R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_taxonomy"
          ],
          "input_relations": [
            "relation_taxonomy"
          ],
          "output_relation": "relation_taxonomy_global",
          "style": "cmd_extractor"
        },
        "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_taxonomy_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_taxonomy.py"
        },
        "ext_sentences": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"sentences\"\n\tdeepdive sql 'INSERT INTO sentences SELECT R0.docid AS \"sentences_original.R0.docid\", R0.sentid AS \"sentences_original.R0.sentid\", R0.wordindex AS \"sentences_original.R0.wordindex\", R0.words AS \"sentences_original.R0.words\", R0.poses AS \"sentences_original.R0.poses\", R0.ners AS \"sentences_original.R0.ners\", R0.lemmas AS \"sentences_original.R0.lemmas\", R0.dep_paths AS \"sentences_original.R0.dep_paths\", R0.dep_parents AS \"sentences_original.R0.dep_parents\", NULL AS column_9, NULL AS column_9\nFROM sentences_original R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "input_relations": [
            "sentences_original"
          ],
          "output_relation": "sentences",
          "style": "cmd_extractor"
        },
        "ext_sentences_serialized": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"sentences_serialized\"\n\tdeepdive sql 'INSERT INTO sentences_serialized SELECT DISTINCT R0.docid AS \"sentences.R0.docid\", R0.sentid AS \"sentences.R0.sentid\", array_to_string(R0.wordindex, '\\''@@@@@'\\'') AS column_2, array_to_string(R0.words, '\\''@@@@@'\\'') AS column_3, array_to_string(R0.poses, '\\''@@@@@'\\'') AS column_4, array_to_string(R0.ners, '\\''@@@@@'\\'') AS column_5, array_to_string(R0.lemmas, '\\''@@@@@'\\'') AS column_6, array_to_string(R0.dep_paths, '\\''@@@@@'\\'') AS column_7, array_to_string(R0.dep_parents, '\\''@@@@@'\\'') AS column_8, array_to_string(R0.font, '\\''@@@@@'\\'') AS column_9, array_to_string(R0.layout, '\\''@@@@@'\\'') AS column_10\nFROM sentences R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_sentences"
          ],
          "input_relations": [
            "sentences"
          ],
          "output_relation": "sentences_serialized",
          "style": "cmd_extractor"
        },
        "ext_taxon_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"taxon_per_doc\"\n\tdeepdive sql 'INSERT INTO taxon_per_doc SELECT R0.docid AS \"entity_taxon_candidate_local.R0.docid\", ARRAY_AGG(R0.entity) AS column_1, ARRAY_AGG(R0.type) AS column_2\nFROM entity_taxon_candidate_local R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
          ],
          "input_relations": [
            "entity_taxon_candidate_local"
          ],
          "output_relation": "taxon_per_doc",
          "style": "cmd_extractor"
        }
      }
    },
    "inference": {
      "factors": {
        "inf_istrue_entity_formation": {
          "dependencies": [
            "ext_entity_formation_candidate"
          ],
          "function": "Imply(entity_formation.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_formation.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_formation R0, entity_formation_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_formation",
            "entity_formation_candidate"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_entity_location": {
          "dependencies": [
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "function": "Imply(entity_location.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_location.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_location R0, entity_location_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_location",
            "entity_location_candidate"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_entity_taxon": {
          "dependencies": [
            "ext_entity_taxon_candidate"
          ],
          "function": "Imply(entity_taxon.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_taxon.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_taxon R0, entity_taxon_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.author_year = R0.author_year  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_taxon",
            "entity_taxon_candidate"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_entity_temporal": {
          "dependencies": [
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "function": "Imply(entity_temporal.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_temporal.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_temporal R0, entity_temporal_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_temporal",
            "entity_temporal_candidate"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_formation": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formation.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formation.R0.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_formation R0, relation_candidates R1\n        WHERE R1.docid = R0.docid  AND R1.type = 'FORMATION' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 ",
          "input_relations": [
            "relation_formation",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_formation_global": {
          "dependencies": [
            "ext_relation_formation",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formation_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formation_global.R0.id\" , R1.id AS \"relation_formation.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_formation_global R0, relation_formation R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_formation_global",
            "relation_formation",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_formationtemporal": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent",
            "ext_entity_formation",
            "ext_entity_temporal"
          ],
          "function": "Imply(relation_formationtemporal.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formationtemporal.R0.id\" , R2.id AS \"entity_formation.R2.id\" , R3.id AS \"entity_temporal.R3.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_formationtemporal R0, relation_candidates R1, entity_formation R2, entity_temporal R3\n        WHERE R1.docid = R0.docid  AND R1.type = 'FORMATIONINTERVAL' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2  AND R2.docid = R0.docid  AND R2.eid = R0.eid1  AND R2.entity = R0.entity1  AND R3.docid = R0.docid  AND R3.eid = R0.eid2  AND R3.entity = R0.entity2 ",
          "input_relations": [
            "relation_formationtemporal",
            "relation_candidates",
            "entity_formation",
            "entity_temporal"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_formationtemporal_global": {
          "dependencies": [
            "ext_relation_formationtemporal",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formationtemporal_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formationtemporal_global.R0.id\" , R1.id AS \"relation_formationtemporal.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_formationtemporal_global R0, relation_formationtemporal R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_formationtemporal_global",
            "relation_formationtemporal",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_taxonomy": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_taxonomy.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_taxonomy.R0.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_taxonomy R0, relation_candidates R1\n        WHERE R1.docid = R0.docid  AND R1.type = 'TAXONOMY' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 ",
          "input_relations": [
            "relation_taxonomy",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_taxonomy_global": {
          "dependencies": [
            "ext_relation_taxonomy",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_taxonomy_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_taxonomy_global.R0.id\" , R1.id AS \"relation_taxonomy.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_taxonomy_global R0, relation_taxonomy R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_taxonomy_global",
            "relation_taxonomy",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        }
      }
    },
    "pipeline": {
      "pipelines": {
        "endtoend": [
          "ext_entity_location",
          "ext_document_with_formation_entities",
          "ext_sentences",
          "ext_all_entity_per_doc",
          "ext_documents_serialized",
          "ext_relation_taxonomy",
          "ext_documents",
          "ext_entity_formation_candidate",
          "ext_taxon_per_doc",
          "ext_document_with_taxon_entities",
          "ext_entity_taxon",
          "ext_entity_location_candidate_by_ext_entity_location_global",
          "ext_relation_taxonomy_global",
          "ext_relation_formationtemporal",
          "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy",
          "ext_relation_formation",
          "ext_entity_temporal_candidate_by_ext_entity_temporal_local",
          "ext_entity_formation_candidate_local_by_ext_entity_formation_local",
          "ext_entity_formation_candidate__0_by_ext_entity_formation_global",
          "ext_entity_formation",
          "ext_document_with_all_entities",
          "ext_relation_formationtemporal_global",
          "ext_relation_formation_supervise_by_ext_relation_variable_formation",
          "ext_sentences_serialized",
          "ext_formation_per_doc",
          "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal",
          "ext_relation_formation_global",
          "ext_entity_taxon_candidate",
          "ext_relation_candidates_by_ext_relation_same_sent",
          "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
          "ext_entity_temporal",
          "ext_all_entity_candidate",
          "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local",
          "inf_istrue_relation_formation",
          "inf_istrue_relation_formationtemporal",
          "inf_istrue_relation_taxonomy",
          "inf_istrue_relation_formation_global",
          "inf_istrue_relation_formationtemporal_global",
          "inf_istrue_relation_taxonomy_global",
          "inf_istrue_entity_formation",
          "inf_istrue_entity_temporal",
          "inf_istrue_entity_location",
          "inf_istrue_entity_taxon"
        ],
        "extraction": [
          "ext_entity_location",
          "ext_document_with_formation_entities",
          "ext_sentences",
          "ext_all_entity_per_doc",
          "ext_documents_serialized",
          "ext_relation_taxonomy",
          "ext_documents",
          "ext_entity_formation_candidate",
          "ext_taxon_per_doc",
          "ext_document_with_taxon_entities",
          "ext_entity_taxon",
          "ext_entity_location_candidate_by_ext_entity_location_global",
          "ext_relation_taxonomy_global",
          "ext_relation_formationtemporal",
          "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy",
          "ext_relation_formation",
          "ext_entity_temporal_candidate_by_ext_entity_temporal_local",
          "ext_entity_formation_candidate_local_by_ext_entity_formation_local",
          "ext_entity_formation_candidate__0_by_ext_entity_formation_global",
          "ext_entity_formation",
          "ext_document_with_all_entities",
          "ext_relation_formationtemporal_global",
          "ext_relation_formation_supervise_by_ext_relation_variable_formation",
          "ext_sentences_serialized",
          "ext_formation_per_doc",
          "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal",
          "ext_relation_formation_global",
          "ext_entity_taxon_candidate",
          "ext_relation_candidates_by_ext_relation_same_sent",
          "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
          "ext_entity_temporal",
          "ext_all_entity_candidate",
          "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
        ],
        "inference": [
          "inf_istrue_relation_formation",
          "inf_istrue_relation_formationtemporal",
          "inf_istrue_relation_taxonomy",
          "inf_istrue_relation_formation_global",
          "inf_istrue_relation_formationtemporal_global",
          "inf_istrue_relation_taxonomy_global",
          "inf_istrue_entity_formation",
          "inf_istrue_entity_temporal",
          "inf_istrue_entity_location",
          "inf_istrue_entity_taxon"
        ]
      },
      "run": ""
    },
    "sampler": {
      "sampler_args": "-l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence",
      "sampler_cmd": "sampler-dw"
    },
    "schema": {
      "relations": {
        "all_entity_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "all_entity_per_doc": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 1,
              "type": "text[]"
            },
            "entity": {
              "index": 2,
              "type": "text[]"
            },
            "prov": {
              "index": 4,
              "type": "text[]"
            },
            "type": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "document_with_all_entities": {
          "columns": {
            "dep_parents": {
              "index": 12,
              "type": "text"
            },
            "dep_paths": {
              "index": 11,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eids": {
              "index": 3,
              "type": "text"
            },
            "entities": {
              "index": 1,
              "type": "text"
            },
            "font": {
              "index": 13,
              "type": "text"
            },
            "layout": {
              "index": 14,
              "type": "text"
            },
            "lemmas": {
              "index": 10,
              "type": "text"
            },
            "ners": {
              "index": 9,
              "type": "text"
            },
            "poses": {
              "index": 8,
              "type": "text"
            },
            "provs": {
              "index": 4,
              "type": "text"
            },
            "sentids": {
              "index": 5,
              "type": "text"
            },
            "types": {
              "index": 2,
              "type": "text"
            },
            "wordidxs": {
              "index": 6,
              "type": "text"
            },
            "words": {
              "index": 7,
              "type": "text"
            }
          }
        },
        "document_with_formation_entities": {
          "columns": {
            "dep_parents": {
              "index": 10,
              "type": "text"
            },
            "dep_paths": {
              "index": 9,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entities": {
              "index": 1,
              "type": "text"
            },
            "font": {
              "index": 11,
              "type": "text"
            },
            "layout": {
              "index": 12,
              "type": "text"
            },
            "lemmas": {
              "index": 8,
              "type": "text"
            },
            "ners": {
              "index": 7,
              "type": "text"
            },
            "poses": {
              "index": 6,
              "type": "text"
            },
            "sentids": {
              "index": 3,
              "type": "text"
            },
            "types": {
              "index": 2,
              "type": "text"
            },
            "wordidxs": {
              "index": 4,
              "type": "text"
            },
            "words": {
              "index": 5,
              "type": "text"
            }
          }
        },
        "document_with_taxon_entities": {
          "columns": {
            "dep_parents": {
              "index": 10,
              "type": "text"
            },
            "dep_paths": {
              "index": 9,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entities": {
              "index": 1,
              "type": "text"
            },
            "font": {
              "index": 11,
              "type": "text"
            },
            "layout": {
              "index": 12,
              "type": "text"
            },
            "lemmas": {
              "index": 8,
              "type": "text"
            },
            "ners": {
              "index": 7,
              "type": "text"
            },
            "poses": {
              "index": 6,
              "type": "text"
            },
            "sentids": {
              "index": 3,
              "type": "text"
            },
            "types": {
              "index": 2,
              "type": "text"
            },
            "wordidxs": {
              "index": 4,
              "type": "text"
            },
            "words": {
              "index": 5,
              "type": "text"
            }
          }
        },
        "documents": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text[]"
            },
            "dep_paths": {
              "index": 7,
              "type": "text[]"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text[]"
            },
            "layout": {
              "index": 10,
              "type": "text[]"
            },
            "lemmas": {
              "index": 6,
              "type": "text[]"
            },
            "ners": {
              "index": 5,
              "type": "text[]"
            },
            "poses": {
              "index": 4,
              "type": "text[]"
            },
            "sentids": {
              "index": 1,
              "type": "text[]"
            },
            "wordidxs": {
              "index": 2,
              "type": "text[]"
            },
            "words": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "documents_serialized": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text"
            },
            "dep_paths": {
              "index": 7,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text"
            },
            "layout": {
              "index": 10,
              "type": "text"
            },
            "lemmas": {
              "index": 6,
              "type": "text"
            },
            "ners": {
              "index": 5,
              "type": "text"
            },
            "poses": {
              "index": 4,
              "type": "text"
            },
            "sentids": {
              "index": 1,
              "type": "text"
            },
            "wordidxs": {
              "index": 2,
              "type": "text"
            },
            "words": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "entity_formation": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_formation_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_formation_candidate__0": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_formation_candidate_local": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_location": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_location_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_taxon": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_taxon_candidate": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_taxon_candidate__0": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_taxon_candidate_local": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_temporal": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_temporal_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "formation_per_doc": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entity": {
              "index": 1,
              "type": "text[]"
            },
            "type": {
              "index": 2,
              "type": "text[]"
            }
          }
        },
        "relation_candidates": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "features": {
              "index": 6,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "relation_formation": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formation_global": {
          "columns": {
            "entity1": {
              "index": 1,
              "type": "text"
            },
            "entity2": {
              "index": 2,
              "type": "text"
            },
            "type": {
              "index": 0,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formation_supervise": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "label": {
              "index": 6,
              "type": "boolean"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "relation_formationtemporal": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formationtemporal_global": {
          "columns": {
            "entity1": {
              "index": 1,
              "type": "text"
            },
            "entity2": {
              "index": 2,
              "type": "text"
            },
            "type": {
              "index": 0,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formationtemporal_supervise": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "label": {
              "index": 6,
              "type": "boolean"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "relation_taxonomy": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_taxonomy_global": {
          "columns": {
            "entity1": {
              "index": 1,
              "type": "text"
            },
            "entity2": {
              "index": 2,
              "type": "text"
            },
            "type": {
              "index": 0,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_taxonomy_supervise": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "label": {
              "index": 6,
              "type": "boolean"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "sentences": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text[]"
            },
            "dep_paths": {
              "index": 7,
              "type": "text[]"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text[]"
            },
            "layout": {
              "index": 10,
              "type": "text[]"
            },
            "lemmas": {
              "index": 6,
              "type": "text[]"
            },
            "ners": {
              "index": 5,
              "type": "text[]"
            },
            "poses": {
              "index": 4,
              "type": "text[]"
            },
            "sentid": {
              "index": 1,
              "type": "text"
            },
            "wordindex": {
              "index": 2,
              "type": "text[]"
            },
            "words": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "sentences_original": {
          "columns": {
            "bounding_boxes": {
              "index": 9,
              "type": "text[]"
            },
            "dep_parents": {
              "index": 8,
              "type": "text[]"
            },
            "dep_paths": {
              "index": 7,
              "type": "text[]"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "lemmas": {
              "index": 6,
              "type": "text[]"
            },
            "ners": {
              "index": 5,
              "type": "text[]"
            },
            "poses": {
              "index": 4,
              "type": "text[]"
            },
            "sentid": {
              "index": 1,
              "type": "text"
            },
            "wordindex": {
              "index": 2,
              "type": "text[]"
            },
            "words": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "sentences_serialized": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text"
            },
            "dep_paths": {
              "index": 7,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text"
            },
            "layout": {
              "index": 10,
              "type": "text"
            },
            "lemmas": {
              "index": 6,
              "type": "text"
            },
            "ners": {
              "index": 5,
              "type": "text"
            },
            "poses": {
              "index": 4,
              "type": "text"
            },
            "sentid": {
              "index": 1,
              "type": "text"
            },
            "wordidxs": {
              "index": 2,
              "type": "text"
            },
            "words": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "taxon_per_doc": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entity": {
              "index": 1,
              "type": "text[]"
            },
            "type": {
              "index": 2,
              "type": "text[]"
            }
          }
        }
      },
      "variables": {
        "entity_formation": {
          "label": "Boolean"
        },
        "entity_location": {
          "label": "Boolean"
        },
        "entity_taxon": {
          "label": "Boolean"
        },
        "entity_temporal": {
          "label": "Boolean"
        },
        "relation_formation": {
          "label": "Boolean"
        },
        "relation_formation_global": {
          "label": "Boolean"
        },
        "relation_formationtemporal": {
          "label": "Boolean"
        },
        "relation_formationtemporal_global": {
          "label": "Boolean"
        },
        "relation_taxonomy": {
          "label": "Boolean"
        },
        "relation_taxonomy_global": {
          "label": "Boolean"
        }
      }
    }
  },
  "deepdive_": {
    "db": {
      "default": {
        "dbname": "pdd_test_big_",
        "driver": "org.postgresql.Driver",
        "host": "localhost",
        "incremental_mode": "ORIGINAL",
        "password": "",
        "port": "6432",
        "url": "jdbc:postgresql://localhost:6432/pdd_test_big_",
        "user": "marycirino"
      }
    },
    "extraction": {
      "extractors": {
        "ext_all_entity_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"all_entity_candidate\"\n\tdeepdive sql 'INSERT INTO all_entity_candidate SELECT R0.docid AS \"entity_formation_candidate.R0.docid\", '\\''FORMATION'\\'' AS column_1, R0.eid AS \"entity_formation_candidate.R0.eid\", R0.entity AS \"entity_formation_candidate.R0.entity\", R0.prov AS \"entity_formation_candidate.R0.prov\"\nFROM entity_formation_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_temporal_candidate.R0.docid\", '\\''INTERVAL'\\'' AS column_1, R0.eid AS \"entity_temporal_candidate.R0.eid\", R0.entity AS \"entity_temporal_candidate.R0.entity\", R0.prov AS \"entity_temporal_candidate.R0.prov\"\nFROM entity_temporal_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_taxon_candidate.R0.docid\", '\\''TAXON-'\\'' || R0.type AS column_1, R0.eid AS \"entity_taxon_candidate.R0.eid\", R0.entity AS \"entity_taxon_candidate.R0.entity\", R0.prov AS \"entity_taxon_candidate.R0.prov\"\nFROM entity_taxon_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_location_candidate.R0.docid\", '\\''LOCATION'\\'' AS column_1, R0.eid AS \"entity_location_candidate.R0.eid\", R0.entity AS \"entity_location_candidate.R0.entity\", R0.prov AS \"entity_location_candidate.R0.prov\"\nFROM entity_location_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate",
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local",
            "ext_entity_taxon_candidate",
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_relations": [
            "entity_formation_candidate",
            "entity_temporal_candidate",
            "entity_taxon_candidate",
            "entity_location_candidate"
          ],
          "output_relation": "all_entity_candidate",
          "style": "cmd_extractor"
        },
        "ext_all_entity_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"all_entity_per_doc\"\n\tdeepdive sql 'INSERT INTO all_entity_per_doc SELECT R0.docid AS \"all_entity_candidate.R0.docid\", ARRAY_AGG(R0.eid) AS column_1, ARRAY_AGG(R0.entity) AS column_2, ARRAY_AGG(R0.type) AS column_3, ARRAY_AGG(R0.prov) AS column_4\nFROM all_entity_candidate R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_all_entity_candidate"
          ],
          "input_relations": [
            "all_entity_candidate"
          ],
          "output_relation": "all_entity_per_doc",
          "style": "cmd_extractor"
        },
        "ext_document_with_all_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_all_entities\"\n\tdeepdive sql 'INSERT INTO document_with_all_entities SELECT R0.docid AS \"all_entity_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, array_to_string(R0.eid, '\\''@@@@@'\\'') AS column_3, array_to_string(R0.prov, '\\''@@@@@'\\'') AS column_4, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM all_entity_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_all_entity_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "all_entity_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_all_entities",
          "style": "cmd_extractor"
        },
        "ext_document_with_formation_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_formation_entities\"\n\tdeepdive sql 'INSERT INTO document_with_formation_entities SELECT R0.docid AS \"formation_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM formation_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_formation_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "formation_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_formation_entities",
          "style": "cmd_extractor"
        },
        "ext_document_with_taxon_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_taxon_entities\"\n\tdeepdive sql 'INSERT INTO document_with_taxon_entities SELECT R0.docid AS \"taxon_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM taxon_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_taxon_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "taxon_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_taxon_entities",
          "style": "cmd_extractor"
        },
        "ext_documents": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"documents\"\n\tdeepdive sql 'INSERT INTO documents SELECT DISTINCT R0.docid AS \"sentences_serialized.R0.docid\", ARRAY_AGG(R0.sentid) AS column_1, ARRAY_AGG(R0.wordidxs) AS column_2, ARRAY_AGG(R0.words) AS column_3, ARRAY_AGG(R0.poses) AS column_4, ARRAY_AGG(R0.ners) AS column_5, ARRAY_AGG(R0.lemmas) AS column_6, ARRAY_AGG(R0.dep_paths) AS column_7, ARRAY_AGG(R0.dep_parents) AS column_8, ARRAY_AGG(R0.font) AS column_9, ARRAY_AGG(R0.layout) AS column_10\nFROM sentences_serialized R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "documents",
          "style": "cmd_extractor"
        },
        "ext_documents_serialized": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"documents_serialized\"\n\tdeepdive sql 'INSERT INTO documents_serialized SELECT R0.docid AS \"documents.R0.docid\", array_to_string(R0.sentids, '\\''|||||'\\'') AS column_1, array_to_string(R0.wordidxs, '\\''|||||'\\'') AS column_2, array_to_string(R0.words, '\\''|||||'\\'') AS column_3, array_to_string(R0.poses, '\\''|||||'\\'') AS column_4, array_to_string(R0.ners, '\\''|||||'\\'') AS column_5, array_to_string(R0.lemmas, '\\''|||||'\\'') AS column_6, array_to_string(R0.dep_paths, '\\''|||||'\\'') AS column_7, array_to_string(R0.dep_parents, '\\''|||||'\\'') AS column_8, array_to_string(R0.font, '\\''|||||'\\'') AS column_9, array_to_string(R0.layout, '\\''|||||'\\'') AS column_10\nFROM documents R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_documents"
          ],
          "input_relations": [
            "documents"
          ],
          "output_relation": "documents_serialized",
          "style": "cmd_extractor"
        },
        "ext_entity_formation": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_formation\"\n\tdeepdive sql 'INSERT INTO entity_formation SELECT R0.docid AS \"entity_formation_candidate.R0.docid\", R0.type AS \"entity_formation_candidate.R0.type\", R0.eid AS \"entity_formation_candidate.R0.eid\", R0.entity AS \"entity_formation_candidate.R0.entity\", R0.prov AS \"entity_formation_candidate.R0.prov\"\nFROM entity_formation_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate"
          ],
          "input_relations": [
            "entity_formation_candidate"
          ],
          "output_relation": "entity_formation",
          "style": "cmd_extractor"
        },
        "ext_entity_formation_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_formation_candidate\"\n\tdeepdive sql 'INSERT INTO entity_formation_candidate SELECT R0.docid AS \"entity_formation_candidate__0.R0.docid\", R0.type AS \"entity_formation_candidate__0.R0.type\", R0.eid AS \"entity_formation_candidate__0.R0.eid\", R0.entity AS \"entity_formation_candidate__0.R0.entity\", R0.prov AS \"entity_formation_candidate__0.R0.prov\"\nFROM entity_formation_candidate__0 R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_formation_candidate_local.R0.docid\", R0.type AS \"entity_formation_candidate_local.R0.type\", R0.eid AS \"entity_formation_candidate_local.R0.eid\", R0.entity AS \"entity_formation_candidate_local.R0.entity\", R0.prov AS \"entity_formation_candidate_local.R0.prov\"\nFROM entity_formation_candidate_local R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate__0_by_ext_entity_formation_global",
            "ext_entity_formation_candidate_local_by_ext_entity_formation_local"
          ],
          "input_relations": [
            "entity_formation_candidate__0",
            "entity_formation_candidate_local"
          ],
          "output_relation": "entity_formation_candidate",
          "style": "cmd_extractor"
        },
        "ext_entity_formation_candidate__0_by_ext_entity_formation_global": {
          "dependencies": [
            "ext_document_with_formation_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_formation_entities.R0.docid\", R0.entities AS \"document_with_formation_entities.R0.entities\", R0.types AS \"document_with_formation_entities.R0.types\", R0.sentids AS \"document_with_formation_entities.R0.sentids\", R0.wordidxs AS \"document_with_formation_entities.R0.wordidxs\", R0.words AS \"document_with_formation_entities.R0.words\", R0.poses AS \"document_with_formation_entities.R0.poses\", R0.ners AS \"document_with_formation_entities.R0.ners\", R0.lemmas AS \"document_with_formation_entities.R0.lemmas\", R0.dep_paths AS \"document_with_formation_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_formation_entities.R0.dep_parents\", R0.font AS \"document_with_formation_entities.R0.font\", R0.layout AS \"document_with_formation_entities.R0.layout\"\nFROM document_with_formation_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_formation_entities"
          ],
          "output_relation": "entity_formation_candidate__0",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_formation_global.py"
        },
        "ext_entity_formation_candidate_local_by_ext_entity_formation_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_formation_candidate_local",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_formation_local.py"
        },
        "ext_entity_location": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_location\"\n\tdeepdive sql 'INSERT INTO entity_location SELECT R0.docid AS \"entity_location_candidate.R0.docid\", R0.type AS \"entity_location_candidate.R0.type\", R0.eid AS \"entity_location_candidate.R0.eid\", R0.entity AS \"entity_location_candidate.R0.entity\", R0.prov AS \"entity_location_candidate.R0.prov\"\nFROM entity_location_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_relations": [
            "entity_location_candidate"
          ],
          "output_relation": "entity_location",
          "style": "cmd_extractor"
        },
        "ext_entity_location_candidate_by_ext_entity_location_global": {
          "dependencies": [
            "ext_documents_serialized"
          ],
          "input": " SELECT R0.docid AS \"documents_serialized.R0.docid\", R0.sentids AS \"documents_serialized.R0.sentids\", R0.wordidxs AS \"documents_serialized.R0.wordidxs\", R0.words AS \"documents_serialized.R0.words\", R0.poses AS \"documents_serialized.R0.poses\", R0.ners AS \"documents_serialized.R0.ners\", R0.lemmas AS \"documents_serialized.R0.lemmas\", R0.dep_paths AS \"documents_serialized.R0.dep_paths\", R0.dep_parents AS \"documents_serialized.R0.dep_parents\", R0.font AS \"documents_serialized.R0.font\", R0.layout AS \"documents_serialized.R0.layout\"\nFROM documents_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "documents_serialized"
          ],
          "output_relation": "entity_location_candidate",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_location_global.py"
        },
        "ext_entity_taxon": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_taxon\"\n\tdeepdive sql 'INSERT INTO entity_taxon SELECT R0.docid AS \"entity_taxon_candidate.R0.docid\", R0.type AS \"entity_taxon_candidate.R0.type\", R0.eid AS \"entity_taxon_candidate.R0.eid\", R0.entity AS \"entity_taxon_candidate.R0.entity\", R0.author_year AS \"entity_taxon_candidate.R0.author_year\", R0.prov AS \"entity_taxon_candidate.R0.prov\"\nFROM entity_taxon_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate"
          ],
          "input_relations": [
            "entity_taxon_candidate"
          ],
          "output_relation": "entity_taxon",
          "style": "cmd_extractor"
        },
        "ext_entity_taxon_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_taxon_candidate\"\n\tdeepdive sql 'INSERT INTO entity_taxon_candidate SELECT R0.docid AS \"entity_taxon_candidate__0.R0.docid\", R0.type AS \"entity_taxon_candidate__0.R0.type\", R0.eid AS \"entity_taxon_candidate__0.R0.eid\", R0.entity AS \"entity_taxon_candidate__0.R0.entity\", R0.author_year AS \"entity_taxon_candidate__0.R0.author_year\", R0.prov AS \"entity_taxon_candidate__0.R0.prov\"\nFROM entity_taxon_candidate__0 R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_taxon_candidate_local.R0.docid\", R0.type AS \"entity_taxon_candidate_local.R0.type\", R0.eid AS \"entity_taxon_candidate_local.R0.eid\", R0.entity AS \"entity_taxon_candidate_local.R0.entity\", R0.author_year AS \"entity_taxon_candidate_local.R0.author_year\", R0.prov AS \"entity_taxon_candidate_local.R0.prov\"\nFROM entity_taxon_candidate_local R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
            "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
          ],
          "input_relations": [
            "entity_taxon_candidate__0",
            "entity_taxon_candidate_local"
          ],
          "output_relation": "entity_taxon_candidate",
          "style": "cmd_extractor"
        },
        "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global": {
          "dependencies": [
            "ext_document_with_taxon_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_taxon_entities.R0.docid\", R0.entities AS \"document_with_taxon_entities.R0.entities\", R0.types AS \"document_with_taxon_entities.R0.types\", R0.sentids AS \"document_with_taxon_entities.R0.sentids\", R0.wordidxs AS \"document_with_taxon_entities.R0.wordidxs\", R0.words AS \"document_with_taxon_entities.R0.words\", R0.poses AS \"document_with_taxon_entities.R0.poses\", R0.ners AS \"document_with_taxon_entities.R0.ners\", R0.lemmas AS \"document_with_taxon_entities.R0.lemmas\", R0.dep_paths AS \"document_with_taxon_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_taxon_entities.R0.dep_parents\", R0.font AS \"document_with_taxon_entities.R0.font\", R0.layout AS \"document_with_taxon_entities.R0.layout\"\nFROM document_with_taxon_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_taxon_entities"
          ],
          "output_relation": "entity_taxon_candidate__0",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_taxon_global.py"
        },
        "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_taxon_candidate_local",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_taxon_local.py"
        },
        "ext_entity_temporal": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_temporal\"\n\tdeepdive sql 'INSERT INTO entity_temporal SELECT R0.docid AS \"entity_temporal_candidate.R0.docid\", R0.type AS \"entity_temporal_candidate.R0.type\", R0.eid AS \"entity_temporal_candidate.R0.eid\", R0.entity AS \"entity_temporal_candidate.R0.entity\", R0.prov AS \"entity_temporal_candidate.R0.prov\"\nFROM entity_temporal_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "input_relations": [
            "entity_temporal_candidate"
          ],
          "output_relation": "entity_temporal",
          "style": "cmd_extractor"
        },
        "ext_entity_temporal_candidate_by_ext_entity_temporal_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_temporal_candidate",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_temporal_local.py"
        },
        "ext_formation_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"formation_per_doc\"\n\tdeepdive sql 'INSERT INTO formation_per_doc SELECT R0.docid AS \"entity_formation_candidate_local.R0.docid\", ARRAY_AGG(R0.entity) AS column_1, ARRAY_AGG(R0.type) AS column_2\nFROM entity_formation_candidate_local R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate_local_by_ext_entity_formation_local"
          ],
          "input_relations": [
            "entity_formation_candidate_local"
          ],
          "output_relation": "formation_per_doc",
          "style": "cmd_extractor"
        },
        "ext_relation_candidates_by_ext_relation_same_sent": {
          "dependencies": [
            "ext_document_with_all_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_all_entities.R0.docid\", R0.entities AS \"document_with_all_entities.R0.entities\", R0.types AS \"document_with_all_entities.R0.types\", R0.eids AS \"document_with_all_entities.R0.eids\", R0.provs AS \"document_with_all_entities.R0.provs\", R0.sentids AS \"document_with_all_entities.R0.sentids\", R0.wordidxs AS \"document_with_all_entities.R0.wordidxs\", R0.words AS \"document_with_all_entities.R0.words\", R0.poses AS \"document_with_all_entities.R0.poses\", R0.ners AS \"document_with_all_entities.R0.ners\", R0.lemmas AS \"document_with_all_entities.R0.lemmas\", R0.dep_paths AS \"document_with_all_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_all_entities.R0.dep_parents\", R0.font AS \"document_with_all_entities.R0.font\", R0.layout AS \"document_with_all_entities.R0.layout\"\nFROM document_with_all_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_all_entities"
          ],
          "output_relation": "relation_candidates",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_relation_samesent.py"
        },
        "ext_relation_formation": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formation\"\n\tdeepdive sql 'INSERT INTO relation_formation SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_formation_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formation_supervise_by_ext_relation_variable_formation"
          ],
          "input_relations": [
            "relation_formation_supervise"
          ],
          "output_relation": "relation_formation",
          "style": "cmd_extractor"
        },
        "ext_relation_formation_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formation_global\"\n\tdeepdive sql 'INSERT INTO relation_formation_global SELECT DISTINCT R0.type AS \"relation_formation.R0.type\", R0.eid1 AS \"relation_formation.R0.eid1\", R0.eid2 AS \"relation_formation.R0.eid2\"\nFROM relation_formation R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formation"
          ],
          "input_relations": [
            "relation_formation"
          ],
          "output_relation": "relation_formation_global",
          "style": "cmd_extractor"
        },
        "ext_relation_formation_supervise_by_ext_relation_variable_formation": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_formation_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_formation.py"
        },
        "ext_relation_formationtemporal": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formationtemporal\"\n\tdeepdive sql 'INSERT INTO relation_formationtemporal SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_formationtemporal_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal"
          ],
          "input_relations": [
            "relation_formationtemporal_supervise"
          ],
          "output_relation": "relation_formationtemporal",
          "style": "cmd_extractor"
        },
        "ext_relation_formationtemporal_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formationtemporal_global\"\n\tdeepdive sql 'INSERT INTO relation_formationtemporal_global SELECT DISTINCT R0.type AS \"relation_formationtemporal.R0.type\", R0.eid1 AS \"relation_formationtemporal.R0.eid1\", R0.eid2 AS \"relation_formationtemporal.R0.eid2\"\nFROM relation_formationtemporal R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formationtemporal"
          ],
          "input_relations": [
            "relation_formationtemporal"
          ],
          "output_relation": "relation_formationtemporal_global",
          "style": "cmd_extractor"
        },
        "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_formationtemporal_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_formationtemporal.py"
        },
        "ext_relation_taxonomy": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_taxonomy\"\n\tdeepdive sql 'INSERT INTO relation_taxonomy SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_taxonomy_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy"
          ],
          "input_relations": [
            "relation_taxonomy_supervise"
          ],
          "output_relation": "relation_taxonomy",
          "style": "cmd_extractor"
        },
        "ext_relation_taxonomy_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_taxonomy_global\"\n\tdeepdive sql 'INSERT INTO relation_taxonomy_global SELECT DISTINCT R0.type AS \"relation_taxonomy.R0.type\", R0.eid1 AS \"relation_taxonomy.R0.eid1\", R0.eid2 AS \"relation_taxonomy.R0.eid2\"\nFROM relation_taxonomy R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_taxonomy"
          ],
          "input_relations": [
            "relation_taxonomy"
          ],
          "output_relation": "relation_taxonomy_global",
          "style": "cmd_extractor"
        },
        "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_taxonomy_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_taxonomy.py"
        },
        "ext_sentences": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"sentences\"\n\tdeepdive sql 'INSERT INTO sentences SELECT R0.docid AS \"sentences_original.R0.docid\", R0.sentid AS \"sentences_original.R0.sentid\", R0.wordindex AS \"sentences_original.R0.wordindex\", R0.words AS \"sentences_original.R0.words\", R0.poses AS \"sentences_original.R0.poses\", R0.ners AS \"sentences_original.R0.ners\", R0.lemmas AS \"sentences_original.R0.lemmas\", R0.dep_paths AS \"sentences_original.R0.dep_paths\", R0.dep_parents AS \"sentences_original.R0.dep_parents\", NULL AS column_9, NULL AS column_9\nFROM sentences_original R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "input_relations": [
            "sentences_original"
          ],
          "output_relation": "sentences",
          "style": "cmd_extractor"
        },
        "ext_sentences_serialized": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"sentences_serialized\"\n\tdeepdive sql 'INSERT INTO sentences_serialized SELECT DISTINCT R0.docid AS \"sentences.R0.docid\", R0.sentid AS \"sentences.R0.sentid\", array_to_string(R0.wordindex, '\\''@@@@@'\\'') AS column_2, array_to_string(R0.words, '\\''@@@@@'\\'') AS column_3, array_to_string(R0.poses, '\\''@@@@@'\\'') AS column_4, array_to_string(R0.ners, '\\''@@@@@'\\'') AS column_5, array_to_string(R0.lemmas, '\\''@@@@@'\\'') AS column_6, array_to_string(R0.dep_paths, '\\''@@@@@'\\'') AS column_7, array_to_string(R0.dep_parents, '\\''@@@@@'\\'') AS column_8, array_to_string(R0.font, '\\''@@@@@'\\'') AS column_9, array_to_string(R0.layout, '\\''@@@@@'\\'') AS column_10\nFROM sentences R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_sentences"
          ],
          "input_relations": [
            "sentences"
          ],
          "output_relation": "sentences_serialized",
          "style": "cmd_extractor"
        },
        "ext_taxon_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"taxon_per_doc\"\n\tdeepdive sql 'INSERT INTO taxon_per_doc SELECT R0.docid AS \"entity_taxon_candidate_local.R0.docid\", ARRAY_AGG(R0.entity) AS column_1, ARRAY_AGG(R0.type) AS column_2\nFROM entity_taxon_candidate_local R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
          ],
          "input_relations": [
            "entity_taxon_candidate_local"
          ],
          "output_relation": "taxon_per_doc",
          "style": "cmd_extractor"
        }
      }
    },
    "inference": {
      "factors": {
        "inf_istrue_entity_formation": {
          "dependencies": [
            "ext_entity_formation_candidate"
          ],
          "function": "Imply(entity_formation.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_formation.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_formation R0, entity_formation_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_formation",
            "entity_formation_candidate"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_entity_location": {
          "dependencies": [
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "function": "Imply(entity_location.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_location.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_location R0, entity_location_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_location",
            "entity_location_candidate"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_entity_taxon": {
          "dependencies": [
            "ext_entity_taxon_candidate"
          ],
          "function": "Imply(entity_taxon.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_taxon.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_taxon R0, entity_taxon_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.author_year = R0.author_year  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_taxon",
            "entity_taxon_candidate"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_entity_temporal": {
          "dependencies": [
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "function": "Imply(entity_temporal.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_temporal.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_temporal R0, entity_temporal_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_temporal",
            "entity_temporal_candidate"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_formation": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formation.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formation.R0.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_formation R0, relation_candidates R1\n        WHERE R1.docid = R0.docid  AND R1.type = 'FORMATION' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 ",
          "input_relations": [
            "relation_formation",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_formation_global": {
          "dependencies": [
            "ext_relation_formation",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formation_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formation_global.R0.id\" , R1.id AS \"relation_formation.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_formation_global R0, relation_formation R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_formation_global",
            "relation_formation",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_formationtemporal": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent",
            "ext_entity_formation",
            "ext_entity_temporal"
          ],
          "function": "Imply(relation_formationtemporal.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formationtemporal.R0.id\" , R2.id AS \"entity_formation.R2.id\" , R3.id AS \"entity_temporal.R3.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_formationtemporal R0, relation_candidates R1, entity_formation R2, entity_temporal R3\n        WHERE R1.docid = R0.docid  AND R1.type = 'FORMATIONINTERVAL' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2  AND R2.docid = R0.docid  AND R2.eid = R0.eid1  AND R2.entity = R0.entity1  AND R3.docid = R0.docid  AND R3.eid = R0.eid2  AND R3.entity = R0.entity2 ",
          "input_relations": [
            "relation_formationtemporal",
            "relation_candidates",
            "entity_formation",
            "entity_temporal"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_formationtemporal_global": {
          "dependencies": [
            "ext_relation_formationtemporal",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formationtemporal_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formationtemporal_global.R0.id\" , R1.id AS \"relation_formationtemporal.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_formationtemporal_global R0, relation_formationtemporal R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_formationtemporal_global",
            "relation_formationtemporal",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_taxonomy": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_taxonomy.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_taxonomy.R0.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_taxonomy R0, relation_candidates R1\n        WHERE R1.docid = R0.docid  AND R1.type = 'TAXONOMY' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 ",
          "input_relations": [
            "relation_taxonomy",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_taxonomy_global": {
          "dependencies": [
            "ext_relation_taxonomy",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_taxonomy_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_taxonomy_global.R0.id\" , R1.id AS \"relation_taxonomy.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_taxonomy_global R0, relation_taxonomy R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_taxonomy_global",
            "relation_taxonomy",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        }
      }
    },
    "pipeline": {
      "pipelines": {
        "endtoend": [
          "ext_entity_location",
          "ext_document_with_formation_entities",
          "ext_sentences",
          "ext_all_entity_per_doc",
          "ext_documents_serialized",
          "ext_relation_taxonomy",
          "ext_documents",
          "ext_entity_formation_candidate",
          "ext_taxon_per_doc",
          "ext_document_with_taxon_entities",
          "ext_entity_taxon",
          "ext_entity_location_candidate_by_ext_entity_location_global",
          "ext_relation_taxonomy_global",
          "ext_relation_formationtemporal",
          "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy",
          "ext_relation_formation",
          "ext_entity_temporal_candidate_by_ext_entity_temporal_local",
          "ext_entity_formation_candidate_local_by_ext_entity_formation_local",
          "ext_entity_formation_candidate__0_by_ext_entity_formation_global",
          "ext_entity_formation",
          "ext_document_with_all_entities",
          "ext_relation_formationtemporal_global",
          "ext_relation_formation_supervise_by_ext_relation_variable_formation",
          "ext_sentences_serialized",
          "ext_formation_per_doc",
          "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal",
          "ext_relation_formation_global",
          "ext_entity_taxon_candidate",
          "ext_relation_candidates_by_ext_relation_same_sent",
          "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
          "ext_entity_temporal",
          "ext_all_entity_candidate",
          "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local",
          "inf_istrue_relation_formation",
          "inf_istrue_relation_formationtemporal",
          "inf_istrue_relation_taxonomy",
          "inf_istrue_relation_formation_global",
          "inf_istrue_relation_formationtemporal_global",
          "inf_istrue_relation_taxonomy_global",
          "inf_istrue_entity_formation",
          "inf_istrue_entity_temporal",
          "inf_istrue_entity_location",
          "inf_istrue_entity_taxon"
        ],
        "extraction": [
          "ext_entity_location",
          "ext_document_with_formation_entities",
          "ext_sentences",
          "ext_all_entity_per_doc",
          "ext_documents_serialized",
          "ext_relation_taxonomy",
          "ext_documents",
          "ext_entity_formation_candidate",
          "ext_taxon_per_doc",
          "ext_document_with_taxon_entities",
          "ext_entity_taxon",
          "ext_entity_location_candidate_by_ext_entity_location_global",
          "ext_relation_taxonomy_global",
          "ext_relation_formationtemporal",
          "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy",
          "ext_relation_formation",
          "ext_entity_temporal_candidate_by_ext_entity_temporal_local",
          "ext_entity_formation_candidate_local_by_ext_entity_formation_local",
          "ext_entity_formation_candidate__0_by_ext_entity_formation_global",
          "ext_entity_formation",
          "ext_document_with_all_entities",
          "ext_relation_formationtemporal_global",
          "ext_relation_formation_supervise_by_ext_relation_variable_formation",
          "ext_sentences_serialized",
          "ext_formation_per_doc",
          "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal",
          "ext_relation_formation_global",
          "ext_entity_taxon_candidate",
          "ext_relation_candidates_by_ext_relation_same_sent",
          "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
          "ext_entity_temporal",
          "ext_all_entity_candidate",
          "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
        ],
        "inference": [
          "inf_istrue_relation_formation",
          "inf_istrue_relation_formationtemporal",
          "inf_istrue_relation_taxonomy",
          "inf_istrue_relation_formation_global",
          "inf_istrue_relation_formationtemporal_global",
          "inf_istrue_relation_taxonomy_global",
          "inf_istrue_entity_formation",
          "inf_istrue_entity_temporal",
          "inf_istrue_entity_location",
          "inf_istrue_entity_taxon"
        ]
      },
      "run": ""
    },
    "sampler": {
      "sampler_args": "-l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence",
      "sampler_cmd": "sampler-dw"
    },
    "schema": {
      "relations": {
        "all_entity_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "all_entity_per_doc": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 1,
              "type": "text[]"
            },
            "entity": {
              "index": 2,
              "type": "text[]"
            },
            "prov": {
              "index": 4,
              "type": "text[]"
            },
            "type": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "document_with_all_entities": {
          "columns": {
            "dep_parents": {
              "index": 12,
              "type": "text"
            },
            "dep_paths": {
              "index": 11,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eids": {
              "index": 3,
              "type": "text"
            },
            "entities": {
              "index": 1,
              "type": "text"
            },
            "font": {
              "index": 13,
              "type": "text"
            },
            "layout": {
              "index": 14,
              "type": "text"
            },
            "lemmas": {
              "index": 10,
              "type": "text"
            },
            "ners": {
              "index": 9,
              "type": "text"
            },
            "poses": {
              "index": 8,
              "type": "text"
            },
            "provs": {
              "index": 4,
              "type": "text"
            },
            "sentids": {
              "index": 5,
              "type": "text"
            },
            "types": {
              "index": 2,
              "type": "text"
            },
            "wordidxs": {
              "index": 6,
              "type": "text"
            },
            "words": {
              "index": 7,
              "type": "text"
            }
          }
        },
        "document_with_formation_entities": {
          "columns": {
            "dep_parents": {
              "index": 10,
              "type": "text"
            },
            "dep_paths": {
              "index": 9,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entities": {
              "index": 1,
              "type": "text"
            },
            "font": {
              "index": 11,
              "type": "text"
            },
            "layout": {
              "index": 12,
              "type": "text"
            },
            "lemmas": {
              "index": 8,
              "type": "text"
            },
            "ners": {
              "index": 7,
              "type": "text"
            },
            "poses": {
              "index": 6,
              "type": "text"
            },
            "sentids": {
              "index": 3,
              "type": "text"
            },
            "types": {
              "index": 2,
              "type": "text"
            },
            "wordidxs": {
              "index": 4,
              "type": "text"
            },
            "words": {
              "index": 5,
              "type": "text"
            }
          }
        },
        "document_with_taxon_entities": {
          "columns": {
            "dep_parents": {
              "index": 10,
              "type": "text"
            },
            "dep_paths": {
              "index": 9,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entities": {
              "index": 1,
              "type": "text"
            },
            "font": {
              "index": 11,
              "type": "text"
            },
            "layout": {
              "index": 12,
              "type": "text"
            },
            "lemmas": {
              "index": 8,
              "type": "text"
            },
            "ners": {
              "index": 7,
              "type": "text"
            },
            "poses": {
              "index": 6,
              "type": "text"
            },
            "sentids": {
              "index": 3,
              "type": "text"
            },
            "types": {
              "index": 2,
              "type": "text"
            },
            "wordidxs": {
              "index": 4,
              "type": "text"
            },
            "words": {
              "index": 5,
              "type": "text"
            }
          }
        },
        "documents": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text[]"
            },
            "dep_paths": {
              "index": 7,
              "type": "text[]"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text[]"
            },
            "layout": {
              "index": 10,
              "type": "text[]"
            },
            "lemmas": {
              "index": 6,
              "type": "text[]"
            },
            "ners": {
              "index": 5,
              "type": "text[]"
            },
            "poses": {
              "index": 4,
              "type": "text[]"
            },
            "sentids": {
              "index": 1,
              "type": "text[]"
            },
            "wordidxs": {
              "index": 2,
              "type": "text[]"
            },
            "words": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "documents_serialized": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text"
            },
            "dep_paths": {
              "index": 7,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text"
            },
            "layout": {
              "index": 10,
              "type": "text"
            },
            "lemmas": {
              "index": 6,
              "type": "text"
            },
            "ners": {
              "index": 5,
              "type": "text"
            },
            "poses": {
              "index": 4,
              "type": "text"
            },
            "sentids": {
              "index": 1,
              "type": "text"
            },
            "wordidxs": {
              "index": 2,
              "type": "text"
            },
            "words": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "entity_formation": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_formation_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_formation_candidate__0": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_formation_candidate_local": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_location": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_location_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_taxon": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_taxon_candidate": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_taxon_candidate__0": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_taxon_candidate_local": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_temporal": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_temporal_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "formation_per_doc": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entity": {
              "index": 1,
              "type": "text[]"
            },
            "type": {
              "index": 2,
              "type": "text[]"
            }
          }
        },
        "relation_candidates": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "features": {
              "index": 6,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "relation_formation": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formation_global": {
          "columns": {
            "entity1": {
              "index": 1,
              "type": "text"
            },
            "entity2": {
              "index": 2,
              "type": "text"
            },
            "type": {
              "index": 0,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formation_supervise": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "label": {
              "index": 6,
              "type": "boolean"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "relation_formationtemporal": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formationtemporal_global": {
          "columns": {
            "entity1": {
              "index": 1,
              "type": "text"
            },
            "entity2": {
              "index": 2,
              "type": "text"
            },
            "type": {
              "index": 0,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formationtemporal_supervise": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "label": {
              "index": 6,
              "type": "boolean"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "relation_taxonomy": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_taxonomy_global": {
          "columns": {
            "entity1": {
              "index": 1,
              "type": "text"
            },
            "entity2": {
              "index": 2,
              "type": "text"
            },
            "type": {
              "index": 0,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_taxonomy_supervise": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "label": {
              "index": 6,
              "type": "boolean"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "sentences": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text[]"
            },
            "dep_paths": {
              "index": 7,
              "type": "text[]"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text[]"
            },
            "layout": {
              "index": 10,
              "type": "text[]"
            },
            "lemmas": {
              "index": 6,
              "type": "text[]"
            },
            "ners": {
              "index": 5,
              "type": "text[]"
            },
            "poses": {
              "index": 4,
              "type": "text[]"
            },
            "sentid": {
              "index": 1,
              "type": "text"
            },
            "wordindex": {
              "index": 2,
              "type": "text[]"
            },
            "words": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "sentences_original": {
          "columns": {
            "bounding_boxes": {
              "index": 9,
              "type": "text[]"
            },
            "dep_parents": {
              "index": 8,
              "type": "text[]"
            },
            "dep_paths": {
              "index": 7,
              "type": "text[]"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "lemmas": {
              "index": 6,
              "type": "text[]"
            },
            "ners": {
              "index": 5,
              "type": "text[]"
            },
            "poses": {
              "index": 4,
              "type": "text[]"
            },
            "sentid": {
              "index": 1,
              "type": "text"
            },
            "wordindex": {
              "index": 2,
              "type": "text[]"
            },
            "words": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "sentences_serialized": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text"
            },
            "dep_paths": {
              "index": 7,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text"
            },
            "layout": {
              "index": 10,
              "type": "text"
            },
            "lemmas": {
              "index": 6,
              "type": "text"
            },
            "ners": {
              "index": 5,
              "type": "text"
            },
            "poses": {
              "index": 4,
              "type": "text"
            },
            "sentid": {
              "index": 1,
              "type": "text"
            },
            "wordidxs": {
              "index": 2,
              "type": "text"
            },
            "words": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "taxon_per_doc": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entity": {
              "index": 1,
              "type": "text[]"
            },
            "type": {
              "index": 2,
              "type": "text[]"
            }
          }
        }
      },
      "variables": {
        "entity_formation": {
          "label": "Boolean"
        },
        "entity_location": {
          "label": "Boolean"
        },
        "entity_taxon": {
          "label": "Boolean"
        },
        "entity_temporal": {
          "label": "Boolean"
        },
        "relation_formation": {
          "label": "Boolean"
        },
        "relation_formation_global": {
          "label": "Boolean"
        },
        "relation_formationtemporal": {
          "label": "Boolean"
        },
        "relation_formationtemporal_global": {
          "label": "Boolean"
        },
        "relation_taxonomy": {
          "label": "Boolean"
        },
        "relation_taxonomy_global": {
          "label": "Boolean"
        }
      }
    },
    "execution": {
      "processes": {}
    },
    "calibration": null
  }
}
