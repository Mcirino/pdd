{
  "deepdive": {
    "db": {
      "default": {
        "dbname": "pdd_test_big_",
        "driver": "org.postgresql.Driver",
        "host": "localhost",
        "incremental_mode": "ORIGINAL",
        "password": "",
        "port": "6432",
        "url": "jdbc:postgresql://localhost:6432/pdd_test_big_",
        "user": "marycirino"
      }
    },
    "extraction": {
      "extractors": {
        "ext_all_entity_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"all_entity_candidate\"\n\tdeepdive sql 'INSERT INTO all_entity_candidate SELECT R0.docid AS \"entity_formation_candidate.R0.docid\", '\\''FORMATION'\\'' AS column_1, R0.eid AS \"entity_formation_candidate.R0.eid\", R0.entity AS \"entity_formation_candidate.R0.entity\", R0.prov AS \"entity_formation_candidate.R0.prov\"\nFROM entity_formation_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_temporal_candidate.R0.docid\", '\\''INTERVAL'\\'' AS column_1, R0.eid AS \"entity_temporal_candidate.R0.eid\", R0.entity AS \"entity_temporal_candidate.R0.entity\", R0.prov AS \"entity_temporal_candidate.R0.prov\"\nFROM entity_temporal_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_taxon_candidate.R0.docid\", '\\''TAXON-'\\'' || R0.type AS column_1, R0.eid AS \"entity_taxon_candidate.R0.eid\", R0.entity AS \"entity_taxon_candidate.R0.entity\", R0.prov AS \"entity_taxon_candidate.R0.prov\"\nFROM entity_taxon_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_location_candidate.R0.docid\", '\\''LOCATION'\\'' AS column_1, R0.eid AS \"entity_location_candidate.R0.eid\", R0.entity AS \"entity_location_candidate.R0.entity\", R0.prov AS \"entity_location_candidate.R0.prov\"\nFROM entity_location_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate",
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local",
            "ext_entity_taxon_candidate",
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_relations": [
            "entity_formation_candidate",
            "entity_temporal_candidate",
            "entity_taxon_candidate",
            "entity_location_candidate"
          ],
          "output_relation": "all_entity_candidate",
          "style": "cmd_extractor"
        },
        "ext_all_entity_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"all_entity_per_doc\"\n\tdeepdive sql 'INSERT INTO all_entity_per_doc SELECT R0.docid AS \"all_entity_candidate.R0.docid\", ARRAY_AGG(R0.eid) AS column_1, ARRAY_AGG(R0.entity) AS column_2, ARRAY_AGG(R0.type) AS column_3, ARRAY_AGG(R0.prov) AS column_4\nFROM all_entity_candidate R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_all_entity_candidate"
          ],
          "input_relations": [
            "all_entity_candidate"
          ],
          "output_relation": "all_entity_per_doc",
          "style": "cmd_extractor"
        },
        "ext_document_with_all_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_all_entities\"\n\tdeepdive sql 'INSERT INTO document_with_all_entities SELECT R0.docid AS \"all_entity_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, array_to_string(R0.eid, '\\''@@@@@'\\'') AS column_3, array_to_string(R0.prov, '\\''@@@@@'\\'') AS column_4, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM all_entity_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_all_entity_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "all_entity_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_all_entities",
          "style": "cmd_extractor"
        },
        "ext_document_with_formation_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_formation_entities\"\n\tdeepdive sql 'INSERT INTO document_with_formation_entities SELECT R0.docid AS \"formation_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM formation_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_formation_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "formation_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_formation_entities",
          "style": "cmd_extractor"
        },
        "ext_document_with_taxon_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_taxon_entities\"\n\tdeepdive sql 'INSERT INTO document_with_taxon_entities SELECT R0.docid AS \"taxon_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM taxon_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_taxon_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "taxon_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_taxon_entities",
          "style": "cmd_extractor"
        },
        "ext_documents": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"documents\"\n\tdeepdive sql 'INSERT INTO documents SELECT DISTINCT R0.docid AS \"sentences_serialized.R0.docid\", ARRAY_AGG(R0.sentid) AS column_1, ARRAY_AGG(R0.wordidxs) AS column_2, ARRAY_AGG(R0.words) AS column_3, ARRAY_AGG(R0.poses) AS column_4, ARRAY_AGG(R0.ners) AS column_5, ARRAY_AGG(R0.lemmas) AS column_6, ARRAY_AGG(R0.dep_paths) AS column_7, ARRAY_AGG(R0.dep_parents) AS column_8, ARRAY_AGG(R0.font) AS column_9, ARRAY_AGG(R0.layout) AS column_10\nFROM sentences_serialized R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "documents",
          "style": "cmd_extractor"
        },
        "ext_documents_serialized": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"documents_serialized\"\n\tdeepdive sql 'INSERT INTO documents_serialized SELECT R0.docid AS \"documents.R0.docid\", array_to_string(R0.sentids, '\\''|||||'\\'') AS column_1, array_to_string(R0.wordidxs, '\\''|||||'\\'') AS column_2, array_to_string(R0.words, '\\''|||||'\\'') AS column_3, array_to_string(R0.poses, '\\''|||||'\\'') AS column_4, array_to_string(R0.ners, '\\''|||||'\\'') AS column_5, array_to_string(R0.lemmas, '\\''|||||'\\'') AS column_6, array_to_string(R0.dep_paths, '\\''|||||'\\'') AS column_7, array_to_string(R0.dep_parents, '\\''|||||'\\'') AS column_8, array_to_string(R0.font, '\\''|||||'\\'') AS column_9, array_to_string(R0.layout, '\\''|||||'\\'') AS column_10\nFROM documents R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_documents"
          ],
          "input_relations": [
            "documents"
          ],
          "output_relation": "documents_serialized",
          "style": "cmd_extractor"
        },
        "ext_entity_formation": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_formation\"\n\tdeepdive sql 'INSERT INTO entity_formation SELECT R0.docid AS \"entity_formation_candidate.R0.docid\", R0.type AS \"entity_formation_candidate.R0.type\", R0.eid AS \"entity_formation_candidate.R0.eid\", R0.entity AS \"entity_formation_candidate.R0.entity\", R0.prov AS \"entity_formation_candidate.R0.prov\"\nFROM entity_formation_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate"
          ],
          "input_relations": [
            "entity_formation_candidate"
          ],
          "output_relation": "entity_formation",
          "style": "cmd_extractor"
        },
        "ext_entity_formation_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_formation_candidate\"\n\tdeepdive sql 'INSERT INTO entity_formation_candidate SELECT R0.docid AS \"entity_formation_candidate__0.R0.docid\", R0.type AS \"entity_formation_candidate__0.R0.type\", R0.eid AS \"entity_formation_candidate__0.R0.eid\", R0.entity AS \"entity_formation_candidate__0.R0.entity\", R0.prov AS \"entity_formation_candidate__0.R0.prov\"\nFROM entity_formation_candidate__0 R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_formation_candidate_local.R0.docid\", R0.type AS \"entity_formation_candidate_local.R0.type\", R0.eid AS \"entity_formation_candidate_local.R0.eid\", R0.entity AS \"entity_formation_candidate_local.R0.entity\", R0.prov AS \"entity_formation_candidate_local.R0.prov\"\nFROM entity_formation_candidate_local R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate__0_by_ext_entity_formation_global",
            "ext_entity_formation_candidate_local_by_ext_entity_formation_local"
          ],
          "input_relations": [
            "entity_formation_candidate__0",
            "entity_formation_candidate_local"
          ],
          "output_relation": "entity_formation_candidate",
          "style": "cmd_extractor"
        },
        "ext_entity_formation_candidate__0_by_ext_entity_formation_global": {
          "dependencies": [
            "ext_document_with_formation_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_formation_entities.R0.docid\", R0.entities AS \"document_with_formation_entities.R0.entities\", R0.types AS \"document_with_formation_entities.R0.types\", R0.sentids AS \"document_with_formation_entities.R0.sentids\", R0.wordidxs AS \"document_with_formation_entities.R0.wordidxs\", R0.words AS \"document_with_formation_entities.R0.words\", R0.poses AS \"document_with_formation_entities.R0.poses\", R0.ners AS \"document_with_formation_entities.R0.ners\", R0.lemmas AS \"document_with_formation_entities.R0.lemmas\", R0.dep_paths AS \"document_with_formation_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_formation_entities.R0.dep_parents\", R0.font AS \"document_with_formation_entities.R0.font\", R0.layout AS \"document_with_formation_entities.R0.layout\"\nFROM document_with_formation_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_formation_entities"
          ],
          "output_relation": "entity_formation_candidate__0",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_formation_global.py"
        },
        "ext_entity_formation_candidate_local_by_ext_entity_formation_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_formation_candidate_local",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_formation_local.py"
        },
        "ext_entity_location": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_location\"\n\tdeepdive sql 'INSERT INTO entity_location SELECT R0.docid AS \"entity_location_candidate.R0.docid\", R0.type AS \"entity_location_candidate.R0.type\", R0.eid AS \"entity_location_candidate.R0.eid\", R0.entity AS \"entity_location_candidate.R0.entity\", R0.prov AS \"entity_location_candidate.R0.prov\"\nFROM entity_location_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_relations": [
            "entity_location_candidate"
          ],
          "output_relation": "entity_location",
          "style": "cmd_extractor"
        },
        "ext_entity_location_candidate_by_ext_entity_location_global": {
          "dependencies": [
            "ext_documents_serialized"
          ],
          "input": " SELECT R0.docid AS \"documents_serialized.R0.docid\", R0.sentids AS \"documents_serialized.R0.sentids\", R0.wordidxs AS \"documents_serialized.R0.wordidxs\", R0.words AS \"documents_serialized.R0.words\", R0.poses AS \"documents_serialized.R0.poses\", R0.ners AS \"documents_serialized.R0.ners\", R0.lemmas AS \"documents_serialized.R0.lemmas\", R0.dep_paths AS \"documents_serialized.R0.dep_paths\", R0.dep_parents AS \"documents_serialized.R0.dep_parents\", R0.font AS \"documents_serialized.R0.font\", R0.layout AS \"documents_serialized.R0.layout\"\nFROM documents_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "documents_serialized"
          ],
          "output_relation": "entity_location_candidate",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_location_global.py"
        },
        "ext_entity_taxon": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_taxon\"\n\tdeepdive sql 'INSERT INTO entity_taxon SELECT R0.docid AS \"entity_taxon_candidate.R0.docid\", R0.type AS \"entity_taxon_candidate.R0.type\", R0.eid AS \"entity_taxon_candidate.R0.eid\", R0.entity AS \"entity_taxon_candidate.R0.entity\", R0.author_year AS \"entity_taxon_candidate.R0.author_year\", R0.prov AS \"entity_taxon_candidate.R0.prov\"\nFROM entity_taxon_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate"
          ],
          "input_relations": [
            "entity_taxon_candidate"
          ],
          "output_relation": "entity_taxon",
          "style": "cmd_extractor"
        },
        "ext_entity_taxon_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_taxon_candidate\"\n\tdeepdive sql 'INSERT INTO entity_taxon_candidate SELECT R0.docid AS \"entity_taxon_candidate__0.R0.docid\", R0.type AS \"entity_taxon_candidate__0.R0.type\", R0.eid AS \"entity_taxon_candidate__0.R0.eid\", R0.entity AS \"entity_taxon_candidate__0.R0.entity\", R0.author_year AS \"entity_taxon_candidate__0.R0.author_year\", R0.prov AS \"entity_taxon_candidate__0.R0.prov\"\nFROM entity_taxon_candidate__0 R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_taxon_candidate_local.R0.docid\", R0.type AS \"entity_taxon_candidate_local.R0.type\", R0.eid AS \"entity_taxon_candidate_local.R0.eid\", R0.entity AS \"entity_taxon_candidate_local.R0.entity\", R0.author_year AS \"entity_taxon_candidate_local.R0.author_year\", R0.prov AS \"entity_taxon_candidate_local.R0.prov\"\nFROM entity_taxon_candidate_local R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
            "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
          ],
          "input_relations": [
            "entity_taxon_candidate__0",
            "entity_taxon_candidate_local"
          ],
          "output_relation": "entity_taxon_candidate",
          "style": "cmd_extractor"
        },
        "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global": {
          "dependencies": [
            "ext_document_with_taxon_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_taxon_entities.R0.docid\", R0.entities AS \"document_with_taxon_entities.R0.entities\", R0.types AS \"document_with_taxon_entities.R0.types\", R0.sentids AS \"document_with_taxon_entities.R0.sentids\", R0.wordidxs AS \"document_with_taxon_entities.R0.wordidxs\", R0.words AS \"document_with_taxon_entities.R0.words\", R0.poses AS \"document_with_taxon_entities.R0.poses\", R0.ners AS \"document_with_taxon_entities.R0.ners\", R0.lemmas AS \"document_with_taxon_entities.R0.lemmas\", R0.dep_paths AS \"document_with_taxon_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_taxon_entities.R0.dep_parents\", R0.font AS \"document_with_taxon_entities.R0.font\", R0.layout AS \"document_with_taxon_entities.R0.layout\"\nFROM document_with_taxon_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_taxon_entities"
          ],
          "output_relation": "entity_taxon_candidate__0",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_taxon_global.py"
        },
        "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_taxon_candidate_local",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_taxon_local.py"
        },
        "ext_entity_temporal": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_temporal\"\n\tdeepdive sql 'INSERT INTO entity_temporal SELECT R0.docid AS \"entity_temporal_candidate.R0.docid\", R0.type AS \"entity_temporal_candidate.R0.type\", R0.eid AS \"entity_temporal_candidate.R0.eid\", R0.entity AS \"entity_temporal_candidate.R0.entity\", R0.prov AS \"entity_temporal_candidate.R0.prov\"\nFROM entity_temporal_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "input_relations": [
            "entity_temporal_candidate"
          ],
          "output_relation": "entity_temporal",
          "style": "cmd_extractor"
        },
        "ext_entity_temporal_candidate_by_ext_entity_temporal_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_temporal_candidate",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_temporal_local.py"
        },
        "ext_formation_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"formation_per_doc\"\n\tdeepdive sql 'INSERT INTO formation_per_doc SELECT R0.docid AS \"entity_formation_candidate_local.R0.docid\", ARRAY_AGG(R0.entity) AS column_1, ARRAY_AGG(R0.type) AS column_2\nFROM entity_formation_candidate_local R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate_local_by_ext_entity_formation_local"
          ],
          "input_relations": [
            "entity_formation_candidate_local"
          ],
          "output_relation": "formation_per_doc",
          "style": "cmd_extractor"
        },
        "ext_relation_candidates_by_ext_relation_same_sent": {
          "dependencies": [
            "ext_document_with_all_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_all_entities.R0.docid\", R0.entities AS \"document_with_all_entities.R0.entities\", R0.types AS \"document_with_all_entities.R0.types\", R0.eids AS \"document_with_all_entities.R0.eids\", R0.provs AS \"document_with_all_entities.R0.provs\", R0.sentids AS \"document_with_all_entities.R0.sentids\", R0.wordidxs AS \"document_with_all_entities.R0.wordidxs\", R0.words AS \"document_with_all_entities.R0.words\", R0.poses AS \"document_with_all_entities.R0.poses\", R0.ners AS \"document_with_all_entities.R0.ners\", R0.lemmas AS \"document_with_all_entities.R0.lemmas\", R0.dep_paths AS \"document_with_all_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_all_entities.R0.dep_parents\", R0.font AS \"document_with_all_entities.R0.font\", R0.layout AS \"document_with_all_entities.R0.layout\"\nFROM document_with_all_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_all_entities"
          ],
          "output_relation": "relation_candidates",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_relation_samesent.py"
        },
        "ext_relation_formation": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formation\"\n\tdeepdive sql 'INSERT INTO relation_formation SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_formation_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formation_supervise_by_ext_relation_variable_formation"
          ],
          "input_relations": [
            "relation_formation_supervise"
          ],
          "output_relation": "relation_formation",
          "style": "cmd_extractor"
        },
        "ext_relation_formation_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formation_global\"\n\tdeepdive sql 'INSERT INTO relation_formation_global SELECT DISTINCT R0.type AS \"relation_formation.R0.type\", R0.eid1 AS \"relation_formation.R0.eid1\", R0.eid2 AS \"relation_formation.R0.eid2\"\nFROM relation_formation R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formation"
          ],
          "input_relations": [
            "relation_formation"
          ],
          "output_relation": "relation_formation_global",
          "style": "cmd_extractor"
        },
        "ext_relation_formation_supervise_by_ext_relation_variable_formation": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_formation_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_formation.py"
        },
        "ext_relation_formationtemporal": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formationtemporal\"\n\tdeepdive sql 'INSERT INTO relation_formationtemporal SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_formationtemporal_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal"
          ],
          "input_relations": [
            "relation_formationtemporal_supervise"
          ],
          "output_relation": "relation_formationtemporal",
          "style": "cmd_extractor"
        },
        "ext_relation_formationtemporal_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formationtemporal_global\"\n\tdeepdive sql 'INSERT INTO relation_formationtemporal_global SELECT DISTINCT R0.type AS \"relation_formationtemporal.R0.type\", R0.eid1 AS \"relation_formationtemporal.R0.eid1\", R0.eid2 AS \"relation_formationtemporal.R0.eid2\"\nFROM relation_formationtemporal R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formationtemporal"
          ],
          "input_relations": [
            "relation_formationtemporal"
          ],
          "output_relation": "relation_formationtemporal_global",
          "style": "cmd_extractor"
        },
        "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_formationtemporal_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_formationtemporal.py"
        },
        "ext_relation_taxonomy": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_taxonomy\"\n\tdeepdive sql 'INSERT INTO relation_taxonomy SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_taxonomy_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy"
          ],
          "input_relations": [
            "relation_taxonomy_supervise"
          ],
          "output_relation": "relation_taxonomy",
          "style": "cmd_extractor"
        },
        "ext_relation_taxonomy_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_taxonomy_global\"\n\tdeepdive sql 'INSERT INTO relation_taxonomy_global SELECT DISTINCT R0.type AS \"relation_taxonomy.R0.type\", R0.eid1 AS \"relation_taxonomy.R0.eid1\", R0.eid2 AS \"relation_taxonomy.R0.eid2\"\nFROM relation_taxonomy R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_taxonomy"
          ],
          "input_relations": [
            "relation_taxonomy"
          ],
          "output_relation": "relation_taxonomy_global",
          "style": "cmd_extractor"
        },
        "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_taxonomy_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_taxonomy.py"
        },
        "ext_sentences": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"sentences\"\n\tdeepdive sql 'INSERT INTO sentences SELECT R0.docid AS \"sentences_original.R0.docid\", R0.sentid AS \"sentences_original.R0.sentid\", R0.wordindex AS \"sentences_original.R0.wordindex\", R0.words AS \"sentences_original.R0.words\", R0.poses AS \"sentences_original.R0.poses\", R0.ners AS \"sentences_original.R0.ners\", R0.lemmas AS \"sentences_original.R0.lemmas\", R0.dep_paths AS \"sentences_original.R0.dep_paths\", R0.dep_parents AS \"sentences_original.R0.dep_parents\", NULL AS column_9, NULL AS column_9\nFROM sentences_original R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "input_relations": [
            "sentences_original"
          ],
          "output_relation": "sentences",
          "style": "cmd_extractor"
        },
        "ext_sentences_serialized": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"sentences_serialized\"\n\tdeepdive sql 'INSERT INTO sentences_serialized SELECT DISTINCT R0.docid AS \"sentences.R0.docid\", R0.sentid AS \"sentences.R0.sentid\", array_to_string(R0.wordindex, '\\''@@@@@'\\'') AS column_2, array_to_string(R0.words, '\\''@@@@@'\\'') AS column_3, array_to_string(R0.poses, '\\''@@@@@'\\'') AS column_4, array_to_string(R0.ners, '\\''@@@@@'\\'') AS column_5, array_to_string(R0.lemmas, '\\''@@@@@'\\'') AS column_6, array_to_string(R0.dep_paths, '\\''@@@@@'\\'') AS column_7, array_to_string(R0.dep_parents, '\\''@@@@@'\\'') AS column_8, array_to_string(R0.font, '\\''@@@@@'\\'') AS column_9, array_to_string(R0.layout, '\\''@@@@@'\\'') AS column_10\nFROM sentences R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_sentences"
          ],
          "input_relations": [
            "sentences"
          ],
          "output_relation": "sentences_serialized",
          "style": "cmd_extractor"
        },
        "ext_taxon_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"taxon_per_doc\"\n\tdeepdive sql 'INSERT INTO taxon_per_doc SELECT R0.docid AS \"entity_taxon_candidate_local.R0.docid\", ARRAY_AGG(R0.entity) AS column_1, ARRAY_AGG(R0.type) AS column_2\nFROM entity_taxon_candidate_local R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
          ],
          "input_relations": [
            "entity_taxon_candidate_local"
          ],
          "output_relation": "taxon_per_doc",
          "style": "cmd_extractor"
        }
      }
    },
    "inference": {
      "factors": {
        "inf_istrue_entity_formation": {
          "dependencies": [
            "ext_entity_formation_candidate"
          ],
          "function": "Imply(entity_formation.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_formation.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_formation R0, entity_formation_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_formation",
            "entity_formation_candidate"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_entity_location": {
          "dependencies": [
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "function": "Imply(entity_location.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_location.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_location R0, entity_location_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_location",
            "entity_location_candidate"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_entity_taxon": {
          "dependencies": [
            "ext_entity_taxon_candidate"
          ],
          "function": "Imply(entity_taxon.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_taxon.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_taxon R0, entity_taxon_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.author_year = R0.author_year  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_taxon",
            "entity_taxon_candidate"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_entity_temporal": {
          "dependencies": [
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "function": "Imply(entity_temporal.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_temporal.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_temporal R0, entity_temporal_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_temporal",
            "entity_temporal_candidate"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_formation": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formation.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formation.R0.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_formation R0, relation_candidates R1\n        WHERE R1.docid = R0.docid  AND R1.type = 'FORMATION' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 ",
          "input_relations": [
            "relation_formation",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_formation_global": {
          "dependencies": [
            "ext_relation_formation",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formation_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formation_global.R0.id\" , R1.id AS \"relation_formation.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_formation_global R0, relation_formation R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_formation_global",
            "relation_formation",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_formationtemporal": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent",
            "ext_entity_formation",
            "ext_entity_temporal"
          ],
          "function": "Imply(relation_formationtemporal.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formationtemporal.R0.id\" , R2.id AS \"entity_formation.R2.id\" , R3.id AS \"entity_temporal.R3.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_formationtemporal R0, relation_candidates R1, entity_formation R2, entity_temporal R3\n        WHERE R1.docid = R0.docid  AND R1.type = 'FORMATIONINTERVAL' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2  AND R2.docid = R0.docid  AND R2.eid = R0.eid1  AND R2.entity = R0.entity1  AND R3.docid = R0.docid  AND R3.eid = R0.eid2  AND R3.entity = R0.entity2 ",
          "input_relations": [
            "relation_formationtemporal",
            "relation_candidates",
            "entity_formation",
            "entity_temporal"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_formationtemporal_global": {
          "dependencies": [
            "ext_relation_formationtemporal",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formationtemporal_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formationtemporal_global.R0.id\" , R1.id AS \"relation_formationtemporal.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_formationtemporal_global R0, relation_formationtemporal R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_formationtemporal_global",
            "relation_formationtemporal",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_taxonomy": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_taxonomy.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_taxonomy.R0.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_taxonomy R0, relation_candidates R1\n        WHERE R1.docid = R0.docid  AND R1.type = 'TAXONOMY' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 ",
          "input_relations": [
            "relation_taxonomy",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        },
        "inf_istrue_relation_taxonomy_global": {
          "dependencies": [
            "ext_relation_taxonomy",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_taxonomy_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_taxonomy_global.R0.id\" , R1.id AS \"relation_taxonomy.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_taxonomy_global R0, relation_taxonomy R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_taxonomy_global",
            "relation_taxonomy",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)"
        }
      }
    },
    "pipeline": {
      "pipelines": {
        "endtoend": [
          "ext_entity_location",
          "ext_document_with_formation_entities",
          "ext_sentences",
          "ext_all_entity_per_doc",
          "ext_documents_serialized",
          "ext_relation_taxonomy",
          "ext_documents",
          "ext_entity_formation_candidate",
          "ext_taxon_per_doc",
          "ext_document_with_taxon_entities",
          "ext_entity_taxon",
          "ext_entity_location_candidate_by_ext_entity_location_global",
          "ext_relation_taxonomy_global",
          "ext_relation_formationtemporal",
          "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy",
          "ext_relation_formation",
          "ext_entity_temporal_candidate_by_ext_entity_temporal_local",
          "ext_entity_formation_candidate_local_by_ext_entity_formation_local",
          "ext_entity_formation_candidate__0_by_ext_entity_formation_global",
          "ext_entity_formation",
          "ext_document_with_all_entities",
          "ext_relation_formationtemporal_global",
          "ext_relation_formation_supervise_by_ext_relation_variable_formation",
          "ext_sentences_serialized",
          "ext_formation_per_doc",
          "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal",
          "ext_relation_formation_global",
          "ext_entity_taxon_candidate",
          "ext_relation_candidates_by_ext_relation_same_sent",
          "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
          "ext_entity_temporal",
          "ext_all_entity_candidate",
          "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local",
          "inf_istrue_relation_formation",
          "inf_istrue_relation_formationtemporal",
          "inf_istrue_relation_taxonomy",
          "inf_istrue_relation_formation_global",
          "inf_istrue_relation_formationtemporal_global",
          "inf_istrue_relation_taxonomy_global",
          "inf_istrue_entity_formation",
          "inf_istrue_entity_temporal",
          "inf_istrue_entity_location",
          "inf_istrue_entity_taxon"
        ],
        "extraction": [
          "ext_entity_location",
          "ext_document_with_formation_entities",
          "ext_sentences",
          "ext_all_entity_per_doc",
          "ext_documents_serialized",
          "ext_relation_taxonomy",
          "ext_documents",
          "ext_entity_formation_candidate",
          "ext_taxon_per_doc",
          "ext_document_with_taxon_entities",
          "ext_entity_taxon",
          "ext_entity_location_candidate_by_ext_entity_location_global",
          "ext_relation_taxonomy_global",
          "ext_relation_formationtemporal",
          "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy",
          "ext_relation_formation",
          "ext_entity_temporal_candidate_by_ext_entity_temporal_local",
          "ext_entity_formation_candidate_local_by_ext_entity_formation_local",
          "ext_entity_formation_candidate__0_by_ext_entity_formation_global",
          "ext_entity_formation",
          "ext_document_with_all_entities",
          "ext_relation_formationtemporal_global",
          "ext_relation_formation_supervise_by_ext_relation_variable_formation",
          "ext_sentences_serialized",
          "ext_formation_per_doc",
          "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal",
          "ext_relation_formation_global",
          "ext_entity_taxon_candidate",
          "ext_relation_candidates_by_ext_relation_same_sent",
          "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
          "ext_entity_temporal",
          "ext_all_entity_candidate",
          "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
        ],
        "inference": [
          "inf_istrue_relation_formation",
          "inf_istrue_relation_formationtemporal",
          "inf_istrue_relation_taxonomy",
          "inf_istrue_relation_formation_global",
          "inf_istrue_relation_formationtemporal_global",
          "inf_istrue_relation_taxonomy_global",
          "inf_istrue_entity_formation",
          "inf_istrue_entity_temporal",
          "inf_istrue_entity_location",
          "inf_istrue_entity_taxon"
        ]
      },
      "run": ""
    },
    "sampler": {
      "sampler_args": "-l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence",
      "sampler_cmd": "sampler-dw"
    },
    "schema": {
      "relations": {
        "all_entity_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "all_entity_per_doc": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 1,
              "type": "text[]"
            },
            "entity": {
              "index": 2,
              "type": "text[]"
            },
            "prov": {
              "index": 4,
              "type": "text[]"
            },
            "type": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "document_with_all_entities": {
          "columns": {
            "dep_parents": {
              "index": 12,
              "type": "text"
            },
            "dep_paths": {
              "index": 11,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eids": {
              "index": 3,
              "type": "text"
            },
            "entities": {
              "index": 1,
              "type": "text"
            },
            "font": {
              "index": 13,
              "type": "text"
            },
            "layout": {
              "index": 14,
              "type": "text"
            },
            "lemmas": {
              "index": 10,
              "type": "text"
            },
            "ners": {
              "index": 9,
              "type": "text"
            },
            "poses": {
              "index": 8,
              "type": "text"
            },
            "provs": {
              "index": 4,
              "type": "text"
            },
            "sentids": {
              "index": 5,
              "type": "text"
            },
            "types": {
              "index": 2,
              "type": "text"
            },
            "wordidxs": {
              "index": 6,
              "type": "text"
            },
            "words": {
              "index": 7,
              "type": "text"
            }
          }
        },
        "document_with_formation_entities": {
          "columns": {
            "dep_parents": {
              "index": 10,
              "type": "text"
            },
            "dep_paths": {
              "index": 9,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entities": {
              "index": 1,
              "type": "text"
            },
            "font": {
              "index": 11,
              "type": "text"
            },
            "layout": {
              "index": 12,
              "type": "text"
            },
            "lemmas": {
              "index": 8,
              "type": "text"
            },
            "ners": {
              "index": 7,
              "type": "text"
            },
            "poses": {
              "index": 6,
              "type": "text"
            },
            "sentids": {
              "index": 3,
              "type": "text"
            },
            "types": {
              "index": 2,
              "type": "text"
            },
            "wordidxs": {
              "index": 4,
              "type": "text"
            },
            "words": {
              "index": 5,
              "type": "text"
            }
          }
        },
        "document_with_taxon_entities": {
          "columns": {
            "dep_parents": {
              "index": 10,
              "type": "text"
            },
            "dep_paths": {
              "index": 9,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entities": {
              "index": 1,
              "type": "text"
            },
            "font": {
              "index": 11,
              "type": "text"
            },
            "layout": {
              "index": 12,
              "type": "text"
            },
            "lemmas": {
              "index": 8,
              "type": "text"
            },
            "ners": {
              "index": 7,
              "type": "text"
            },
            "poses": {
              "index": 6,
              "type": "text"
            },
            "sentids": {
              "index": 3,
              "type": "text"
            },
            "types": {
              "index": 2,
              "type": "text"
            },
            "wordidxs": {
              "index": 4,
              "type": "text"
            },
            "words": {
              "index": 5,
              "type": "text"
            }
          }
        },
        "documents": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text[]"
            },
            "dep_paths": {
              "index": 7,
              "type": "text[]"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text[]"
            },
            "layout": {
              "index": 10,
              "type": "text[]"
            },
            "lemmas": {
              "index": 6,
              "type": "text[]"
            },
            "ners": {
              "index": 5,
              "type": "text[]"
            },
            "poses": {
              "index": 4,
              "type": "text[]"
            },
            "sentids": {
              "index": 1,
              "type": "text[]"
            },
            "wordidxs": {
              "index": 2,
              "type": "text[]"
            },
            "words": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "documents_serialized": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text"
            },
            "dep_paths": {
              "index": 7,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text"
            },
            "layout": {
              "index": 10,
              "type": "text"
            },
            "lemmas": {
              "index": 6,
              "type": "text"
            },
            "ners": {
              "index": 5,
              "type": "text"
            },
            "poses": {
              "index": 4,
              "type": "text"
            },
            "sentids": {
              "index": 1,
              "type": "text"
            },
            "wordidxs": {
              "index": 2,
              "type": "text"
            },
            "words": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "entity_formation": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_formation_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_formation_candidate__0": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_formation_candidate_local": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_location": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_location_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_taxon": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_taxon_candidate": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_taxon_candidate__0": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_taxon_candidate_local": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_temporal": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_temporal_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "formation_per_doc": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entity": {
              "index": 1,
              "type": "text[]"
            },
            "type": {
              "index": 2,
              "type": "text[]"
            }
          }
        },
        "relation_candidates": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "features": {
              "index": 6,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "relation_formation": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formation_global": {
          "columns": {
            "entity1": {
              "index": 1,
              "type": "text"
            },
            "entity2": {
              "index": 2,
              "type": "text"
            },
            "type": {
              "index": 0,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formation_supervise": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "label": {
              "index": 6,
              "type": "boolean"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "relation_formationtemporal": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formationtemporal_global": {
          "columns": {
            "entity1": {
              "index": 1,
              "type": "text"
            },
            "entity2": {
              "index": 2,
              "type": "text"
            },
            "type": {
              "index": 0,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formationtemporal_supervise": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "label": {
              "index": 6,
              "type": "boolean"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "relation_taxonomy": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_taxonomy_global": {
          "columns": {
            "entity1": {
              "index": 1,
              "type": "text"
            },
            "entity2": {
              "index": 2,
              "type": "text"
            },
            "type": {
              "index": 0,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_taxonomy_supervise": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "label": {
              "index": 6,
              "type": "boolean"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "sentences": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text[]"
            },
            "dep_paths": {
              "index": 7,
              "type": "text[]"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text[]"
            },
            "layout": {
              "index": 10,
              "type": "text[]"
            },
            "lemmas": {
              "index": 6,
              "type": "text[]"
            },
            "ners": {
              "index": 5,
              "type": "text[]"
            },
            "poses": {
              "index": 4,
              "type": "text[]"
            },
            "sentid": {
              "index": 1,
              "type": "text"
            },
            "wordindex": {
              "index": 2,
              "type": "text[]"
            },
            "words": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "sentences_original": {
          "columns": {
            "bounding_boxes": {
              "index": 9,
              "type": "text[]"
            },
            "dep_parents": {
              "index": 8,
              "type": "text[]"
            },
            "dep_paths": {
              "index": 7,
              "type": "text[]"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "lemmas": {
              "index": 6,
              "type": "text[]"
            },
            "ners": {
              "index": 5,
              "type": "text[]"
            },
            "poses": {
              "index": 4,
              "type": "text[]"
            },
            "sentid": {
              "index": 1,
              "type": "text"
            },
            "wordindex": {
              "index": 2,
              "type": "text[]"
            },
            "words": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "sentences_serialized": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text"
            },
            "dep_paths": {
              "index": 7,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text"
            },
            "layout": {
              "index": 10,
              "type": "text"
            },
            "lemmas": {
              "index": 6,
              "type": "text"
            },
            "ners": {
              "index": 5,
              "type": "text"
            },
            "poses": {
              "index": 4,
              "type": "text"
            },
            "sentid": {
              "index": 1,
              "type": "text"
            },
            "wordidxs": {
              "index": 2,
              "type": "text"
            },
            "words": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "taxon_per_doc": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entity": {
              "index": 1,
              "type": "text[]"
            },
            "type": {
              "index": 2,
              "type": "text[]"
            }
          }
        }
      },
      "variables": {
        "entity_formation": {
          "label": "Boolean"
        },
        "entity_location": {
          "label": "Boolean"
        },
        "entity_taxon": {
          "label": "Boolean"
        },
        "entity_temporal": {
          "label": "Boolean"
        },
        "relation_formation": {
          "label": "Boolean"
        },
        "relation_formation_global": {
          "label": "Boolean"
        },
        "relation_formationtemporal": {
          "label": "Boolean"
        },
        "relation_formationtemporal_global": {
          "label": "Boolean"
        },
        "relation_taxonomy": {
          "label": "Boolean"
        },
        "relation_taxonomy_global": {
          "label": "Boolean"
        }
      }
    }
  },
  "deepdive_": {
    "db": {
      "default": {
        "dbname": "pdd_test_big_",
        "driver": "org.postgresql.Driver",
        "host": "localhost",
        "incremental_mode": "ORIGINAL",
        "password": "",
        "port": "6432",
        "url": "jdbc:postgresql://localhost:6432/pdd_test_big_",
        "user": "marycirino"
      }
    },
    "extraction": {
      "extractors": {
        "process/ext_all_entity_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"all_entity_candidate\"\n\tdeepdive sql 'INSERT INTO all_entity_candidate SELECT R0.docid AS \"entity_formation_candidate.R0.docid\", '\\''FORMATION'\\'' AS column_1, R0.eid AS \"entity_formation_candidate.R0.eid\", R0.entity AS \"entity_formation_candidate.R0.entity\", R0.prov AS \"entity_formation_candidate.R0.prov\"\nFROM entity_formation_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_temporal_candidate.R0.docid\", '\\''INTERVAL'\\'' AS column_1, R0.eid AS \"entity_temporal_candidate.R0.eid\", R0.entity AS \"entity_temporal_candidate.R0.entity\", R0.prov AS \"entity_temporal_candidate.R0.prov\"\nFROM entity_temporal_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_taxon_candidate.R0.docid\", '\\''TAXON-'\\'' || R0.type AS column_1, R0.eid AS \"entity_taxon_candidate.R0.eid\", R0.entity AS \"entity_taxon_candidate.R0.entity\", R0.prov AS \"entity_taxon_candidate.R0.prov\"\nFROM entity_taxon_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_location_candidate.R0.docid\", '\\''LOCATION'\\'' AS column_1, R0.eid AS \"entity_location_candidate.R0.eid\", R0.entity AS \"entity_location_candidate.R0.entity\", R0.prov AS \"entity_location_candidate.R0.prov\"\nFROM entity_location_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate",
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local",
            "ext_entity_taxon_candidate",
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_relations": [
            "entity_formation_candidate",
            "entity_temporal_candidate",
            "entity_taxon_candidate",
            "entity_location_candidate"
          ],
          "output_relation": "all_entity_candidate",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_formation_candidate",
            "process/ext_entity_temporal_candidate_by_ext_entity_temporal_local",
            "process/ext_entity_taxon_candidate",
            "process/ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_": [
            "data/entity_formation_candidate",
            "data/entity_temporal_candidate",
            "data/entity_taxon_candidate",
            "data/entity_location_candidate"
          ],
          "output_": "data/all_entity_candidate"
        },
        "process/ext_all_entity_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"all_entity_per_doc\"\n\tdeepdive sql 'INSERT INTO all_entity_per_doc SELECT R0.docid AS \"all_entity_candidate.R0.docid\", ARRAY_AGG(R0.eid) AS column_1, ARRAY_AGG(R0.entity) AS column_2, ARRAY_AGG(R0.type) AS column_3, ARRAY_AGG(R0.prov) AS column_4\nFROM all_entity_candidate R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_all_entity_candidate"
          ],
          "input_relations": [
            "all_entity_candidate"
          ],
          "output_relation": "all_entity_per_doc",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_all_entity_candidate"
          ],
          "input_": [
            "data/all_entity_candidate"
          ],
          "output_": "data/all_entity_per_doc"
        },
        "process/ext_document_with_all_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_all_entities\"\n\tdeepdive sql 'INSERT INTO document_with_all_entities SELECT R0.docid AS \"all_entity_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, array_to_string(R0.eid, '\\''@@@@@'\\'') AS column_3, array_to_string(R0.prov, '\\''@@@@@'\\'') AS column_4, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM all_entity_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_all_entity_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "all_entity_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_all_entities",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_all_entity_per_doc",
            "process/ext_documents_serialized"
          ],
          "input_": [
            "data/all_entity_per_doc",
            "data/documents_serialized"
          ],
          "output_": "data/document_with_all_entities"
        },
        "process/ext_document_with_formation_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_formation_entities\"\n\tdeepdive sql 'INSERT INTO document_with_formation_entities SELECT R0.docid AS \"formation_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM formation_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_formation_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "formation_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_formation_entities",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_formation_per_doc",
            "process/ext_documents_serialized"
          ],
          "input_": [
            "data/formation_per_doc",
            "data/documents_serialized"
          ],
          "output_": "data/document_with_formation_entities"
        },
        "process/ext_document_with_taxon_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_taxon_entities\"\n\tdeepdive sql 'INSERT INTO document_with_taxon_entities SELECT R0.docid AS \"taxon_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM taxon_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_taxon_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "taxon_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_taxon_entities",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_taxon_per_doc",
            "process/ext_documents_serialized"
          ],
          "input_": [
            "data/taxon_per_doc",
            "data/documents_serialized"
          ],
          "output_": "data/document_with_taxon_entities"
        },
        "process/ext_documents": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"documents\"\n\tdeepdive sql 'INSERT INTO documents SELECT DISTINCT R0.docid AS \"sentences_serialized.R0.docid\", ARRAY_AGG(R0.sentid) AS column_1, ARRAY_AGG(R0.wordidxs) AS column_2, ARRAY_AGG(R0.words) AS column_3, ARRAY_AGG(R0.poses) AS column_4, ARRAY_AGG(R0.ners) AS column_5, ARRAY_AGG(R0.lemmas) AS column_6, ARRAY_AGG(R0.dep_paths) AS column_7, ARRAY_AGG(R0.dep_parents) AS column_8, ARRAY_AGG(R0.font) AS column_9, ARRAY_AGG(R0.layout) AS column_10\nFROM sentences_serialized R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "documents",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_sentences_serialized"
          ],
          "input_": [
            "data/sentences_serialized"
          ],
          "output_": "data/documents"
        },
        "process/ext_documents_serialized": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"documents_serialized\"\n\tdeepdive sql 'INSERT INTO documents_serialized SELECT R0.docid AS \"documents.R0.docid\", array_to_string(R0.sentids, '\\''|||||'\\'') AS column_1, array_to_string(R0.wordidxs, '\\''|||||'\\'') AS column_2, array_to_string(R0.words, '\\''|||||'\\'') AS column_3, array_to_string(R0.poses, '\\''|||||'\\'') AS column_4, array_to_string(R0.ners, '\\''|||||'\\'') AS column_5, array_to_string(R0.lemmas, '\\''|||||'\\'') AS column_6, array_to_string(R0.dep_paths, '\\''|||||'\\'') AS column_7, array_to_string(R0.dep_parents, '\\''|||||'\\'') AS column_8, array_to_string(R0.font, '\\''|||||'\\'') AS column_9, array_to_string(R0.layout, '\\''|||||'\\'') AS column_10\nFROM documents R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_documents"
          ],
          "input_relations": [
            "documents"
          ],
          "output_relation": "documents_serialized",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_documents"
          ],
          "input_": [
            "data/documents"
          ],
          "output_": "data/documents_serialized"
        },
        "process/ext_entity_formation": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_formation\"\n\tdeepdive sql 'INSERT INTO entity_formation SELECT R0.docid AS \"entity_formation_candidate.R0.docid\", R0.type AS \"entity_formation_candidate.R0.type\", R0.eid AS \"entity_formation_candidate.R0.eid\", R0.entity AS \"entity_formation_candidate.R0.entity\", R0.prov AS \"entity_formation_candidate.R0.prov\"\nFROM entity_formation_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate"
          ],
          "input_relations": [
            "entity_formation_candidate"
          ],
          "output_relation": "entity_formation",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_formation_candidate"
          ],
          "input_": [
            "data/entity_formation_candidate"
          ],
          "output_": "data/entity_formation"
        },
        "process/ext_entity_formation_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_formation_candidate\"\n\tdeepdive sql 'INSERT INTO entity_formation_candidate SELECT R0.docid AS \"entity_formation_candidate__0.R0.docid\", R0.type AS \"entity_formation_candidate__0.R0.type\", R0.eid AS \"entity_formation_candidate__0.R0.eid\", R0.entity AS \"entity_formation_candidate__0.R0.entity\", R0.prov AS \"entity_formation_candidate__0.R0.prov\"\nFROM entity_formation_candidate__0 R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_formation_candidate_local.R0.docid\", R0.type AS \"entity_formation_candidate_local.R0.type\", R0.eid AS \"entity_formation_candidate_local.R0.eid\", R0.entity AS \"entity_formation_candidate_local.R0.entity\", R0.prov AS \"entity_formation_candidate_local.R0.prov\"\nFROM entity_formation_candidate_local R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate__0_by_ext_entity_formation_global",
            "ext_entity_formation_candidate_local_by_ext_entity_formation_local"
          ],
          "input_relations": [
            "entity_formation_candidate__0",
            "entity_formation_candidate_local"
          ],
          "output_relation": "entity_formation_candidate",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_formation_candidate__0_by_ext_entity_formation_global",
            "process/ext_entity_formation_candidate_local_by_ext_entity_formation_local"
          ],
          "input_": [
            "data/entity_formation_candidate__0",
            "data/entity_formation_candidate_local"
          ],
          "output_": "data/entity_formation_candidate"
        },
        "process/ext_entity_formation_candidate__0_by_ext_entity_formation_global": {
          "dependencies": [
            "ext_document_with_formation_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_formation_entities.R0.docid\", R0.entities AS \"document_with_formation_entities.R0.entities\", R0.types AS \"document_with_formation_entities.R0.types\", R0.sentids AS \"document_with_formation_entities.R0.sentids\", R0.wordidxs AS \"document_with_formation_entities.R0.wordidxs\", R0.words AS \"document_with_formation_entities.R0.words\", R0.poses AS \"document_with_formation_entities.R0.poses\", R0.ners AS \"document_with_formation_entities.R0.ners\", R0.lemmas AS \"document_with_formation_entities.R0.lemmas\", R0.dep_paths AS \"document_with_formation_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_formation_entities.R0.dep_parents\", R0.font AS \"document_with_formation_entities.R0.font\", R0.layout AS \"document_with_formation_entities.R0.layout\"\nFROM document_with_formation_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_formation_entities"
          ],
          "output_relation": "entity_formation_candidate__0",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_formation_global.py",
          "dependencies_": [
            "process/ext_document_with_formation_entities"
          ],
          "input_": [
            "data/document_with_formation_entities"
          ],
          "output_": "data/entity_formation_candidate__0"
        },
        "process/ext_entity_formation_candidate_local_by_ext_entity_formation_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_formation_candidate_local",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_formation_local.py",
          "dependencies_": [
            "process/ext_sentences_serialized"
          ],
          "input_": [
            "data/sentences_serialized"
          ],
          "output_": "data/entity_formation_candidate_local"
        },
        "process/ext_entity_location": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_location\"\n\tdeepdive sql 'INSERT INTO entity_location SELECT R0.docid AS \"entity_location_candidate.R0.docid\", R0.type AS \"entity_location_candidate.R0.type\", R0.eid AS \"entity_location_candidate.R0.eid\", R0.entity AS \"entity_location_candidate.R0.entity\", R0.prov AS \"entity_location_candidate.R0.prov\"\nFROM entity_location_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_relations": [
            "entity_location_candidate"
          ],
          "output_relation": "entity_location",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_": [
            "data/entity_location_candidate"
          ],
          "output_": "data/entity_location"
        },
        "process/ext_entity_location_candidate_by_ext_entity_location_global": {
          "dependencies": [
            "ext_documents_serialized"
          ],
          "input": " SELECT R0.docid AS \"documents_serialized.R0.docid\", R0.sentids AS \"documents_serialized.R0.sentids\", R0.wordidxs AS \"documents_serialized.R0.wordidxs\", R0.words AS \"documents_serialized.R0.words\", R0.poses AS \"documents_serialized.R0.poses\", R0.ners AS \"documents_serialized.R0.ners\", R0.lemmas AS \"documents_serialized.R0.lemmas\", R0.dep_paths AS \"documents_serialized.R0.dep_paths\", R0.dep_parents AS \"documents_serialized.R0.dep_parents\", R0.font AS \"documents_serialized.R0.font\", R0.layout AS \"documents_serialized.R0.layout\"\nFROM documents_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "documents_serialized"
          ],
          "output_relation": "entity_location_candidate",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_location_global.py",
          "dependencies_": [
            "process/ext_documents_serialized"
          ],
          "input_": [
            "data/documents_serialized"
          ],
          "output_": "data/entity_location_candidate"
        },
        "process/ext_entity_taxon": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_taxon\"\n\tdeepdive sql 'INSERT INTO entity_taxon SELECT R0.docid AS \"entity_taxon_candidate.R0.docid\", R0.type AS \"entity_taxon_candidate.R0.type\", R0.eid AS \"entity_taxon_candidate.R0.eid\", R0.entity AS \"entity_taxon_candidate.R0.entity\", R0.author_year AS \"entity_taxon_candidate.R0.author_year\", R0.prov AS \"entity_taxon_candidate.R0.prov\"\nFROM entity_taxon_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate"
          ],
          "input_relations": [
            "entity_taxon_candidate"
          ],
          "output_relation": "entity_taxon",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_taxon_candidate"
          ],
          "input_": [
            "data/entity_taxon_candidate"
          ],
          "output_": "data/entity_taxon"
        },
        "process/ext_entity_taxon_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_taxon_candidate\"\n\tdeepdive sql 'INSERT INTO entity_taxon_candidate SELECT R0.docid AS \"entity_taxon_candidate__0.R0.docid\", R0.type AS \"entity_taxon_candidate__0.R0.type\", R0.eid AS \"entity_taxon_candidate__0.R0.eid\", R0.entity AS \"entity_taxon_candidate__0.R0.entity\", R0.author_year AS \"entity_taxon_candidate__0.R0.author_year\", R0.prov AS \"entity_taxon_candidate__0.R0.prov\"\nFROM entity_taxon_candidate__0 R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_taxon_candidate_local.R0.docid\", R0.type AS \"entity_taxon_candidate_local.R0.type\", R0.eid AS \"entity_taxon_candidate_local.R0.eid\", R0.entity AS \"entity_taxon_candidate_local.R0.entity\", R0.author_year AS \"entity_taxon_candidate_local.R0.author_year\", R0.prov AS \"entity_taxon_candidate_local.R0.prov\"\nFROM entity_taxon_candidate_local R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
            "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
          ],
          "input_relations": [
            "entity_taxon_candidate__0",
            "entity_taxon_candidate_local"
          ],
          "output_relation": "entity_taxon_candidate",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
            "process/ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
          ],
          "input_": [
            "data/entity_taxon_candidate__0",
            "data/entity_taxon_candidate_local"
          ],
          "output_": "data/entity_taxon_candidate"
        },
        "process/ext_entity_taxon_candidate__0_by_ext_entity_taxon_global": {
          "dependencies": [
            "ext_document_with_taxon_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_taxon_entities.R0.docid\", R0.entities AS \"document_with_taxon_entities.R0.entities\", R0.types AS \"document_with_taxon_entities.R0.types\", R0.sentids AS \"document_with_taxon_entities.R0.sentids\", R0.wordidxs AS \"document_with_taxon_entities.R0.wordidxs\", R0.words AS \"document_with_taxon_entities.R0.words\", R0.poses AS \"document_with_taxon_entities.R0.poses\", R0.ners AS \"document_with_taxon_entities.R0.ners\", R0.lemmas AS \"document_with_taxon_entities.R0.lemmas\", R0.dep_paths AS \"document_with_taxon_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_taxon_entities.R0.dep_parents\", R0.font AS \"document_with_taxon_entities.R0.font\", R0.layout AS \"document_with_taxon_entities.R0.layout\"\nFROM document_with_taxon_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_taxon_entities"
          ],
          "output_relation": "entity_taxon_candidate__0",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_taxon_global.py",
          "dependencies_": [
            "process/ext_document_with_taxon_entities"
          ],
          "input_": [
            "data/document_with_taxon_entities"
          ],
          "output_": "data/entity_taxon_candidate__0"
        },
        "process/ext_entity_taxon_candidate_local_by_ext_entity_taxon_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_taxon_candidate_local",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_taxon_local.py",
          "dependencies_": [
            "process/ext_sentences_serialized"
          ],
          "input_": [
            "data/sentences_serialized"
          ],
          "output_": "data/entity_taxon_candidate_local"
        },
        "process/ext_entity_temporal": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_temporal\"\n\tdeepdive sql 'INSERT INTO entity_temporal SELECT R0.docid AS \"entity_temporal_candidate.R0.docid\", R0.type AS \"entity_temporal_candidate.R0.type\", R0.eid AS \"entity_temporal_candidate.R0.eid\", R0.entity AS \"entity_temporal_candidate.R0.entity\", R0.prov AS \"entity_temporal_candidate.R0.prov\"\nFROM entity_temporal_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "input_relations": [
            "entity_temporal_candidate"
          ],
          "output_relation": "entity_temporal",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "input_": [
            "data/entity_temporal_candidate"
          ],
          "output_": "data/entity_temporal"
        },
        "process/ext_entity_temporal_candidate_by_ext_entity_temporal_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_temporal_candidate",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_temporal_local.py",
          "dependencies_": [
            "process/ext_sentences_serialized"
          ],
          "input_": [
            "data/sentences_serialized"
          ],
          "output_": "data/entity_temporal_candidate"
        },
        "process/ext_formation_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"formation_per_doc\"\n\tdeepdive sql 'INSERT INTO formation_per_doc SELECT R0.docid AS \"entity_formation_candidate_local.R0.docid\", ARRAY_AGG(R0.entity) AS column_1, ARRAY_AGG(R0.type) AS column_2\nFROM entity_formation_candidate_local R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate_local_by_ext_entity_formation_local"
          ],
          "input_relations": [
            "entity_formation_candidate_local"
          ],
          "output_relation": "formation_per_doc",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_formation_candidate_local_by_ext_entity_formation_local"
          ],
          "input_": [
            "data/entity_formation_candidate_local"
          ],
          "output_": "data/formation_per_doc"
        },
        "process/ext_relation_candidates_by_ext_relation_same_sent": {
          "dependencies": [
            "ext_document_with_all_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_all_entities.R0.docid\", R0.entities AS \"document_with_all_entities.R0.entities\", R0.types AS \"document_with_all_entities.R0.types\", R0.eids AS \"document_with_all_entities.R0.eids\", R0.provs AS \"document_with_all_entities.R0.provs\", R0.sentids AS \"document_with_all_entities.R0.sentids\", R0.wordidxs AS \"document_with_all_entities.R0.wordidxs\", R0.words AS \"document_with_all_entities.R0.words\", R0.poses AS \"document_with_all_entities.R0.poses\", R0.ners AS \"document_with_all_entities.R0.ners\", R0.lemmas AS \"document_with_all_entities.R0.lemmas\", R0.dep_paths AS \"document_with_all_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_all_entities.R0.dep_parents\", R0.font AS \"document_with_all_entities.R0.font\", R0.layout AS \"document_with_all_entities.R0.layout\"\nFROM document_with_all_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_all_entities"
          ],
          "output_relation": "relation_candidates",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_relation_samesent.py",
          "dependencies_": [
            "process/ext_document_with_all_entities"
          ],
          "input_": [
            "data/document_with_all_entities"
          ],
          "output_": "data/relation_candidates"
        },
        "process/ext_relation_formation": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formation\"\n\tdeepdive sql 'INSERT INTO relation_formation SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_formation_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formation_supervise_by_ext_relation_variable_formation"
          ],
          "input_relations": [
            "relation_formation_supervise"
          ],
          "output_relation": "relation_formation",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_relation_formation_supervise_by_ext_relation_variable_formation"
          ],
          "input_": [
            "data/relation_formation_supervise"
          ],
          "output_": "data/relation_formation"
        },
        "process/ext_relation_formation_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formation_global\"\n\tdeepdive sql 'INSERT INTO relation_formation_global SELECT DISTINCT R0.type AS \"relation_formation.R0.type\", R0.eid1 AS \"relation_formation.R0.eid1\", R0.eid2 AS \"relation_formation.R0.eid2\"\nFROM relation_formation R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formation"
          ],
          "input_relations": [
            "relation_formation"
          ],
          "output_relation": "relation_formation_global",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_relation_formation"
          ],
          "input_": [
            "data/relation_formation"
          ],
          "output_": "data/relation_formation_global"
        },
        "process/ext_relation_formation_supervise_by_ext_relation_variable_formation": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_formation_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_formation.py",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_candidates"
          ],
          "output_": "data/relation_formation_supervise"
        },
        "process/ext_relation_formationtemporal": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formationtemporal\"\n\tdeepdive sql 'INSERT INTO relation_formationtemporal SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_formationtemporal_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal"
          ],
          "input_relations": [
            "relation_formationtemporal_supervise"
          ],
          "output_relation": "relation_formationtemporal",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal"
          ],
          "input_": [
            "data/relation_formationtemporal_supervise"
          ],
          "output_": "data/relation_formationtemporal"
        },
        "process/ext_relation_formationtemporal_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formationtemporal_global\"\n\tdeepdive sql 'INSERT INTO relation_formationtemporal_global SELECT DISTINCT R0.type AS \"relation_formationtemporal.R0.type\", R0.eid1 AS \"relation_formationtemporal.R0.eid1\", R0.eid2 AS \"relation_formationtemporal.R0.eid2\"\nFROM relation_formationtemporal R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formationtemporal"
          ],
          "input_relations": [
            "relation_formationtemporal"
          ],
          "output_relation": "relation_formationtemporal_global",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_relation_formationtemporal"
          ],
          "input_": [
            "data/relation_formationtemporal"
          ],
          "output_": "data/relation_formationtemporal_global"
        },
        "process/ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_formationtemporal_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_formationtemporal.py",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_candidates"
          ],
          "output_": "data/relation_formationtemporal_supervise"
        },
        "process/ext_relation_taxonomy": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_taxonomy\"\n\tdeepdive sql 'INSERT INTO relation_taxonomy SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_taxonomy_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy"
          ],
          "input_relations": [
            "relation_taxonomy_supervise"
          ],
          "output_relation": "relation_taxonomy",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy"
          ],
          "input_": [
            "data/relation_taxonomy_supervise"
          ],
          "output_": "data/relation_taxonomy"
        },
        "process/ext_relation_taxonomy_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_taxonomy_global\"\n\tdeepdive sql 'INSERT INTO relation_taxonomy_global SELECT DISTINCT R0.type AS \"relation_taxonomy.R0.type\", R0.eid1 AS \"relation_taxonomy.R0.eid1\", R0.eid2 AS \"relation_taxonomy.R0.eid2\"\nFROM relation_taxonomy R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_taxonomy"
          ],
          "input_relations": [
            "relation_taxonomy"
          ],
          "output_relation": "relation_taxonomy_global",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_relation_taxonomy"
          ],
          "input_": [
            "data/relation_taxonomy"
          ],
          "output_": "data/relation_taxonomy_global"
        },
        "process/ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_taxonomy_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_taxonomy.py",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_candidates"
          ],
          "output_": "data/relation_taxonomy_supervise"
        },
        "process/ext_sentences": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"sentences\"\n\tdeepdive sql 'INSERT INTO sentences SELECT R0.docid AS \"sentences_original.R0.docid\", R0.sentid AS \"sentences_original.R0.sentid\", R0.wordindex AS \"sentences_original.R0.wordindex\", R0.words AS \"sentences_original.R0.words\", R0.poses AS \"sentences_original.R0.poses\", R0.ners AS \"sentences_original.R0.ners\", R0.lemmas AS \"sentences_original.R0.lemmas\", R0.dep_paths AS \"sentences_original.R0.dep_paths\", R0.dep_parents AS \"sentences_original.R0.dep_parents\", NULL AS column_9, NULL AS column_9\nFROM sentences_original R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "input_relations": [
            "sentences_original"
          ],
          "output_relation": "sentences",
          "style": "cmd_extractor",
          "dependencies_": [],
          "input_": [
            "data/sentences_original"
          ],
          "output_": "data/sentences"
        },
        "process/ext_sentences_serialized": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"sentences_serialized\"\n\tdeepdive sql 'INSERT INTO sentences_serialized SELECT DISTINCT R0.docid AS \"sentences.R0.docid\", R0.sentid AS \"sentences.R0.sentid\", array_to_string(R0.wordindex, '\\''@@@@@'\\'') AS column_2, array_to_string(R0.words, '\\''@@@@@'\\'') AS column_3, array_to_string(R0.poses, '\\''@@@@@'\\'') AS column_4, array_to_string(R0.ners, '\\''@@@@@'\\'') AS column_5, array_to_string(R0.lemmas, '\\''@@@@@'\\'') AS column_6, array_to_string(R0.dep_paths, '\\''@@@@@'\\'') AS column_7, array_to_string(R0.dep_parents, '\\''@@@@@'\\'') AS column_8, array_to_string(R0.font, '\\''@@@@@'\\'') AS column_9, array_to_string(R0.layout, '\\''@@@@@'\\'') AS column_10\nFROM sentences R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_sentences"
          ],
          "input_relations": [
            "sentences"
          ],
          "output_relation": "sentences_serialized",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_sentences"
          ],
          "input_": [
            "data/sentences"
          ],
          "output_": "data/sentences_serialized"
        },
        "process/ext_taxon_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"taxon_per_doc\"\n\tdeepdive sql 'INSERT INTO taxon_per_doc SELECT R0.docid AS \"entity_taxon_candidate_local.R0.docid\", ARRAY_AGG(R0.entity) AS column_1, ARRAY_AGG(R0.type) AS column_2\nFROM entity_taxon_candidate_local R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
          ],
          "input_relations": [
            "entity_taxon_candidate_local"
          ],
          "output_relation": "taxon_per_doc",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
          ],
          "input_": [
            "data/entity_taxon_candidate_local"
          ],
          "output_": "data/taxon_per_doc"
        }
      }
    },
    "inference": {
      "factors": {
        "factor/inf_istrue_entity_formation": {
          "dependencies": [
            "ext_entity_formation_candidate"
          ],
          "function": "Imply(entity_formation.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_formation.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_formation R0, entity_formation_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_formation",
            "entity_formation_candidate"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_entity_formation_candidate"
          ],
          "input_": [
            "data/entity_formation",
            "data/entity_formation_candidate"
          ],
          "output_": null
        },
        "factor/inf_istrue_entity_location": {
          "dependencies": [
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "function": "Imply(entity_location.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_location.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_location R0, entity_location_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_location",
            "entity_location_candidate"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_": [
            "data/entity_location",
            "data/entity_location_candidate"
          ],
          "output_": null
        },
        "factor/inf_istrue_entity_taxon": {
          "dependencies": [
            "ext_entity_taxon_candidate"
          ],
          "function": "Imply(entity_taxon.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_taxon.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_taxon R0, entity_taxon_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.author_year = R0.author_year  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_taxon",
            "entity_taxon_candidate"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_entity_taxon_candidate"
          ],
          "input_": [
            "data/entity_taxon",
            "data/entity_taxon_candidate"
          ],
          "output_": null
        },
        "factor/inf_istrue_entity_temporal": {
          "dependencies": [
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "function": "Imply(entity_temporal.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_temporal.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_temporal R0, entity_temporal_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_temporal",
            "entity_temporal_candidate"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "input_": [
            "data/entity_temporal",
            "data/entity_temporal_candidate"
          ],
          "output_": null
        },
        "factor/inf_istrue_relation_formation": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formation.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formation.R0.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_formation R0, relation_candidates R1\n        WHERE R1.docid = R0.docid  AND R1.type = 'FORMATION' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 ",
          "input_relations": [
            "relation_formation",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_formation",
            "data/relation_candidates"
          ],
          "output_": null
        },
        "factor/inf_istrue_relation_formation_global": {
          "dependencies": [
            "ext_relation_formation",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formation_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formation_global.R0.id\" , R1.id AS \"relation_formation.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_formation_global R0, relation_formation R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_formation_global",
            "relation_formation",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_formation",
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_formation_global",
            "data/relation_formation",
            "data/relation_candidates"
          ],
          "output_": null
        },
        "factor/inf_istrue_relation_formationtemporal": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent",
            "ext_entity_formation",
            "ext_entity_temporal"
          ],
          "function": "Imply(relation_formationtemporal.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formationtemporal.R0.id\" , R2.id AS \"entity_formation.R2.id\" , R3.id AS \"entity_temporal.R3.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_formationtemporal R0, relation_candidates R1, entity_formation R2, entity_temporal R3\n        WHERE R1.docid = R0.docid  AND R1.type = 'FORMATIONINTERVAL' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2  AND R2.docid = R0.docid  AND R2.eid = R0.eid1  AND R2.entity = R0.entity1  AND R3.docid = R0.docid  AND R3.eid = R0.eid2  AND R3.entity = R0.entity2 ",
          "input_relations": [
            "relation_formationtemporal",
            "relation_candidates",
            "entity_formation",
            "entity_temporal"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent",
            "process/ext_entity_formation",
            "process/ext_entity_temporal"
          ],
          "input_": [
            "data/relation_formationtemporal",
            "data/relation_candidates",
            "data/entity_formation",
            "data/entity_temporal"
          ],
          "output_": null
        },
        "factor/inf_istrue_relation_formationtemporal_global": {
          "dependencies": [
            "ext_relation_formationtemporal",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formationtemporal_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formationtemporal_global.R0.id\" , R1.id AS \"relation_formationtemporal.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_formationtemporal_global R0, relation_formationtemporal R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_formationtemporal_global",
            "relation_formationtemporal",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_formationtemporal",
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_formationtemporal_global",
            "data/relation_formationtemporal",
            "data/relation_candidates"
          ],
          "output_": null
        },
        "factor/inf_istrue_relation_taxonomy": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_taxonomy.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_taxonomy.R0.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_taxonomy R0, relation_candidates R1\n        WHERE R1.docid = R0.docid  AND R1.type = 'TAXONOMY' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 ",
          "input_relations": [
            "relation_taxonomy",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_taxonomy",
            "data/relation_candidates"
          ],
          "output_": null
        },
        "factor/inf_istrue_relation_taxonomy_global": {
          "dependencies": [
            "ext_relation_taxonomy",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_taxonomy_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_taxonomy_global.R0.id\" , R1.id AS \"relation_taxonomy.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_taxonomy_global R0, relation_taxonomy R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_taxonomy_global",
            "relation_taxonomy",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_taxonomy",
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_taxonomy_global",
            "data/relation_taxonomy",
            "data/relation_candidates"
          ],
          "output_": null
        }
      },
      "factors_": [
        {
          "dependencies": [
            "ext_entity_formation_candidate"
          ],
          "function": "Imply(entity_formation.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_formation.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_formation R0, entity_formation_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_formation",
            "entity_formation_candidate"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_entity_formation_candidate"
          ],
          "input_": [
            "data/entity_formation",
            "data/entity_formation_candidate"
          ],
          "output_": null,
          "factorName": "inf_istrue_entity_formation",
          "factorsTable": "dd_factors_inf_istrue_entity_formation",
          "weightsTable": "dd_weights_inf_istrue_entity_formation",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "entity_formation.R0.label",
                "columnPrefix": "entity_formation.R0.",
                "name": "entity_formation",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "entity_formation.R0.id",
                "schema": {
                  "variableName": "entity_formation",
                  "variablesTable": "entity_formation",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_entity_formation",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_entity_formation"
        },
        {
          "dependencies": [
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "function": "Imply(entity_location.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_location.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_location R0, entity_location_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_location",
            "entity_location_candidate"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_": [
            "data/entity_location",
            "data/entity_location_candidate"
          ],
          "output_": null,
          "factorName": "inf_istrue_entity_location",
          "factorsTable": "dd_factors_inf_istrue_entity_location",
          "weightsTable": "dd_weights_inf_istrue_entity_location",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "entity_location.R0.label",
                "columnPrefix": "entity_location.R0.",
                "name": "entity_location",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "entity_location.R0.id",
                "schema": {
                  "variableName": "entity_location",
                  "variablesTable": "entity_location",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_entity_location",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_entity_location"
        },
        {
          "dependencies": [
            "ext_entity_taxon_candidate"
          ],
          "function": "Imply(entity_taxon.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_taxon.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_taxon R0, entity_taxon_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.author_year = R0.author_year  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_taxon",
            "entity_taxon_candidate"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_entity_taxon_candidate"
          ],
          "input_": [
            "data/entity_taxon",
            "data/entity_taxon_candidate"
          ],
          "output_": null,
          "factorName": "inf_istrue_entity_taxon",
          "factorsTable": "dd_factors_inf_istrue_entity_taxon",
          "weightsTable": "dd_weights_inf_istrue_entity_taxon",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "entity_taxon.R0.label",
                "columnPrefix": "entity_taxon.R0.",
                "name": "entity_taxon",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "entity_taxon.R0.id",
                "schema": {
                  "variableName": "entity_taxon",
                  "variablesTable": "entity_taxon",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_entity_taxon",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_entity_taxon"
        },
        {
          "dependencies": [
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "function": "Imply(entity_temporal.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_temporal.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_temporal R0, entity_temporal_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_temporal",
            "entity_temporal_candidate"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "input_": [
            "data/entity_temporal",
            "data/entity_temporal_candidate"
          ],
          "output_": null,
          "factorName": "inf_istrue_entity_temporal",
          "factorsTable": "dd_factors_inf_istrue_entity_temporal",
          "weightsTable": "dd_weights_inf_istrue_entity_temporal",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "entity_temporal.R0.label",
                "columnPrefix": "entity_temporal.R0.",
                "name": "entity_temporal",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "entity_temporal.R0.id",
                "schema": {
                  "variableName": "entity_temporal",
                  "variablesTable": "entity_temporal",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_entity_temporal",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_entity_temporal"
        },
        {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formation.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formation.R0.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_formation R0, relation_candidates R1\n        WHERE R1.docid = R0.docid  AND R1.type = 'FORMATION' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 ",
          "input_relations": [
            "relation_formation",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_formation",
            "data/relation_candidates"
          ],
          "output_": null,
          "factorName": "inf_istrue_relation_formation",
          "factorsTable": "dd_factors_inf_istrue_relation_formation",
          "weightsTable": "dd_weights_inf_istrue_relation_formation",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "relation_formation.R0.label",
                "columnPrefix": "relation_formation.R0.",
                "name": "relation_formation",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "relation_formation.R0.id",
                "schema": {
                  "variableName": "relation_formation",
                  "variablesTable": "relation_formation",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_relation_formation",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_relation_formation"
        },
        {
          "dependencies": [
            "ext_relation_formation",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formation_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formation_global.R0.id\" , R1.id AS \"relation_formation.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_formation_global R0, relation_formation R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_formation_global",
            "relation_formation",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_formation",
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_formation_global",
            "data/relation_formation",
            "data/relation_candidates"
          ],
          "output_": null,
          "factorName": "inf_istrue_relation_formation_global",
          "factorsTable": "dd_factors_inf_istrue_relation_formation_global",
          "weightsTable": "dd_weights_inf_istrue_relation_formation_global",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "relation_formation_global.R0.label",
                "columnPrefix": "relation_formation_global.R0.",
                "name": "relation_formation_global",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "relation_formation_global.R0.id",
                "schema": {
                  "variableName": "relation_formation_global",
                  "variablesTable": "relation_formation_global",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_relation_formation_global",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_relation_formation_global"
        },
        {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent",
            "ext_entity_formation",
            "ext_entity_temporal"
          ],
          "function": "Imply(relation_formationtemporal.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formationtemporal.R0.id\" , R2.id AS \"entity_formation.R2.id\" , R3.id AS \"entity_temporal.R3.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_formationtemporal R0, relation_candidates R1, entity_formation R2, entity_temporal R3\n        WHERE R1.docid = R0.docid  AND R1.type = 'FORMATIONINTERVAL' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2  AND R2.docid = R0.docid  AND R2.eid = R0.eid1  AND R2.entity = R0.entity1  AND R3.docid = R0.docid  AND R3.eid = R0.eid2  AND R3.entity = R0.entity2 ",
          "input_relations": [
            "relation_formationtemporal",
            "relation_candidates",
            "entity_formation",
            "entity_temporal"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent",
            "process/ext_entity_formation",
            "process/ext_entity_temporal"
          ],
          "input_": [
            "data/relation_formationtemporal",
            "data/relation_candidates",
            "data/entity_formation",
            "data/entity_temporal"
          ],
          "output_": null,
          "factorName": "inf_istrue_relation_formationtemporal",
          "factorsTable": "dd_factors_inf_istrue_relation_formationtemporal",
          "weightsTable": "dd_weights_inf_istrue_relation_formationtemporal",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "relation_formationtemporal.R0.label",
                "columnPrefix": "relation_formationtemporal.R0.",
                "name": "relation_formationtemporal",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "relation_formationtemporal.R0.id",
                "schema": {
                  "variableName": "relation_formationtemporal",
                  "variablesTable": "relation_formationtemporal",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_relation_formationtemporal",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_relation_formationtemporal"
        },
        {
          "dependencies": [
            "ext_relation_formationtemporal",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formationtemporal_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formationtemporal_global.R0.id\" , R1.id AS \"relation_formationtemporal.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_formationtemporal_global R0, relation_formationtemporal R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_formationtemporal_global",
            "relation_formationtemporal",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_formationtemporal",
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_formationtemporal_global",
            "data/relation_formationtemporal",
            "data/relation_candidates"
          ],
          "output_": null,
          "factorName": "inf_istrue_relation_formationtemporal_global",
          "factorsTable": "dd_factors_inf_istrue_relation_formationtemporal_global",
          "weightsTable": "dd_weights_inf_istrue_relation_formationtemporal_global",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "relation_formationtemporal_global.R0.label",
                "columnPrefix": "relation_formationtemporal_global.R0.",
                "name": "relation_formationtemporal_global",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "relation_formationtemporal_global.R0.id",
                "schema": {
                  "variableName": "relation_formationtemporal_global",
                  "variablesTable": "relation_formationtemporal_global",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_relation_formationtemporal_global",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_relation_formationtemporal_global"
        },
        {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_taxonomy.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_taxonomy.R0.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_taxonomy R0, relation_candidates R1\n        WHERE R1.docid = R0.docid  AND R1.type = 'TAXONOMY' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 ",
          "input_relations": [
            "relation_taxonomy",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_taxonomy",
            "data/relation_candidates"
          ],
          "output_": null,
          "factorName": "inf_istrue_relation_taxonomy",
          "factorsTable": "dd_factors_inf_istrue_relation_taxonomy",
          "weightsTable": "dd_weights_inf_istrue_relation_taxonomy",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "relation_taxonomy.R0.label",
                "columnPrefix": "relation_taxonomy.R0.",
                "name": "relation_taxonomy",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "relation_taxonomy.R0.id",
                "schema": {
                  "variableName": "relation_taxonomy",
                  "variablesTable": "relation_taxonomy",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_relation_taxonomy",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_relation_taxonomy"
        },
        {
          "dependencies": [
            "ext_relation_taxonomy",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_taxonomy_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_taxonomy_global.R0.id\" , R1.id AS \"relation_taxonomy.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_taxonomy_global R0, relation_taxonomy R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_taxonomy_global",
            "relation_taxonomy",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_taxonomy",
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_taxonomy_global",
            "data/relation_taxonomy",
            "data/relation_candidates"
          ],
          "output_": null,
          "factorName": "inf_istrue_relation_taxonomy_global",
          "factorsTable": "dd_factors_inf_istrue_relation_taxonomy_global",
          "weightsTable": "dd_weights_inf_istrue_relation_taxonomy_global",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "relation_taxonomy_global.R0.label",
                "columnPrefix": "relation_taxonomy_global.R0.",
                "name": "relation_taxonomy_global",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "relation_taxonomy_global.R0.id",
                "schema": {
                  "variableName": "relation_taxonomy_global",
                  "variablesTable": "relation_taxonomy_global",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_relation_taxonomy_global",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_relation_taxonomy_global"
        }
      ],
      "factors_byName": {
        "inf_istrue_entity_formation": {
          "dependencies": [
            "ext_entity_formation_candidate"
          ],
          "function": "Imply(entity_formation.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_formation.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_formation R0, entity_formation_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_formation",
            "entity_formation_candidate"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_entity_formation_candidate"
          ],
          "input_": [
            "data/entity_formation",
            "data/entity_formation_candidate"
          ],
          "output_": null,
          "factorName": "inf_istrue_entity_formation",
          "factorsTable": "dd_factors_inf_istrue_entity_formation",
          "weightsTable": "dd_weights_inf_istrue_entity_formation",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "entity_formation.R0.label",
                "columnPrefix": "entity_formation.R0.",
                "name": "entity_formation",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "entity_formation.R0.id",
                "schema": {
                  "variableName": "entity_formation",
                  "variablesTable": "entity_formation",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_entity_formation",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_entity_formation"
        },
        "inf_istrue_entity_location": {
          "dependencies": [
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "function": "Imply(entity_location.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_location.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_location R0, entity_location_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_location",
            "entity_location_candidate"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_": [
            "data/entity_location",
            "data/entity_location_candidate"
          ],
          "output_": null,
          "factorName": "inf_istrue_entity_location",
          "factorsTable": "dd_factors_inf_istrue_entity_location",
          "weightsTable": "dd_weights_inf_istrue_entity_location",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "entity_location.R0.label",
                "columnPrefix": "entity_location.R0.",
                "name": "entity_location",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "entity_location.R0.id",
                "schema": {
                  "variableName": "entity_location",
                  "variablesTable": "entity_location",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_entity_location",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_entity_location"
        },
        "inf_istrue_entity_taxon": {
          "dependencies": [
            "ext_entity_taxon_candidate"
          ],
          "function": "Imply(entity_taxon.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_taxon.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_taxon R0, entity_taxon_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.author_year = R0.author_year  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_taxon",
            "entity_taxon_candidate"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_entity_taxon_candidate"
          ],
          "input_": [
            "data/entity_taxon",
            "data/entity_taxon_candidate"
          ],
          "output_": null,
          "factorName": "inf_istrue_entity_taxon",
          "factorsTable": "dd_factors_inf_istrue_entity_taxon",
          "weightsTable": "dd_weights_inf_istrue_entity_taxon",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "entity_taxon.R0.label",
                "columnPrefix": "entity_taxon.R0.",
                "name": "entity_taxon",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "entity_taxon.R0.id",
                "schema": {
                  "variableName": "entity_taxon",
                  "variablesTable": "entity_taxon",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_entity_taxon",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_entity_taxon"
        },
        "inf_istrue_entity_temporal": {
          "dependencies": [
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "function": "Imply(entity_temporal.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"entity_temporal.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_temporal R0, entity_temporal_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov ",
          "input_relations": [
            "entity_temporal",
            "entity_temporal_candidate"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "input_": [
            "data/entity_temporal",
            "data/entity_temporal_candidate"
          ],
          "output_": null,
          "factorName": "inf_istrue_entity_temporal",
          "factorsTable": "dd_factors_inf_istrue_entity_temporal",
          "weightsTable": "dd_weights_inf_istrue_entity_temporal",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "entity_temporal.R0.label",
                "columnPrefix": "entity_temporal.R0.",
                "name": "entity_temporal",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "entity_temporal.R0.id",
                "schema": {
                  "variableName": "entity_temporal",
                  "variablesTable": "entity_temporal",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_entity_temporal",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_entity_temporal"
        },
        "inf_istrue_relation_formation": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formation.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formation.R0.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_formation R0, relation_candidates R1\n        WHERE R1.docid = R0.docid  AND R1.type = 'FORMATION' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 ",
          "input_relations": [
            "relation_formation",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_formation",
            "data/relation_candidates"
          ],
          "output_": null,
          "factorName": "inf_istrue_relation_formation",
          "factorsTable": "dd_factors_inf_istrue_relation_formation",
          "weightsTable": "dd_weights_inf_istrue_relation_formation",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "relation_formation.R0.label",
                "columnPrefix": "relation_formation.R0.",
                "name": "relation_formation",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "relation_formation.R0.id",
                "schema": {
                  "variableName": "relation_formation",
                  "variablesTable": "relation_formation",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_relation_formation",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_relation_formation"
        },
        "inf_istrue_relation_formation_global": {
          "dependencies": [
            "ext_relation_formation",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formation_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formation_global.R0.id\" , R1.id AS \"relation_formation.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_formation_global R0, relation_formation R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_formation_global",
            "relation_formation",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_formation",
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_formation_global",
            "data/relation_formation",
            "data/relation_candidates"
          ],
          "output_": null,
          "factorName": "inf_istrue_relation_formation_global",
          "factorsTable": "dd_factors_inf_istrue_relation_formation_global",
          "weightsTable": "dd_weights_inf_istrue_relation_formation_global",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "relation_formation_global.R0.label",
                "columnPrefix": "relation_formation_global.R0.",
                "name": "relation_formation_global",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "relation_formation_global.R0.id",
                "schema": {
                  "variableName": "relation_formation_global",
                  "variablesTable": "relation_formation_global",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_relation_formation_global",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_relation_formation_global"
        },
        "inf_istrue_relation_formationtemporal": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent",
            "ext_entity_formation",
            "ext_entity_temporal"
          ],
          "function": "Imply(relation_formationtemporal.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formationtemporal.R0.id\" , R2.id AS \"entity_formation.R2.id\" , R3.id AS \"entity_temporal.R3.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_formationtemporal R0, relation_candidates R1, entity_formation R2, entity_temporal R3\n        WHERE R1.docid = R0.docid  AND R1.type = 'FORMATIONINTERVAL' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2  AND R2.docid = R0.docid  AND R2.eid = R0.eid1  AND R2.entity = R0.entity1  AND R3.docid = R0.docid  AND R3.eid = R0.eid2  AND R3.entity = R0.entity2 ",
          "input_relations": [
            "relation_formationtemporal",
            "relation_candidates",
            "entity_formation",
            "entity_temporal"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent",
            "process/ext_entity_formation",
            "process/ext_entity_temporal"
          ],
          "input_": [
            "data/relation_formationtemporal",
            "data/relation_candidates",
            "data/entity_formation",
            "data/entity_temporal"
          ],
          "output_": null,
          "factorName": "inf_istrue_relation_formationtemporal",
          "factorsTable": "dd_factors_inf_istrue_relation_formationtemporal",
          "weightsTable": "dd_weights_inf_istrue_relation_formationtemporal",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "relation_formationtemporal.R0.label",
                "columnPrefix": "relation_formationtemporal.R0.",
                "name": "relation_formationtemporal",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "relation_formationtemporal.R0.id",
                "schema": {
                  "variableName": "relation_formationtemporal",
                  "variablesTable": "relation_formationtemporal",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_relation_formationtemporal",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_relation_formationtemporal"
        },
        "inf_istrue_relation_formationtemporal_global": {
          "dependencies": [
            "ext_relation_formationtemporal",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_formationtemporal_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_formationtemporal_global.R0.id\" , R1.id AS \"relation_formationtemporal.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_formationtemporal_global R0, relation_formationtemporal R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_formationtemporal_global",
            "relation_formationtemporal",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_formationtemporal",
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_formationtemporal_global",
            "data/relation_formationtemporal",
            "data/relation_candidates"
          ],
          "output_": null,
          "factorName": "inf_istrue_relation_formationtemporal_global",
          "factorsTable": "dd_factors_inf_istrue_relation_formationtemporal_global",
          "weightsTable": "dd_weights_inf_istrue_relation_formationtemporal_global",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "relation_formationtemporal_global.R0.label",
                "columnPrefix": "relation_formationtemporal_global.R0.",
                "name": "relation_formationtemporal_global",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "relation_formationtemporal_global.R0.id",
                "schema": {
                  "variableName": "relation_formationtemporal_global",
                  "variablesTable": "relation_formationtemporal_global",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_relation_formationtemporal_global",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_relation_formationtemporal_global"
        },
        "inf_istrue_relation_taxonomy": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_taxonomy.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_taxonomy.R0.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_taxonomy R0, relation_candidates R1\n        WHERE R1.docid = R0.docid  AND R1.type = 'TAXONOMY' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 ",
          "input_relations": [
            "relation_taxonomy",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_taxonomy",
            "data/relation_candidates"
          ],
          "output_": null,
          "factorName": "inf_istrue_relation_taxonomy",
          "factorsTable": "dd_factors_inf_istrue_relation_taxonomy",
          "weightsTable": "dd_weights_inf_istrue_relation_taxonomy",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "relation_taxonomy.R0.label",
                "columnPrefix": "relation_taxonomy.R0.",
                "name": "relation_taxonomy",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "relation_taxonomy.R0.id",
                "schema": {
                  "variableName": "relation_taxonomy",
                  "variablesTable": "relation_taxonomy",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_relation_taxonomy",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_relation_taxonomy"
        },
        "inf_istrue_relation_taxonomy_global": {
          "dependencies": [
            "ext_relation_taxonomy",
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "function": "Imply(relation_taxonomy_global.R0.label)",
          "input_query": "\n          SELECT R0.id AS \"relation_taxonomy_global.R0.id\" , R1.id AS \"relation_taxonomy.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_taxonomy_global R0, relation_taxonomy R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 ",
          "input_relations": [
            "relation_taxonomy_global",
            "relation_taxonomy",
            "relation_candidates"
          ],
          "weight": "?(dd_weight_column_0)",
          "dependencies_": [
            "process/ext_relation_taxonomy",
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_taxonomy_global",
            "data/relation_taxonomy",
            "data/relation_candidates"
          ],
          "output_": null,
          "factorName": "inf_istrue_relation_taxonomy_global",
          "factorsTable": "dd_factors_inf_istrue_relation_taxonomy_global",
          "weightsTable": "dd_weights_inf_istrue_relation_taxonomy_global",
          "weight_": {
            "is_fixed": false,
            "params": [
              "dd_weight_column_0"
            ],
            "init_value": 0
          },
          "function_": {
            "name": "imply",
            "variables": [
              {
                "isNegated": false,
                "columnLabel": "relation_taxonomy_global.R0.label",
                "columnPrefix": "relation_taxonomy_global.R0.",
                "name": "relation_taxonomy_global",
                "columnLabelName": "label",
                "isArray": false,
                "equalsTo": null,
                "columnId": "relation_taxonomy_global.R0.id",
                "schema": {
                  "variableName": "relation_taxonomy_global",
                  "variablesTable": "relation_taxonomy_global",
                  "variablesLabelColumn": "label",
                  "variableCategoriesTable": "dd_categories_relation_taxonomy_global",
                  "isBooleanType": true,
                  "isCategoricalType": false,
                  "variableCardinality": 2,
                  "variableType": "boolean"
                },
                "ordinal": 0
              }
            ],
            "id": 0
          },
          "weightsTableForDumping": "dd_weights_inf_istrue_relation_taxonomy_global"
        }
      }
    },
    "pipeline": {
      "pipelines": {
        "pipeline/endtoend": [
          "process/ext_entity_location",
          "process/ext_document_with_formation_entities",
          "process/ext_sentences",
          "process/ext_all_entity_per_doc",
          "process/ext_documents_serialized",
          "process/ext_relation_taxonomy",
          "process/ext_documents",
          "process/ext_entity_formation_candidate",
          "process/ext_taxon_per_doc",
          "process/ext_document_with_taxon_entities",
          "process/ext_entity_taxon",
          "process/ext_entity_location_candidate_by_ext_entity_location_global",
          "process/ext_relation_taxonomy_global",
          "process/ext_relation_formationtemporal",
          "process/ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy",
          "process/ext_relation_formation",
          "process/ext_entity_temporal_candidate_by_ext_entity_temporal_local",
          "process/ext_entity_formation_candidate_local_by_ext_entity_formation_local",
          "process/ext_entity_formation_candidate__0_by_ext_entity_formation_global",
          "process/ext_entity_formation",
          "process/ext_document_with_all_entities",
          "process/ext_relation_formationtemporal_global",
          "process/ext_relation_formation_supervise_by_ext_relation_variable_formation",
          "process/ext_sentences_serialized",
          "process/ext_formation_per_doc",
          "process/ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal",
          "process/ext_relation_formation_global",
          "process/ext_entity_taxon_candidate",
          "process/ext_relation_candidates_by_ext_relation_same_sent",
          "process/ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
          "process/ext_entity_temporal",
          "process/ext_all_entity_candidate",
          "process/ext_entity_taxon_candidate_local_by_ext_entity_taxon_local",
          "factor/inf_istrue_relation_formation",
          "factor/inf_istrue_relation_formationtemporal",
          "factor/inf_istrue_relation_taxonomy",
          "factor/inf_istrue_relation_formation_global",
          "factor/inf_istrue_relation_formationtemporal_global",
          "factor/inf_istrue_relation_taxonomy_global",
          "factor/inf_istrue_entity_formation",
          "factor/inf_istrue_entity_temporal",
          "factor/inf_istrue_entity_location",
          "factor/inf_istrue_entity_taxon"
        ],
        "pipeline/extraction": [
          "process/ext_entity_location",
          "process/ext_document_with_formation_entities",
          "process/ext_sentences",
          "process/ext_all_entity_per_doc",
          "process/ext_documents_serialized",
          "process/ext_relation_taxonomy",
          "process/ext_documents",
          "process/ext_entity_formation_candidate",
          "process/ext_taxon_per_doc",
          "process/ext_document_with_taxon_entities",
          "process/ext_entity_taxon",
          "process/ext_entity_location_candidate_by_ext_entity_location_global",
          "process/ext_relation_taxonomy_global",
          "process/ext_relation_formationtemporal",
          "process/ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy",
          "process/ext_relation_formation",
          "process/ext_entity_temporal_candidate_by_ext_entity_temporal_local",
          "process/ext_entity_formation_candidate_local_by_ext_entity_formation_local",
          "process/ext_entity_formation_candidate__0_by_ext_entity_formation_global",
          "process/ext_entity_formation",
          "process/ext_document_with_all_entities",
          "process/ext_relation_formationtemporal_global",
          "process/ext_relation_formation_supervise_by_ext_relation_variable_formation",
          "process/ext_sentences_serialized",
          "process/ext_formation_per_doc",
          "process/ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal",
          "process/ext_relation_formation_global",
          "process/ext_entity_taxon_candidate",
          "process/ext_relation_candidates_by_ext_relation_same_sent",
          "process/ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
          "process/ext_entity_temporal",
          "process/ext_all_entity_candidate",
          "process/ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
        ],
        "pipeline/inference": [
          "factor/inf_istrue_relation_formation",
          "factor/inf_istrue_relation_formationtemporal",
          "factor/inf_istrue_relation_taxonomy",
          "factor/inf_istrue_relation_formation_global",
          "factor/inf_istrue_relation_formationtemporal_global",
          "factor/inf_istrue_relation_taxonomy_global",
          "factor/inf_istrue_entity_formation",
          "factor/inf_istrue_entity_temporal",
          "factor/inf_istrue_entity_location",
          "factor/inf_istrue_entity_taxon"
        ]
      },
      "run": ""
    },
    "sampler": {
      "sampler_args": "-l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence",
      "sampler_cmd": "sampler-dw"
    },
    "schema": {
      "relations": {
        "all_entity_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "all_entity_per_doc": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 1,
              "type": "text[]"
            },
            "entity": {
              "index": 2,
              "type": "text[]"
            },
            "prov": {
              "index": 4,
              "type": "text[]"
            },
            "type": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "document_with_all_entities": {
          "columns": {
            "dep_parents": {
              "index": 12,
              "type": "text"
            },
            "dep_paths": {
              "index": 11,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eids": {
              "index": 3,
              "type": "text"
            },
            "entities": {
              "index": 1,
              "type": "text"
            },
            "font": {
              "index": 13,
              "type": "text"
            },
            "layout": {
              "index": 14,
              "type": "text"
            },
            "lemmas": {
              "index": 10,
              "type": "text"
            },
            "ners": {
              "index": 9,
              "type": "text"
            },
            "poses": {
              "index": 8,
              "type": "text"
            },
            "provs": {
              "index": 4,
              "type": "text"
            },
            "sentids": {
              "index": 5,
              "type": "text"
            },
            "types": {
              "index": 2,
              "type": "text"
            },
            "wordidxs": {
              "index": 6,
              "type": "text"
            },
            "words": {
              "index": 7,
              "type": "text"
            }
          }
        },
        "document_with_formation_entities": {
          "columns": {
            "dep_parents": {
              "index": 10,
              "type": "text"
            },
            "dep_paths": {
              "index": 9,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entities": {
              "index": 1,
              "type": "text"
            },
            "font": {
              "index": 11,
              "type": "text"
            },
            "layout": {
              "index": 12,
              "type": "text"
            },
            "lemmas": {
              "index": 8,
              "type": "text"
            },
            "ners": {
              "index": 7,
              "type": "text"
            },
            "poses": {
              "index": 6,
              "type": "text"
            },
            "sentids": {
              "index": 3,
              "type": "text"
            },
            "types": {
              "index": 2,
              "type": "text"
            },
            "wordidxs": {
              "index": 4,
              "type": "text"
            },
            "words": {
              "index": 5,
              "type": "text"
            }
          }
        },
        "document_with_taxon_entities": {
          "columns": {
            "dep_parents": {
              "index": 10,
              "type": "text"
            },
            "dep_paths": {
              "index": 9,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entities": {
              "index": 1,
              "type": "text"
            },
            "font": {
              "index": 11,
              "type": "text"
            },
            "layout": {
              "index": 12,
              "type": "text"
            },
            "lemmas": {
              "index": 8,
              "type": "text"
            },
            "ners": {
              "index": 7,
              "type": "text"
            },
            "poses": {
              "index": 6,
              "type": "text"
            },
            "sentids": {
              "index": 3,
              "type": "text"
            },
            "types": {
              "index": 2,
              "type": "text"
            },
            "wordidxs": {
              "index": 4,
              "type": "text"
            },
            "words": {
              "index": 5,
              "type": "text"
            }
          }
        },
        "documents": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text[]"
            },
            "dep_paths": {
              "index": 7,
              "type": "text[]"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text[]"
            },
            "layout": {
              "index": 10,
              "type": "text[]"
            },
            "lemmas": {
              "index": 6,
              "type": "text[]"
            },
            "ners": {
              "index": 5,
              "type": "text[]"
            },
            "poses": {
              "index": 4,
              "type": "text[]"
            },
            "sentids": {
              "index": 1,
              "type": "text[]"
            },
            "wordidxs": {
              "index": 2,
              "type": "text[]"
            },
            "words": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "documents_serialized": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text"
            },
            "dep_paths": {
              "index": 7,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text"
            },
            "layout": {
              "index": 10,
              "type": "text"
            },
            "lemmas": {
              "index": 6,
              "type": "text"
            },
            "ners": {
              "index": 5,
              "type": "text"
            },
            "poses": {
              "index": 4,
              "type": "text"
            },
            "sentids": {
              "index": 1,
              "type": "text"
            },
            "wordidxs": {
              "index": 2,
              "type": "text"
            },
            "words": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "entity_formation": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_formation_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_formation_candidate__0": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_formation_candidate_local": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_location": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_location_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_taxon": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_taxon_candidate": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_taxon_candidate__0": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_taxon_candidate_local": {
          "columns": {
            "author_year": {
              "index": 4,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "entity_temporal": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "entity_temporal_candidate": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid": {
              "index": 2,
              "type": "text"
            },
            "entity": {
              "index": 3,
              "type": "text"
            },
            "prov": {
              "index": 4,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "formation_per_doc": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entity": {
              "index": 1,
              "type": "text[]"
            },
            "type": {
              "index": 2,
              "type": "text[]"
            }
          }
        },
        "relation_candidates": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "features": {
              "index": 6,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "relation_formation": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formation_global": {
          "columns": {
            "entity1": {
              "index": 1,
              "type": "text"
            },
            "entity2": {
              "index": 2,
              "type": "text"
            },
            "type": {
              "index": 0,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formation_supervise": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "label": {
              "index": 6,
              "type": "boolean"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "relation_formationtemporal": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formationtemporal_global": {
          "columns": {
            "entity1": {
              "index": 1,
              "type": "text"
            },
            "entity2": {
              "index": 2,
              "type": "text"
            },
            "type": {
              "index": 0,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_formationtemporal_supervise": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "label": {
              "index": 6,
              "type": "boolean"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "relation_taxonomy": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_taxonomy_global": {
          "columns": {
            "entity1": {
              "index": 1,
              "type": "text"
            },
            "entity2": {
              "index": 2,
              "type": "text"
            },
            "type": {
              "index": 0,
              "type": "text"
            }
          },
          "variable_cardinality": 2,
          "variable_type": "boolean"
        },
        "relation_taxonomy_supervise": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "eid1": {
              "index": 2,
              "type": "text"
            },
            "eid2": {
              "index": 3,
              "type": "text"
            },
            "entity1": {
              "index": 4,
              "type": "text"
            },
            "entity2": {
              "index": 5,
              "type": "text"
            },
            "label": {
              "index": 6,
              "type": "boolean"
            },
            "type": {
              "index": 1,
              "type": "text"
            }
          }
        },
        "sentences": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text[]"
            },
            "dep_paths": {
              "index": 7,
              "type": "text[]"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text[]"
            },
            "layout": {
              "index": 10,
              "type": "text[]"
            },
            "lemmas": {
              "index": 6,
              "type": "text[]"
            },
            "ners": {
              "index": 5,
              "type": "text[]"
            },
            "poses": {
              "index": 4,
              "type": "text[]"
            },
            "sentid": {
              "index": 1,
              "type": "text"
            },
            "wordindex": {
              "index": 2,
              "type": "text[]"
            },
            "words": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "sentences_original": {
          "columns": {
            "bounding_boxes": {
              "index": 9,
              "type": "text[]"
            },
            "dep_parents": {
              "index": 8,
              "type": "text[]"
            },
            "dep_paths": {
              "index": 7,
              "type": "text[]"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "lemmas": {
              "index": 6,
              "type": "text[]"
            },
            "ners": {
              "index": 5,
              "type": "text[]"
            },
            "poses": {
              "index": 4,
              "type": "text[]"
            },
            "sentid": {
              "index": 1,
              "type": "text"
            },
            "wordindex": {
              "index": 2,
              "type": "text[]"
            },
            "words": {
              "index": 3,
              "type": "text[]"
            }
          }
        },
        "sentences_serialized": {
          "columns": {
            "dep_parents": {
              "index": 8,
              "type": "text"
            },
            "dep_paths": {
              "index": 7,
              "type": "text"
            },
            "docid": {
              "index": 0,
              "type": "text"
            },
            "font": {
              "index": 9,
              "type": "text"
            },
            "layout": {
              "index": 10,
              "type": "text"
            },
            "lemmas": {
              "index": 6,
              "type": "text"
            },
            "ners": {
              "index": 5,
              "type": "text"
            },
            "poses": {
              "index": 4,
              "type": "text"
            },
            "sentid": {
              "index": 1,
              "type": "text"
            },
            "wordidxs": {
              "index": 2,
              "type": "text"
            },
            "words": {
              "index": 3,
              "type": "text"
            }
          }
        },
        "taxon_per_doc": {
          "columns": {
            "docid": {
              "index": 0,
              "type": "text"
            },
            "entity": {
              "index": 1,
              "type": "text[]"
            },
            "type": {
              "index": 2,
              "type": "text[]"
            }
          }
        }
      },
      "variables": {
        "entity_formation": {
          "label": "Boolean"
        },
        "entity_location": {
          "label": "Boolean"
        },
        "entity_taxon": {
          "label": "Boolean"
        },
        "entity_temporal": {
          "label": "Boolean"
        },
        "relation_formation": {
          "label": "Boolean"
        },
        "relation_formation_global": {
          "label": "Boolean"
        },
        "relation_formationtemporal": {
          "label": "Boolean"
        },
        "relation_formationtemporal_global": {
          "label": "Boolean"
        },
        "relation_taxonomy": {
          "label": "Boolean"
        },
        "relation_taxonomy_global": {
          "label": "Boolean"
        }
      },
      "variables_": [
        {
          "variableName": "entity_formation",
          "variablesTable": "entity_formation",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_entity_formation",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        {
          "variableName": "entity_location",
          "variablesTable": "entity_location",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_entity_location",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        {
          "variableName": "entity_taxon",
          "variablesTable": "entity_taxon",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_entity_taxon",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        {
          "variableName": "entity_temporal",
          "variablesTable": "entity_temporal",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_entity_temporal",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        {
          "variableName": "relation_formation",
          "variablesTable": "relation_formation",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_relation_formation",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        {
          "variableName": "relation_formation_global",
          "variablesTable": "relation_formation_global",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_relation_formation_global",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        {
          "variableName": "relation_formationtemporal",
          "variablesTable": "relation_formationtemporal",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_relation_formationtemporal",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        {
          "variableName": "relation_formationtemporal_global",
          "variablesTable": "relation_formationtemporal_global",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_relation_formationtemporal_global",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        {
          "variableName": "relation_taxonomy",
          "variablesTable": "relation_taxonomy",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_relation_taxonomy",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        {
          "variableName": "relation_taxonomy_global",
          "variablesTable": "relation_taxonomy_global",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_relation_taxonomy_global",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        }
      ],
      "variables_byName": {
        "entity_formation": {
          "variableName": "entity_formation",
          "variablesTable": "entity_formation",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_entity_formation",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        "entity_location": {
          "variableName": "entity_location",
          "variablesTable": "entity_location",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_entity_location",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        "entity_taxon": {
          "variableName": "entity_taxon",
          "variablesTable": "entity_taxon",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_entity_taxon",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        "entity_temporal": {
          "variableName": "entity_temporal",
          "variablesTable": "entity_temporal",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_entity_temporal",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        "relation_formation": {
          "variableName": "relation_formation",
          "variablesTable": "relation_formation",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_relation_formation",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        "relation_formation_global": {
          "variableName": "relation_formation_global",
          "variablesTable": "relation_formation_global",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_relation_formation_global",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        "relation_formationtemporal": {
          "variableName": "relation_formationtemporal",
          "variablesTable": "relation_formationtemporal",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_relation_formationtemporal",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        "relation_formationtemporal_global": {
          "variableName": "relation_formationtemporal_global",
          "variablesTable": "relation_formationtemporal_global",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_relation_formationtemporal_global",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        "relation_taxonomy": {
          "variableName": "relation_taxonomy",
          "variablesTable": "relation_taxonomy",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_relation_taxonomy",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        },
        "relation_taxonomy_global": {
          "variableName": "relation_taxonomy_global",
          "variablesTable": "relation_taxonomy_global",
          "variablesLabelColumn": "label",
          "variableCategoriesTable": "dd_categories_relation_taxonomy_global",
          "isBooleanType": true,
          "isCategoricalType": false,
          "variableCardinality": 2,
          "variableType": "boolean"
        }
      }
    },
    "execution": {
      "processes": {
        "process/init/app": {
          "style": "cmd_extractor",
          "cmd": "\n        deepdive db init\n\n        cd \"$DEEPDIVE_APP\"\n        # run legacy schema.sql\n        if [[ -r schema.sql ]]; then\n            deepdive db prompt <schema.sql\n        fi\n        # run legacy init script\n        if [[ -x input/init.sh ]]; then\n            input/init.sh\n        fi\n        "
        },
        "process/init/relation/sentences_original": {
          "style": "cmd_extractor",
          "cmd": "deepdive create table 'sentences_original' && deepdive load 'sentences_original'",
          "dependencies_": [
            "process/init/app"
          ],
          "output_relation": "sentences_original",
          "output_": "data/sentences_original"
        },
        "process/ext_all_entity_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"all_entity_candidate\"\n\tdeepdive sql 'INSERT INTO all_entity_candidate SELECT R0.docid AS \"entity_formation_candidate.R0.docid\", '\\''FORMATION'\\'' AS column_1, R0.eid AS \"entity_formation_candidate.R0.eid\", R0.entity AS \"entity_formation_candidate.R0.entity\", R0.prov AS \"entity_formation_candidate.R0.prov\"\nFROM entity_formation_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_temporal_candidate.R0.docid\", '\\''INTERVAL'\\'' AS column_1, R0.eid AS \"entity_temporal_candidate.R0.eid\", R0.entity AS \"entity_temporal_candidate.R0.entity\", R0.prov AS \"entity_temporal_candidate.R0.prov\"\nFROM entity_temporal_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_taxon_candidate.R0.docid\", '\\''TAXON-'\\'' || R0.type AS column_1, R0.eid AS \"entity_taxon_candidate.R0.eid\", R0.entity AS \"entity_taxon_candidate.R0.entity\", R0.prov AS \"entity_taxon_candidate.R0.prov\"\nFROM entity_taxon_candidate R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_location_candidate.R0.docid\", '\\''LOCATION'\\'' AS column_1, R0.eid AS \"entity_location_candidate.R0.eid\", R0.entity AS \"entity_location_candidate.R0.entity\", R0.prov AS \"entity_location_candidate.R0.prov\"\nFROM entity_location_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate",
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local",
            "ext_entity_taxon_candidate",
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_relations": [
            "entity_formation_candidate",
            "entity_temporal_candidate",
            "entity_taxon_candidate",
            "entity_location_candidate"
          ],
          "output_relation": "all_entity_candidate",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_formation_candidate",
            "process/ext_entity_temporal_candidate_by_ext_entity_temporal_local",
            "process/ext_entity_taxon_candidate",
            "process/ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_": [
            "data/entity_formation_candidate",
            "data/entity_temporal_candidate",
            "data/entity_taxon_candidate",
            "data/entity_location_candidate"
          ],
          "output_": "data/all_entity_candidate"
        },
        "process/ext_all_entity_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"all_entity_per_doc\"\n\tdeepdive sql 'INSERT INTO all_entity_per_doc SELECT R0.docid AS \"all_entity_candidate.R0.docid\", ARRAY_AGG(R0.eid) AS column_1, ARRAY_AGG(R0.entity) AS column_2, ARRAY_AGG(R0.type) AS column_3, ARRAY_AGG(R0.prov) AS column_4\nFROM all_entity_candidate R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_all_entity_candidate"
          ],
          "input_relations": [
            "all_entity_candidate"
          ],
          "output_relation": "all_entity_per_doc",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_all_entity_candidate"
          ],
          "input_": [
            "data/all_entity_candidate"
          ],
          "output_": "data/all_entity_per_doc"
        },
        "process/ext_document_with_all_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_all_entities\"\n\tdeepdive sql 'INSERT INTO document_with_all_entities SELECT R0.docid AS \"all_entity_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, array_to_string(R0.eid, '\\''@@@@@'\\'') AS column_3, array_to_string(R0.prov, '\\''@@@@@'\\'') AS column_4, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM all_entity_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_all_entity_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "all_entity_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_all_entities",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_all_entity_per_doc",
            "process/ext_documents_serialized"
          ],
          "input_": [
            "data/all_entity_per_doc",
            "data/documents_serialized"
          ],
          "output_": "data/document_with_all_entities"
        },
        "process/ext_document_with_formation_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_formation_entities\"\n\tdeepdive sql 'INSERT INTO document_with_formation_entities SELECT R0.docid AS \"formation_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM formation_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_formation_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "formation_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_formation_entities",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_formation_per_doc",
            "process/ext_documents_serialized"
          ],
          "input_": [
            "data/formation_per_doc",
            "data/documents_serialized"
          ],
          "output_": "data/document_with_formation_entities"
        },
        "process/ext_document_with_taxon_entities": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"document_with_taxon_entities\"\n\tdeepdive sql 'INSERT INTO document_with_taxon_entities SELECT R0.docid AS \"taxon_per_doc.R0.docid\", array_to_string(R0.entity, '\\''@@@@@'\\'') AS column_1, array_to_string(R0.type, '\\''@@@@@'\\'') AS column_2, R1.sentids AS \"documents_serialized.R1.sentids\", R1.wordidxs AS \"documents_serialized.R1.wordidxs\", R1.words AS \"documents_serialized.R1.words\", R1.poses AS \"documents_serialized.R1.poses\", R1.ners AS \"documents_serialized.R1.ners\", R1.lemmas AS \"documents_serialized.R1.lemmas\", R1.dep_paths AS \"documents_serialized.R1.dep_paths\", R1.dep_parents AS \"documents_serialized.R1.dep_parents\", R1.font AS \"documents_serialized.R1.font\", R1.layout AS \"documents_serialized.R1.layout\"\nFROM taxon_per_doc R0, documents_serialized R1\n        WHERE R1.docid = R0.docid '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_taxon_per_doc",
            "ext_documents_serialized"
          ],
          "input_relations": [
            "taxon_per_doc",
            "documents_serialized"
          ],
          "output_relation": "document_with_taxon_entities",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_taxon_per_doc",
            "process/ext_documents_serialized"
          ],
          "input_": [
            "data/taxon_per_doc",
            "data/documents_serialized"
          ],
          "output_": "data/document_with_taxon_entities"
        },
        "process/ext_documents": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"documents\"\n\tdeepdive sql 'INSERT INTO documents SELECT DISTINCT R0.docid AS \"sentences_serialized.R0.docid\", ARRAY_AGG(R0.sentid) AS column_1, ARRAY_AGG(R0.wordidxs) AS column_2, ARRAY_AGG(R0.words) AS column_3, ARRAY_AGG(R0.poses) AS column_4, ARRAY_AGG(R0.ners) AS column_5, ARRAY_AGG(R0.lemmas) AS column_6, ARRAY_AGG(R0.dep_paths) AS column_7, ARRAY_AGG(R0.dep_parents) AS column_8, ARRAY_AGG(R0.font) AS column_9, ARRAY_AGG(R0.layout) AS column_10\nFROM sentences_serialized R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "documents",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_sentences_serialized"
          ],
          "input_": [
            "data/sentences_serialized"
          ],
          "output_": "data/documents"
        },
        "process/ext_documents_serialized": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"documents_serialized\"\n\tdeepdive sql 'INSERT INTO documents_serialized SELECT R0.docid AS \"documents.R0.docid\", array_to_string(R0.sentids, '\\''|||||'\\'') AS column_1, array_to_string(R0.wordidxs, '\\''|||||'\\'') AS column_2, array_to_string(R0.words, '\\''|||||'\\'') AS column_3, array_to_string(R0.poses, '\\''|||||'\\'') AS column_4, array_to_string(R0.ners, '\\''|||||'\\'') AS column_5, array_to_string(R0.lemmas, '\\''|||||'\\'') AS column_6, array_to_string(R0.dep_paths, '\\''|||||'\\'') AS column_7, array_to_string(R0.dep_parents, '\\''|||||'\\'') AS column_8, array_to_string(R0.font, '\\''|||||'\\'') AS column_9, array_to_string(R0.layout, '\\''|||||'\\'') AS column_10\nFROM documents R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_documents"
          ],
          "input_relations": [
            "documents"
          ],
          "output_relation": "documents_serialized",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_documents"
          ],
          "input_": [
            "data/documents"
          ],
          "output_": "data/documents_serialized"
        },
        "process/ext_entity_formation": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_formation\"\n\tdeepdive sql 'INSERT INTO entity_formation SELECT R0.docid AS \"entity_formation_candidate.R0.docid\", R0.type AS \"entity_formation_candidate.R0.type\", R0.eid AS \"entity_formation_candidate.R0.eid\", R0.entity AS \"entity_formation_candidate.R0.entity\", R0.prov AS \"entity_formation_candidate.R0.prov\"\nFROM entity_formation_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate"
          ],
          "input_relations": [
            "entity_formation_candidate"
          ],
          "output_relation": "entity_formation",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_formation_candidate"
          ],
          "input_": [
            "data/entity_formation_candidate"
          ],
          "output_": "data/entity_formation"
        },
        "process/ext_entity_formation_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_formation_candidate\"\n\tdeepdive sql 'INSERT INTO entity_formation_candidate SELECT R0.docid AS \"entity_formation_candidate__0.R0.docid\", R0.type AS \"entity_formation_candidate__0.R0.type\", R0.eid AS \"entity_formation_candidate__0.R0.eid\", R0.entity AS \"entity_formation_candidate__0.R0.entity\", R0.prov AS \"entity_formation_candidate__0.R0.prov\"\nFROM entity_formation_candidate__0 R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_formation_candidate_local.R0.docid\", R0.type AS \"entity_formation_candidate_local.R0.type\", R0.eid AS \"entity_formation_candidate_local.R0.eid\", R0.entity AS \"entity_formation_candidate_local.R0.entity\", R0.prov AS \"entity_formation_candidate_local.R0.prov\"\nFROM entity_formation_candidate_local R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate__0_by_ext_entity_formation_global",
            "ext_entity_formation_candidate_local_by_ext_entity_formation_local"
          ],
          "input_relations": [
            "entity_formation_candidate__0",
            "entity_formation_candidate_local"
          ],
          "output_relation": "entity_formation_candidate",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_formation_candidate__0_by_ext_entity_formation_global",
            "process/ext_entity_formation_candidate_local_by_ext_entity_formation_local"
          ],
          "input_": [
            "data/entity_formation_candidate__0",
            "data/entity_formation_candidate_local"
          ],
          "output_": "data/entity_formation_candidate"
        },
        "process/ext_entity_formation_candidate__0_by_ext_entity_formation_global": {
          "dependencies": [
            "ext_document_with_formation_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_formation_entities.R0.docid\", R0.entities AS \"document_with_formation_entities.R0.entities\", R0.types AS \"document_with_formation_entities.R0.types\", R0.sentids AS \"document_with_formation_entities.R0.sentids\", R0.wordidxs AS \"document_with_formation_entities.R0.wordidxs\", R0.words AS \"document_with_formation_entities.R0.words\", R0.poses AS \"document_with_formation_entities.R0.poses\", R0.ners AS \"document_with_formation_entities.R0.ners\", R0.lemmas AS \"document_with_formation_entities.R0.lemmas\", R0.dep_paths AS \"document_with_formation_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_formation_entities.R0.dep_parents\", R0.font AS \"document_with_formation_entities.R0.font\", R0.layout AS \"document_with_formation_entities.R0.layout\"\nFROM document_with_formation_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_formation_entities"
          ],
          "output_relation": "entity_formation_candidate__0",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_formation_global.py",
          "dependencies_": [
            "process/ext_document_with_formation_entities"
          ],
          "input_": [
            "data/document_with_formation_entities"
          ],
          "output_": "data/entity_formation_candidate__0"
        },
        "process/ext_entity_formation_candidate_local_by_ext_entity_formation_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_formation_candidate_local",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_formation_local.py",
          "dependencies_": [
            "process/ext_sentences_serialized"
          ],
          "input_": [
            "data/sentences_serialized"
          ],
          "output_": "data/entity_formation_candidate_local"
        },
        "process/ext_entity_location": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_location\"\n\tdeepdive sql 'INSERT INTO entity_location SELECT R0.docid AS \"entity_location_candidate.R0.docid\", R0.type AS \"entity_location_candidate.R0.type\", R0.eid AS \"entity_location_candidate.R0.eid\", R0.entity AS \"entity_location_candidate.R0.entity\", R0.prov AS \"entity_location_candidate.R0.prov\"\nFROM entity_location_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_relations": [
            "entity_location_candidate"
          ],
          "output_relation": "entity_location",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_location_candidate_by_ext_entity_location_global"
          ],
          "input_": [
            "data/entity_location_candidate"
          ],
          "output_": "data/entity_location"
        },
        "process/ext_entity_location_candidate_by_ext_entity_location_global": {
          "dependencies": [
            "ext_documents_serialized"
          ],
          "input": " SELECT R0.docid AS \"documents_serialized.R0.docid\", R0.sentids AS \"documents_serialized.R0.sentids\", R0.wordidxs AS \"documents_serialized.R0.wordidxs\", R0.words AS \"documents_serialized.R0.words\", R0.poses AS \"documents_serialized.R0.poses\", R0.ners AS \"documents_serialized.R0.ners\", R0.lemmas AS \"documents_serialized.R0.lemmas\", R0.dep_paths AS \"documents_serialized.R0.dep_paths\", R0.dep_parents AS \"documents_serialized.R0.dep_parents\", R0.font AS \"documents_serialized.R0.font\", R0.layout AS \"documents_serialized.R0.layout\"\nFROM documents_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "documents_serialized"
          ],
          "output_relation": "entity_location_candidate",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_location_global.py",
          "dependencies_": [
            "process/ext_documents_serialized"
          ],
          "input_": [
            "data/documents_serialized"
          ],
          "output_": "data/entity_location_candidate"
        },
        "process/ext_entity_taxon": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_taxon\"\n\tdeepdive sql 'INSERT INTO entity_taxon SELECT R0.docid AS \"entity_taxon_candidate.R0.docid\", R0.type AS \"entity_taxon_candidate.R0.type\", R0.eid AS \"entity_taxon_candidate.R0.eid\", R0.entity AS \"entity_taxon_candidate.R0.entity\", R0.author_year AS \"entity_taxon_candidate.R0.author_year\", R0.prov AS \"entity_taxon_candidate.R0.prov\"\nFROM entity_taxon_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate"
          ],
          "input_relations": [
            "entity_taxon_candidate"
          ],
          "output_relation": "entity_taxon",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_taxon_candidate"
          ],
          "input_": [
            "data/entity_taxon_candidate"
          ],
          "output_": "data/entity_taxon"
        },
        "process/ext_entity_taxon_candidate": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_taxon_candidate\"\n\tdeepdive sql 'INSERT INTO entity_taxon_candidate SELECT R0.docid AS \"entity_taxon_candidate__0.R0.docid\", R0.type AS \"entity_taxon_candidate__0.R0.type\", R0.eid AS \"entity_taxon_candidate__0.R0.eid\", R0.entity AS \"entity_taxon_candidate__0.R0.entity\", R0.author_year AS \"entity_taxon_candidate__0.R0.author_year\", R0.prov AS \"entity_taxon_candidate__0.R0.prov\"\nFROM entity_taxon_candidate__0 R0\n        \nUNION ALL\nSELECT R0.docid AS \"entity_taxon_candidate_local.R0.docid\", R0.type AS \"entity_taxon_candidate_local.R0.type\", R0.eid AS \"entity_taxon_candidate_local.R0.eid\", R0.entity AS \"entity_taxon_candidate_local.R0.entity\", R0.author_year AS \"entity_taxon_candidate_local.R0.author_year\", R0.prov AS \"entity_taxon_candidate_local.R0.prov\"\nFROM entity_taxon_candidate_local R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
            "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
          ],
          "input_relations": [
            "entity_taxon_candidate__0",
            "entity_taxon_candidate_local"
          ],
          "output_relation": "entity_taxon_candidate",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_taxon_candidate__0_by_ext_entity_taxon_global",
            "process/ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
          ],
          "input_": [
            "data/entity_taxon_candidate__0",
            "data/entity_taxon_candidate_local"
          ],
          "output_": "data/entity_taxon_candidate"
        },
        "process/ext_entity_taxon_candidate__0_by_ext_entity_taxon_global": {
          "dependencies": [
            "ext_document_with_taxon_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_taxon_entities.R0.docid\", R0.entities AS \"document_with_taxon_entities.R0.entities\", R0.types AS \"document_with_taxon_entities.R0.types\", R0.sentids AS \"document_with_taxon_entities.R0.sentids\", R0.wordidxs AS \"document_with_taxon_entities.R0.wordidxs\", R0.words AS \"document_with_taxon_entities.R0.words\", R0.poses AS \"document_with_taxon_entities.R0.poses\", R0.ners AS \"document_with_taxon_entities.R0.ners\", R0.lemmas AS \"document_with_taxon_entities.R0.lemmas\", R0.dep_paths AS \"document_with_taxon_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_taxon_entities.R0.dep_parents\", R0.font AS \"document_with_taxon_entities.R0.font\", R0.layout AS \"document_with_taxon_entities.R0.layout\"\nFROM document_with_taxon_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_taxon_entities"
          ],
          "output_relation": "entity_taxon_candidate__0",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_taxon_global.py",
          "dependencies_": [
            "process/ext_document_with_taxon_entities"
          ],
          "input_": [
            "data/document_with_taxon_entities"
          ],
          "output_": "data/entity_taxon_candidate__0"
        },
        "process/ext_entity_taxon_candidate_local_by_ext_entity_taxon_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_taxon_candidate_local",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_taxon_local.py",
          "dependencies_": [
            "process/ext_sentences_serialized"
          ],
          "input_": [
            "data/sentences_serialized"
          ],
          "output_": "data/entity_taxon_candidate_local"
        },
        "process/ext_entity_temporal": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"entity_temporal\"\n\tdeepdive sql 'INSERT INTO entity_temporal SELECT R0.docid AS \"entity_temporal_candidate.R0.docid\", R0.type AS \"entity_temporal_candidate.R0.type\", R0.eid AS \"entity_temporal_candidate.R0.eid\", R0.entity AS \"entity_temporal_candidate.R0.entity\", R0.prov AS \"entity_temporal_candidate.R0.prov\"\nFROM entity_temporal_candidate R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "input_relations": [
            "entity_temporal_candidate"
          ],
          "output_relation": "entity_temporal",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_temporal_candidate_by_ext_entity_temporal_local"
          ],
          "input_": [
            "data/entity_temporal_candidate"
          ],
          "output_": "data/entity_temporal"
        },
        "process/ext_entity_temporal_candidate_by_ext_entity_temporal_local": {
          "dependencies": [
            "ext_sentences_serialized"
          ],
          "input": " SELECT R0.docid AS \"sentences_serialized.R0.docid\", R0.sentid AS \"sentences_serialized.R0.sentid\", R0.wordidxs AS \"sentences_serialized.R0.wordidxs\", R0.words AS \"sentences_serialized.R0.words\", R0.poses AS \"sentences_serialized.R0.poses\", R0.ners AS \"sentences_serialized.R0.ners\", R0.lemmas AS \"sentences_serialized.R0.lemmas\", R0.dep_paths AS \"sentences_serialized.R0.dep_paths\", R0.dep_parents AS \"sentences_serialized.R0.dep_parents\", R0.font AS \"sentences_serialized.R0.font\", R0.layout AS \"sentences_serialized.R0.layout\"\nFROM sentences_serialized R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "sentences_serialized"
          ],
          "output_relation": "entity_temporal_candidate",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_temporal_local.py",
          "dependencies_": [
            "process/ext_sentences_serialized"
          ],
          "input_": [
            "data/sentences_serialized"
          ],
          "output_": "data/entity_temporal_candidate"
        },
        "process/ext_formation_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"formation_per_doc\"\n\tdeepdive sql 'INSERT INTO formation_per_doc SELECT R0.docid AS \"entity_formation_candidate_local.R0.docid\", ARRAY_AGG(R0.entity) AS column_1, ARRAY_AGG(R0.type) AS column_2\nFROM entity_formation_candidate_local R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_formation_candidate_local_by_ext_entity_formation_local"
          ],
          "input_relations": [
            "entity_formation_candidate_local"
          ],
          "output_relation": "formation_per_doc",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_formation_candidate_local_by_ext_entity_formation_local"
          ],
          "input_": [
            "data/entity_formation_candidate_local"
          ],
          "output_": "data/formation_per_doc"
        },
        "process/ext_relation_candidates_by_ext_relation_same_sent": {
          "dependencies": [
            "ext_document_with_all_entities"
          ],
          "input": " SELECT R0.docid AS \"document_with_all_entities.R0.docid\", R0.entities AS \"document_with_all_entities.R0.entities\", R0.types AS \"document_with_all_entities.R0.types\", R0.eids AS \"document_with_all_entities.R0.eids\", R0.provs AS \"document_with_all_entities.R0.provs\", R0.sentids AS \"document_with_all_entities.R0.sentids\", R0.wordidxs AS \"document_with_all_entities.R0.wordidxs\", R0.words AS \"document_with_all_entities.R0.words\", R0.poses AS \"document_with_all_entities.R0.poses\", R0.ners AS \"document_with_all_entities.R0.ners\", R0.lemmas AS \"document_with_all_entities.R0.lemmas\", R0.dep_paths AS \"document_with_all_entities.R0.dep_paths\", R0.dep_parents AS \"document_with_all_entities.R0.dep_parents\", R0.font AS \"document_with_all_entities.R0.font\", R0.layout AS \"document_with_all_entities.R0.layout\"\nFROM document_with_all_entities R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "document_with_all_entities"
          ],
          "output_relation": "relation_candidates",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/ext_relation_samesent.py",
          "dependencies_": [
            "process/ext_document_with_all_entities"
          ],
          "input_": [
            "data/document_with_all_entities"
          ],
          "output_": "data/relation_candidates"
        },
        "process/ext_relation_formation": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formation\"\n\tdeepdive sql 'INSERT INTO relation_formation SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_formation_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formation_supervise_by_ext_relation_variable_formation"
          ],
          "input_relations": [
            "relation_formation_supervise"
          ],
          "output_relation": "relation_formation",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_relation_formation_supervise_by_ext_relation_variable_formation"
          ],
          "input_": [
            "data/relation_formation_supervise"
          ],
          "output_": "data/relation_formation"
        },
        "process/ext_relation_formation_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formation_global\"\n\tdeepdive sql 'INSERT INTO relation_formation_global SELECT DISTINCT R0.type AS \"relation_formation.R0.type\", R0.eid1 AS \"relation_formation.R0.eid1\", R0.eid2 AS \"relation_formation.R0.eid2\"\nFROM relation_formation R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formation"
          ],
          "input_relations": [
            "relation_formation"
          ],
          "output_relation": "relation_formation_global",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_relation_formation"
          ],
          "input_": [
            "data/relation_formation"
          ],
          "output_": "data/relation_formation_global"
        },
        "process/ext_relation_formation_supervise_by_ext_relation_variable_formation": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_formation_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_formation.py",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_candidates"
          ],
          "output_": "data/relation_formation_supervise"
        },
        "process/ext_relation_formationtemporal": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formationtemporal\"\n\tdeepdive sql 'INSERT INTO relation_formationtemporal SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_formationtemporal_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal"
          ],
          "input_relations": [
            "relation_formationtemporal_supervise"
          ],
          "output_relation": "relation_formationtemporal",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal"
          ],
          "input_": [
            "data/relation_formationtemporal_supervise"
          ],
          "output_": "data/relation_formationtemporal"
        },
        "process/ext_relation_formationtemporal_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_formationtemporal_global\"\n\tdeepdive sql 'INSERT INTO relation_formationtemporal_global SELECT DISTINCT R0.type AS \"relation_formationtemporal.R0.type\", R0.eid1 AS \"relation_formationtemporal.R0.eid1\", R0.eid2 AS \"relation_formationtemporal.R0.eid2\"\nFROM relation_formationtemporal R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_formationtemporal"
          ],
          "input_relations": [
            "relation_formationtemporal"
          ],
          "output_relation": "relation_formationtemporal_global",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_relation_formationtemporal"
          ],
          "input_": [
            "data/relation_formationtemporal"
          ],
          "output_": "data/relation_formationtemporal_global"
        },
        "process/ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_formationtemporal_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_formationtemporal.py",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_candidates"
          ],
          "output_": "data/relation_formationtemporal_supervise"
        },
        "process/ext_relation_taxonomy": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_taxonomy\"\n\tdeepdive sql 'INSERT INTO relation_taxonomy SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label\n          FROM relation_taxonomy_supervise R0\n        \n          '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy"
          ],
          "input_relations": [
            "relation_taxonomy_supervise"
          ],
          "output_relation": "relation_taxonomy",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy"
          ],
          "input_": [
            "data/relation_taxonomy_supervise"
          ],
          "output_": "data/relation_taxonomy"
        },
        "process/ext_relation_taxonomy_global": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"relation_taxonomy_global\"\n\tdeepdive sql 'INSERT INTO relation_taxonomy_global SELECT DISTINCT R0.type AS \"relation_taxonomy.R0.type\", R0.eid1 AS \"relation_taxonomy.R0.eid1\", R0.eid2 AS \"relation_taxonomy.R0.eid2\"\nFROM relation_taxonomy R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_relation_taxonomy"
          ],
          "input_relations": [
            "relation_taxonomy"
          ],
          "output_relation": "relation_taxonomy_global",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_relation_taxonomy"
          ],
          "input_": [
            "data/relation_taxonomy"
          ],
          "output_": "data/relation_taxonomy_global"
        },
        "process/ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy": {
          "dependencies": [
            "ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input": " SELECT R0.docid AS \"relation_candidates.R0.docid\", R0.type AS \"relation_candidates.R0.type\", R0.eid1 AS \"relation_candidates.R0.eid1\", R0.eid2 AS \"relation_candidates.R0.eid2\", R0.entity1 AS \"relation_candidates.R0.entity1\", R0.entity2 AS \"relation_candidates.R0.entity2\", R0.features AS \"relation_candidates.R0.features\"\nFROM relation_candidates R0\n        \n          ",
          "input_batch_size": "100000",
          "input_relations": [
            "relation_candidates"
          ],
          "output_relation": "relation_taxonomy_supervise",
          "parallelism": "1",
          "style": "tsv_extractor",
          "udf": "\"$DEEPDIVE_APP\"//udf/supervise_taxonomy.py",
          "dependencies_": [
            "process/ext_relation_candidates_by_ext_relation_same_sent"
          ],
          "input_": [
            "data/relation_candidates"
          ],
          "output_": "data/relation_taxonomy_supervise"
        },
        "process/ext_sentences": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"sentences\"\n\tdeepdive sql 'INSERT INTO sentences SELECT R0.docid AS \"sentences_original.R0.docid\", R0.sentid AS \"sentences_original.R0.sentid\", R0.wordindex AS \"sentences_original.R0.wordindex\", R0.words AS \"sentences_original.R0.words\", R0.poses AS \"sentences_original.R0.poses\", R0.ners AS \"sentences_original.R0.ners\", R0.lemmas AS \"sentences_original.R0.lemmas\", R0.dep_paths AS \"sentences_original.R0.dep_paths\", R0.dep_parents AS \"sentences_original.R0.dep_parents\", NULL AS column_9, NULL AS column_9\nFROM sentences_original R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "input_relations": [
            "sentences_original"
          ],
          "output_relation": "sentences",
          "style": "cmd_extractor",
          "dependencies_": [],
          "input_": [
            "data/sentences_original"
          ],
          "output_": "data/sentences"
        },
        "process/ext_sentences_serialized": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"sentences_serialized\"\n\tdeepdive sql 'INSERT INTO sentences_serialized SELECT DISTINCT R0.docid AS \"sentences.R0.docid\", R0.sentid AS \"sentences.R0.sentid\", array_to_string(R0.wordindex, '\\''@@@@@'\\'') AS column_2, array_to_string(R0.words, '\\''@@@@@'\\'') AS column_3, array_to_string(R0.poses, '\\''@@@@@'\\'') AS column_4, array_to_string(R0.ners, '\\''@@@@@'\\'') AS column_5, array_to_string(R0.lemmas, '\\''@@@@@'\\'') AS column_6, array_to_string(R0.dep_paths, '\\''@@@@@'\\'') AS column_7, array_to_string(R0.dep_parents, '\\''@@@@@'\\'') AS column_8, array_to_string(R0.font, '\\''@@@@@'\\'') AS column_9, array_to_string(R0.layout, '\\''@@@@@'\\'') AS column_10\nFROM sentences R0\n        '\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_sentences"
          ],
          "input_relations": [
            "sentences"
          ],
          "output_relation": "sentences_serialized",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_sentences"
          ],
          "input_": [
            "data/sentences"
          ],
          "output_": "data/sentences_serialized"
        },
        "process/ext_taxon_per_doc": {
          "cmd": "\n\n\t# TODO use temporary table\n\tdeepdive create table \"taxon_per_doc\"\n\tdeepdive sql 'INSERT INTO taxon_per_doc SELECT R0.docid AS \"entity_taxon_candidate_local.R0.docid\", ARRAY_AGG(R0.entity) AS column_1, ARRAY_AGG(R0.type) AS column_2\nFROM entity_taxon_candidate_local R0\n        \n        GROUP BY R0.docid'\n\t# TODO rename temporary table to replace output_relation\n\t\n        ",
          "dependencies": [
            "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
          ],
          "input_relations": [
            "entity_taxon_candidate_local"
          ],
          "output_relation": "taxon_per_doc",
          "style": "cmd_extractor",
          "dependencies_": [
            "process/ext_entity_taxon_candidate_local_by_ext_entity_taxon_local"
          ],
          "input_": [
            "data/entity_taxon_candidate_local"
          ],
          "output_": "data/taxon_per_doc"
        },
        "process/grounding/variable_id_partition": {
          "dependencies_": [
            "data/entity_formation",
            "data/entity_location",
            "data/entity_taxon",
            "data/entity_temporal",
            "data/relation_formation",
            "data/relation_formation_global",
            "data/relation_formationtemporal",
            "data/relation_formationtemporal_global",
            "data/relation_taxonomy",
            "data/relation_taxonomy_global"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n        RANGE_BEGIN=0 \\\n        partition_id_range 'entity_formation' 'entity_location' 'entity_taxon' 'entity_temporal' 'relation_formation' 'relation_formation_global' 'relation_formationtemporal' 'relation_formationtemporal_global' 'relation_taxonomy' 'relation_taxonomy_global' | {\n            # record the base\n            variableCountTotal=0\n            while read table begin excludeEnd; do\n                varPath=\"$DEEPDIVE_GROUNDING_DIR\"/variable/${table}\n                mkdir -p \"$varPath\"\n                cd \"$varPath\"\n                echo $begin                      >id_begin\n                echo $excludeEnd                 >id_exclude_end\n                echo $(( $excludeEnd - $begin )) >count\n                variableCountTotal=$excludeEnd\n            done\n            # record the final count\n            echo $variableCountTotal >\"$DEEPDIVE_GROUNDING_DIR\"/variable_count\n        }\n        "
        },
        "process/grounding/variable/entity_formation/assign_id": {
          "dependencies_": [
            "process/grounding/variable_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='entity_formation'\n\n        cd \"$DEEPDIVE_GROUNDING_DIR\"/variable/${table}\n        baseId=$(cat id_begin)\n\n        # assign id to all rows according to the paritition\n        deepdive db assign_sequential_id $table 'id' $baseId\n\n        \n        "
        },
        "process/grounding/variable/entity_location/assign_id": {
          "dependencies_": [
            "process/grounding/variable_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='entity_location'\n\n        cd \"$DEEPDIVE_GROUNDING_DIR\"/variable/${table}\n        baseId=$(cat id_begin)\n\n        # assign id to all rows according to the paritition\n        deepdive db assign_sequential_id $table 'id' $baseId\n\n        \n        "
        },
        "process/grounding/variable/entity_taxon/assign_id": {
          "dependencies_": [
            "process/grounding/variable_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='entity_taxon'\n\n        cd \"$DEEPDIVE_GROUNDING_DIR\"/variable/${table}\n        baseId=$(cat id_begin)\n\n        # assign id to all rows according to the paritition\n        deepdive db assign_sequential_id $table 'id' $baseId\n\n        \n        "
        },
        "process/grounding/variable/entity_temporal/assign_id": {
          "dependencies_": [
            "process/grounding/variable_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='entity_temporal'\n\n        cd \"$DEEPDIVE_GROUNDING_DIR\"/variable/${table}\n        baseId=$(cat id_begin)\n\n        # assign id to all rows according to the paritition\n        deepdive db assign_sequential_id $table 'id' $baseId\n\n        \n        "
        },
        "process/grounding/variable/relation_formation/assign_id": {
          "dependencies_": [
            "process/grounding/variable_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='relation_formation'\n\n        cd \"$DEEPDIVE_GROUNDING_DIR\"/variable/${table}\n        baseId=$(cat id_begin)\n\n        # assign id to all rows according to the paritition\n        deepdive db assign_sequential_id $table 'id' $baseId\n\n        \n        "
        },
        "process/grounding/variable/relation_formation_global/assign_id": {
          "dependencies_": [
            "process/grounding/variable_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='relation_formation_global'\n\n        cd \"$DEEPDIVE_GROUNDING_DIR\"/variable/${table}\n        baseId=$(cat id_begin)\n\n        # assign id to all rows according to the paritition\n        deepdive db assign_sequential_id $table 'id' $baseId\n\n        \n        "
        },
        "process/grounding/variable/relation_formationtemporal/assign_id": {
          "dependencies_": [
            "process/grounding/variable_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='relation_formationtemporal'\n\n        cd \"$DEEPDIVE_GROUNDING_DIR\"/variable/${table}\n        baseId=$(cat id_begin)\n\n        # assign id to all rows according to the paritition\n        deepdive db assign_sequential_id $table 'id' $baseId\n\n        \n        "
        },
        "process/grounding/variable/relation_formationtemporal_global/assign_id": {
          "dependencies_": [
            "process/grounding/variable_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='relation_formationtemporal_global'\n\n        cd \"$DEEPDIVE_GROUNDING_DIR\"/variable/${table}\n        baseId=$(cat id_begin)\n\n        # assign id to all rows according to the paritition\n        deepdive db assign_sequential_id $table 'id' $baseId\n\n        \n        "
        },
        "process/grounding/variable/relation_taxonomy/assign_id": {
          "dependencies_": [
            "process/grounding/variable_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='relation_taxonomy'\n\n        cd \"$DEEPDIVE_GROUNDING_DIR\"/variable/${table}\n        baseId=$(cat id_begin)\n\n        # assign id to all rows according to the paritition\n        deepdive db assign_sequential_id $table 'id' $baseId\n\n        \n        "
        },
        "process/grounding/variable/relation_taxonomy_global/assign_id": {
          "dependencies_": [
            "process/grounding/variable_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='relation_taxonomy_global'\n\n        cd \"$DEEPDIVE_GROUNDING_DIR\"/variable/${table}\n        baseId=$(cat id_begin)\n\n        # assign id to all rows according to the paritition\n        deepdive db assign_sequential_id $table 'id' $baseId\n\n        \n        "
        },
        "process/grounding/variable_holdout": {
          "dependencies_": [
            "process/grounding/variable/entity_formation/assign_id",
            "process/grounding/variable/entity_location/assign_id",
            "process/grounding/variable/entity_taxon/assign_id",
            "process/grounding/variable/entity_temporal/assign_id",
            "process/grounding/variable/relation_formation/assign_id",
            "process/grounding/variable/relation_formation_global/assign_id",
            "process/grounding/variable/relation_formationtemporal/assign_id",
            "process/grounding/variable/relation_formationtemporal_global/assign_id",
            "process/grounding/variable/relation_taxonomy/assign_id",
            "process/grounding/variable/relation_taxonomy_global/assign_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n        deepdive create table 'dd_graph_variables_holdout' \\\n            variable_id:BIGINT:'PRIMARY KEY' \\\n            #\n        deepdive create table 'dd_graph_variables_observation' \\\n            variable_id:BIGINT:'PRIMARY KEY' \\\n            #\n        deepdive sql '\n                INSERT INTO \"dd_graph_variables_holdout\" SELECT \"id\"\nFROM \"entity_formation\"\n\nWHERE \"label\" IS NOT NULL AND RANDOM() < null;\n            '\ndeepdive sql '\n                INSERT INTO \"dd_graph_variables_holdout\" SELECT \"id\"\nFROM \"entity_location\"\n\nWHERE \"label\" IS NOT NULL AND RANDOM() < null;\n            '\ndeepdive sql '\n                INSERT INTO \"dd_graph_variables_holdout\" SELECT \"id\"\nFROM \"entity_taxon\"\n\nWHERE \"label\" IS NOT NULL AND RANDOM() < null;\n            '\ndeepdive sql '\n                INSERT INTO \"dd_graph_variables_holdout\" SELECT \"id\"\nFROM \"entity_temporal\"\n\nWHERE \"label\" IS NOT NULL AND RANDOM() < null;\n            '\ndeepdive sql '\n                INSERT INTO \"dd_graph_variables_holdout\" SELECT \"id\"\nFROM \"relation_formation\"\n\nWHERE \"label\" IS NOT NULL AND RANDOM() < null;\n            '\ndeepdive sql '\n                INSERT INTO \"dd_graph_variables_holdout\" SELECT \"id\"\nFROM \"relation_formation_global\"\n\nWHERE \"label\" IS NOT NULL AND RANDOM() < null;\n            '\ndeepdive sql '\n                INSERT INTO \"dd_graph_variables_holdout\" SELECT \"id\"\nFROM \"relation_formationtemporal\"\n\nWHERE \"label\" IS NOT NULL AND RANDOM() < null;\n            '\ndeepdive sql '\n                INSERT INTO \"dd_graph_variables_holdout\" SELECT \"id\"\nFROM \"relation_formationtemporal_global\"\n\nWHERE \"label\" IS NOT NULL AND RANDOM() < null;\n            '\ndeepdive sql '\n                INSERT INTO \"dd_graph_variables_holdout\" SELECT \"id\"\nFROM \"relation_taxonomy\"\n\nWHERE \"label\" IS NOT NULL AND RANDOM() < null;\n            '\ndeepdive sql '\n                INSERT INTO \"dd_graph_variables_holdout\" SELECT \"id\"\nFROM \"relation_taxonomy_global\"\n\nWHERE \"label\" IS NOT NULL AND RANDOM() < null;\n            '\n        "
        },
        "process/grounding/variable/entity_formation/dump": {
          "dependencies_": [
            "process/grounding/variable_holdout"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='entity_formation'\n\n        varPath=\"$DEEPDIVE_GROUNDING_DIR\"/variable/'entity_formation'\n        mkdir -p \"$varPath\"\n        cd \"$varPath\"\n        find . -name 'variables.part-*.bin.bz2' -exec rm -rf {} +\n        export DEEPDIVE_LOAD_FORMAT=tsv\n        export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n        # dump the variables, joining the holdout query to determine the type of each variable\n        deepdive compute execute \\\n            input_sql='SELECT \"id\"\n     , \"variable_role\"\n     , CASE WHEN variable_role = 0 THEN 0\n                          ELSE (CASE WHEN label THEN 1 ELSE 0 END) + 0.0\n                      END AS \"init_value\"\n     , \"variable_type\"\n     , \"cardinality\"\nFROM (SELECT \"id\" AS \"id\"\n     , CASE WHEN               observation.variable_id IS NOT NULL\n                                     AND variables.\"label\" IS NOT NULL THEN 2\n                                    WHEN               holdout.variable_id IS NOT NULL THEN 0\n                                    WHEN variables.\"label\" IS NOT NULL THEN 1\n                                                                                       ELSE 0\n                                END AS \"variable_role\"\n     , \"variables\".\"label\" AS \"label\"\n     , 0 AS \"variable_type\"\n     , 2 AS \"cardinality\"\nFROM \"entity_formation\" \"variables\"\nLEFT OUTER JOIN \"dd_graph_variables_holdout\" \"holdout\" ON \"variables\".\"id\" = \"holdout\".\"variable_id\" LEFT OUTER JOIN \"dd_graph_variables_observation\" \"observation\" ON \"variables\".\"id\" = \"observation\".\"variable_id\") \"variables\"' \\\n            command='\n                format_converter variable /dev/stdin >(pbzip2 >variables.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n            ' \\\n            output_relation=\n        "
        },
        "process/grounding/variable/entity_location/dump": {
          "dependencies_": [
            "process/grounding/variable_holdout"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='entity_location'\n\n        varPath=\"$DEEPDIVE_GROUNDING_DIR\"/variable/'entity_location'\n        mkdir -p \"$varPath\"\n        cd \"$varPath\"\n        find . -name 'variables.part-*.bin.bz2' -exec rm -rf {} +\n        export DEEPDIVE_LOAD_FORMAT=tsv\n        export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n        # dump the variables, joining the holdout query to determine the type of each variable\n        deepdive compute execute \\\n            input_sql='SELECT \"id\"\n     , \"variable_role\"\n     , CASE WHEN variable_role = 0 THEN 0\n                          ELSE (CASE WHEN label THEN 1 ELSE 0 END) + 0.0\n                      END AS \"init_value\"\n     , \"variable_type\"\n     , \"cardinality\"\nFROM (SELECT \"id\" AS \"id\"\n     , CASE WHEN               observation.variable_id IS NOT NULL\n                                     AND variables.\"label\" IS NOT NULL THEN 2\n                                    WHEN               holdout.variable_id IS NOT NULL THEN 0\n                                    WHEN variables.\"label\" IS NOT NULL THEN 1\n                                                                                       ELSE 0\n                                END AS \"variable_role\"\n     , \"variables\".\"label\" AS \"label\"\n     , 0 AS \"variable_type\"\n     , 2 AS \"cardinality\"\nFROM \"entity_location\" \"variables\"\nLEFT OUTER JOIN \"dd_graph_variables_holdout\" \"holdout\" ON \"variables\".\"id\" = \"holdout\".\"variable_id\" LEFT OUTER JOIN \"dd_graph_variables_observation\" \"observation\" ON \"variables\".\"id\" = \"observation\".\"variable_id\") \"variables\"' \\\n            command='\n                format_converter variable /dev/stdin >(pbzip2 >variables.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n            ' \\\n            output_relation=\n        "
        },
        "process/grounding/variable/entity_taxon/dump": {
          "dependencies_": [
            "process/grounding/variable_holdout"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='entity_taxon'\n\n        varPath=\"$DEEPDIVE_GROUNDING_DIR\"/variable/'entity_taxon'\n        mkdir -p \"$varPath\"\n        cd \"$varPath\"\n        find . -name 'variables.part-*.bin.bz2' -exec rm -rf {} +\n        export DEEPDIVE_LOAD_FORMAT=tsv\n        export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n        # dump the variables, joining the holdout query to determine the type of each variable\n        deepdive compute execute \\\n            input_sql='SELECT \"id\"\n     , \"variable_role\"\n     , CASE WHEN variable_role = 0 THEN 0\n                          ELSE (CASE WHEN label THEN 1 ELSE 0 END) + 0.0\n                      END AS \"init_value\"\n     , \"variable_type\"\n     , \"cardinality\"\nFROM (SELECT \"id\" AS \"id\"\n     , CASE WHEN               observation.variable_id IS NOT NULL\n                                     AND variables.\"label\" IS NOT NULL THEN 2\n                                    WHEN               holdout.variable_id IS NOT NULL THEN 0\n                                    WHEN variables.\"label\" IS NOT NULL THEN 1\n                                                                                       ELSE 0\n                                END AS \"variable_role\"\n     , \"variables\".\"label\" AS \"label\"\n     , 0 AS \"variable_type\"\n     , 2 AS \"cardinality\"\nFROM \"entity_taxon\" \"variables\"\nLEFT OUTER JOIN \"dd_graph_variables_holdout\" \"holdout\" ON \"variables\".\"id\" = \"holdout\".\"variable_id\" LEFT OUTER JOIN \"dd_graph_variables_observation\" \"observation\" ON \"variables\".\"id\" = \"observation\".\"variable_id\") \"variables\"' \\\n            command='\n                format_converter variable /dev/stdin >(pbzip2 >variables.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n            ' \\\n            output_relation=\n        "
        },
        "process/grounding/variable/entity_temporal/dump": {
          "dependencies_": [
            "process/grounding/variable_holdout"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='entity_temporal'\n\n        varPath=\"$DEEPDIVE_GROUNDING_DIR\"/variable/'entity_temporal'\n        mkdir -p \"$varPath\"\n        cd \"$varPath\"\n        find . -name 'variables.part-*.bin.bz2' -exec rm -rf {} +\n        export DEEPDIVE_LOAD_FORMAT=tsv\n        export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n        # dump the variables, joining the holdout query to determine the type of each variable\n        deepdive compute execute \\\n            input_sql='SELECT \"id\"\n     , \"variable_role\"\n     , CASE WHEN variable_role = 0 THEN 0\n                          ELSE (CASE WHEN label THEN 1 ELSE 0 END) + 0.0\n                      END AS \"init_value\"\n     , \"variable_type\"\n     , \"cardinality\"\nFROM (SELECT \"id\" AS \"id\"\n     , CASE WHEN               observation.variable_id IS NOT NULL\n                                     AND variables.\"label\" IS NOT NULL THEN 2\n                                    WHEN               holdout.variable_id IS NOT NULL THEN 0\n                                    WHEN variables.\"label\" IS NOT NULL THEN 1\n                                                                                       ELSE 0\n                                END AS \"variable_role\"\n     , \"variables\".\"label\" AS \"label\"\n     , 0 AS \"variable_type\"\n     , 2 AS \"cardinality\"\nFROM \"entity_temporal\" \"variables\"\nLEFT OUTER JOIN \"dd_graph_variables_holdout\" \"holdout\" ON \"variables\".\"id\" = \"holdout\".\"variable_id\" LEFT OUTER JOIN \"dd_graph_variables_observation\" \"observation\" ON \"variables\".\"id\" = \"observation\".\"variable_id\") \"variables\"' \\\n            command='\n                format_converter variable /dev/stdin >(pbzip2 >variables.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n            ' \\\n            output_relation=\n        "
        },
        "process/grounding/variable/relation_formation/dump": {
          "dependencies_": [
            "process/grounding/variable_holdout"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='relation_formation'\n\n        varPath=\"$DEEPDIVE_GROUNDING_DIR\"/variable/'relation_formation'\n        mkdir -p \"$varPath\"\n        cd \"$varPath\"\n        find . -name 'variables.part-*.bin.bz2' -exec rm -rf {} +\n        export DEEPDIVE_LOAD_FORMAT=tsv\n        export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n        # dump the variables, joining the holdout query to determine the type of each variable\n        deepdive compute execute \\\n            input_sql='SELECT \"id\"\n     , \"variable_role\"\n     , CASE WHEN variable_role = 0 THEN 0\n                          ELSE (CASE WHEN label THEN 1 ELSE 0 END) + 0.0\n                      END AS \"init_value\"\n     , \"variable_type\"\n     , \"cardinality\"\nFROM (SELECT \"id\" AS \"id\"\n     , CASE WHEN               observation.variable_id IS NOT NULL\n                                     AND variables.\"label\" IS NOT NULL THEN 2\n                                    WHEN               holdout.variable_id IS NOT NULL THEN 0\n                                    WHEN variables.\"label\" IS NOT NULL THEN 1\n                                                                                       ELSE 0\n                                END AS \"variable_role\"\n     , \"variables\".\"label\" AS \"label\"\n     , 0 AS \"variable_type\"\n     , 2 AS \"cardinality\"\nFROM \"relation_formation\" \"variables\"\nLEFT OUTER JOIN \"dd_graph_variables_holdout\" \"holdout\" ON \"variables\".\"id\" = \"holdout\".\"variable_id\" LEFT OUTER JOIN \"dd_graph_variables_observation\" \"observation\" ON \"variables\".\"id\" = \"observation\".\"variable_id\") \"variables\"' \\\n            command='\n                format_converter variable /dev/stdin >(pbzip2 >variables.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n            ' \\\n            output_relation=\n        "
        },
        "process/grounding/variable/relation_formation_global/dump": {
          "dependencies_": [
            "process/grounding/variable_holdout"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='relation_formation_global'\n\n        varPath=\"$DEEPDIVE_GROUNDING_DIR\"/variable/'relation_formation_global'\n        mkdir -p \"$varPath\"\n        cd \"$varPath\"\n        find . -name 'variables.part-*.bin.bz2' -exec rm -rf {} +\n        export DEEPDIVE_LOAD_FORMAT=tsv\n        export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n        # dump the variables, joining the holdout query to determine the type of each variable\n        deepdive compute execute \\\n            input_sql='SELECT \"id\"\n     , \"variable_role\"\n     , CASE WHEN variable_role = 0 THEN 0\n                          ELSE (CASE WHEN label THEN 1 ELSE 0 END) + 0.0\n                      END AS \"init_value\"\n     , \"variable_type\"\n     , \"cardinality\"\nFROM (SELECT \"id\" AS \"id\"\n     , CASE WHEN               observation.variable_id IS NOT NULL\n                                     AND variables.\"label\" IS NOT NULL THEN 2\n                                    WHEN               holdout.variable_id IS NOT NULL THEN 0\n                                    WHEN variables.\"label\" IS NOT NULL THEN 1\n                                                                                       ELSE 0\n                                END AS \"variable_role\"\n     , \"variables\".\"label\" AS \"label\"\n     , 0 AS \"variable_type\"\n     , 2 AS \"cardinality\"\nFROM \"relation_formation_global\" \"variables\"\nLEFT OUTER JOIN \"dd_graph_variables_holdout\" \"holdout\" ON \"variables\".\"id\" = \"holdout\".\"variable_id\" LEFT OUTER JOIN \"dd_graph_variables_observation\" \"observation\" ON \"variables\".\"id\" = \"observation\".\"variable_id\") \"variables\"' \\\n            command='\n                format_converter variable /dev/stdin >(pbzip2 >variables.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n            ' \\\n            output_relation=\n        "
        },
        "process/grounding/variable/relation_formationtemporal/dump": {
          "dependencies_": [
            "process/grounding/variable_holdout"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='relation_formationtemporal'\n\n        varPath=\"$DEEPDIVE_GROUNDING_DIR\"/variable/'relation_formationtemporal'\n        mkdir -p \"$varPath\"\n        cd \"$varPath\"\n        find . -name 'variables.part-*.bin.bz2' -exec rm -rf {} +\n        export DEEPDIVE_LOAD_FORMAT=tsv\n        export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n        # dump the variables, joining the holdout query to determine the type of each variable\n        deepdive compute execute \\\n            input_sql='SELECT \"id\"\n     , \"variable_role\"\n     , CASE WHEN variable_role = 0 THEN 0\n                          ELSE (CASE WHEN label THEN 1 ELSE 0 END) + 0.0\n                      END AS \"init_value\"\n     , \"variable_type\"\n     , \"cardinality\"\nFROM (SELECT \"id\" AS \"id\"\n     , CASE WHEN               observation.variable_id IS NOT NULL\n                                     AND variables.\"label\" IS NOT NULL THEN 2\n                                    WHEN               holdout.variable_id IS NOT NULL THEN 0\n                                    WHEN variables.\"label\" IS NOT NULL THEN 1\n                                                                                       ELSE 0\n                                END AS \"variable_role\"\n     , \"variables\".\"label\" AS \"label\"\n     , 0 AS \"variable_type\"\n     , 2 AS \"cardinality\"\nFROM \"relation_formationtemporal\" \"variables\"\nLEFT OUTER JOIN \"dd_graph_variables_holdout\" \"holdout\" ON \"variables\".\"id\" = \"holdout\".\"variable_id\" LEFT OUTER JOIN \"dd_graph_variables_observation\" \"observation\" ON \"variables\".\"id\" = \"observation\".\"variable_id\") \"variables\"' \\\n            command='\n                format_converter variable /dev/stdin >(pbzip2 >variables.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n            ' \\\n            output_relation=\n        "
        },
        "process/grounding/variable/relation_formationtemporal_global/dump": {
          "dependencies_": [
            "process/grounding/variable_holdout"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='relation_formationtemporal_global'\n\n        varPath=\"$DEEPDIVE_GROUNDING_DIR\"/variable/'relation_formationtemporal_global'\n        mkdir -p \"$varPath\"\n        cd \"$varPath\"\n        find . -name 'variables.part-*.bin.bz2' -exec rm -rf {} +\n        export DEEPDIVE_LOAD_FORMAT=tsv\n        export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n        # dump the variables, joining the holdout query to determine the type of each variable\n        deepdive compute execute \\\n            input_sql='SELECT \"id\"\n     , \"variable_role\"\n     , CASE WHEN variable_role = 0 THEN 0\n                          ELSE (CASE WHEN label THEN 1 ELSE 0 END) + 0.0\n                      END AS \"init_value\"\n     , \"variable_type\"\n     , \"cardinality\"\nFROM (SELECT \"id\" AS \"id\"\n     , CASE WHEN               observation.variable_id IS NOT NULL\n                                     AND variables.\"label\" IS NOT NULL THEN 2\n                                    WHEN               holdout.variable_id IS NOT NULL THEN 0\n                                    WHEN variables.\"label\" IS NOT NULL THEN 1\n                                                                                       ELSE 0\n                                END AS \"variable_role\"\n     , \"variables\".\"label\" AS \"label\"\n     , 0 AS \"variable_type\"\n     , 2 AS \"cardinality\"\nFROM \"relation_formationtemporal_global\" \"variables\"\nLEFT OUTER JOIN \"dd_graph_variables_holdout\" \"holdout\" ON \"variables\".\"id\" = \"holdout\".\"variable_id\" LEFT OUTER JOIN \"dd_graph_variables_observation\" \"observation\" ON \"variables\".\"id\" = \"observation\".\"variable_id\") \"variables\"' \\\n            command='\n                format_converter variable /dev/stdin >(pbzip2 >variables.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n            ' \\\n            output_relation=\n        "
        },
        "process/grounding/variable/relation_taxonomy/dump": {
          "dependencies_": [
            "process/grounding/variable_holdout"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='relation_taxonomy'\n\n        varPath=\"$DEEPDIVE_GROUNDING_DIR\"/variable/'relation_taxonomy'\n        mkdir -p \"$varPath\"\n        cd \"$varPath\"\n        find . -name 'variables.part-*.bin.bz2' -exec rm -rf {} +\n        export DEEPDIVE_LOAD_FORMAT=tsv\n        export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n        # dump the variables, joining the holdout query to determine the type of each variable\n        deepdive compute execute \\\n            input_sql='SELECT \"id\"\n     , \"variable_role\"\n     , CASE WHEN variable_role = 0 THEN 0\n                          ELSE (CASE WHEN label THEN 1 ELSE 0 END) + 0.0\n                      END AS \"init_value\"\n     , \"variable_type\"\n     , \"cardinality\"\nFROM (SELECT \"id\" AS \"id\"\n     , CASE WHEN               observation.variable_id IS NOT NULL\n                                     AND variables.\"label\" IS NOT NULL THEN 2\n                                    WHEN               holdout.variable_id IS NOT NULL THEN 0\n                                    WHEN variables.\"label\" IS NOT NULL THEN 1\n                                                                                       ELSE 0\n                                END AS \"variable_role\"\n     , \"variables\".\"label\" AS \"label\"\n     , 0 AS \"variable_type\"\n     , 2 AS \"cardinality\"\nFROM \"relation_taxonomy\" \"variables\"\nLEFT OUTER JOIN \"dd_graph_variables_holdout\" \"holdout\" ON \"variables\".\"id\" = \"holdout\".\"variable_id\" LEFT OUTER JOIN \"dd_graph_variables_observation\" \"observation\" ON \"variables\".\"id\" = \"observation\".\"variable_id\") \"variables\"' \\\n            command='\n                format_converter variable /dev/stdin >(pbzip2 >variables.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n            ' \\\n            output_relation=\n        "
        },
        "process/grounding/variable/relation_taxonomy_global/dump": {
          "dependencies_": [
            "process/grounding/variable_holdout"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        table='relation_taxonomy_global'\n\n        varPath=\"$DEEPDIVE_GROUNDING_DIR\"/variable/'relation_taxonomy_global'\n        mkdir -p \"$varPath\"\n        cd \"$varPath\"\n        find . -name 'variables.part-*.bin.bz2' -exec rm -rf {} +\n        export DEEPDIVE_LOAD_FORMAT=tsv\n        export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n        # dump the variables, joining the holdout query to determine the type of each variable\n        deepdive compute execute \\\n            input_sql='SELECT \"id\"\n     , \"variable_role\"\n     , CASE WHEN variable_role = 0 THEN 0\n                          ELSE (CASE WHEN label THEN 1 ELSE 0 END) + 0.0\n                      END AS \"init_value\"\n     , \"variable_type\"\n     , \"cardinality\"\nFROM (SELECT \"id\" AS \"id\"\n     , CASE WHEN               observation.variable_id IS NOT NULL\n                                     AND variables.\"label\" IS NOT NULL THEN 2\n                                    WHEN               holdout.variable_id IS NOT NULL THEN 0\n                                    WHEN variables.\"label\" IS NOT NULL THEN 1\n                                                                                       ELSE 0\n                                END AS \"variable_role\"\n     , \"variables\".\"label\" AS \"label\"\n     , 0 AS \"variable_type\"\n     , 2 AS \"cardinality\"\nFROM \"relation_taxonomy_global\" \"variables\"\nLEFT OUTER JOIN \"dd_graph_variables_holdout\" \"holdout\" ON \"variables\".\"id\" = \"holdout\".\"variable_id\" LEFT OUTER JOIN \"dd_graph_variables_observation\" \"observation\" ON \"variables\".\"id\" = \"observation\".\"variable_id\") \"variables\"' \\\n            command='\n                format_converter variable /dev/stdin >(pbzip2 >variables.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n            ' \\\n            output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_entity_formation/materialize": {
          "dependencies_": [
            "process/grounding/variable/entity_formation/assign_id"
          ],
          "input_": [
            "data/entity_formation_candidate"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            # materialize factors using user input_query that pulls in assigned ids to involved variables\n            deepdive create table 'dd_factors_inf_istrue_entity_formation' as '\n          SELECT R0.id AS \"entity_formation.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_formation R0, entity_formation_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov '\n\n            # find distinct weights for the factors into a separate table\n            deepdive create table 'dd_weights_inf_istrue_entity_formation' as 'SELECT \"dd_weight_column_0\"\n     , false AS \"isfixed\"\n     , 0 AS \"initvalue\"\n     , -1 AS \"id\"\nFROM \"dd_factors_inf_istrue_entity_formation\"\n\n\nGROUP BY \"dd_weight_column_0\"'\n        "
        },
        "process/grounding/factor/inf_istrue_entity_location/materialize": {
          "dependencies_": [
            "process/grounding/variable/entity_location/assign_id"
          ],
          "input_": [
            "data/entity_location_candidate"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            # materialize factors using user input_query that pulls in assigned ids to involved variables\n            deepdive create table 'dd_factors_inf_istrue_entity_location' as '\n          SELECT R0.id AS \"entity_location.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_location R0, entity_location_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov '\n\n            # find distinct weights for the factors into a separate table\n            deepdive create table 'dd_weights_inf_istrue_entity_location' as 'SELECT \"dd_weight_column_0\"\n     , false AS \"isfixed\"\n     , 0 AS \"initvalue\"\n     , -1 AS \"id\"\nFROM \"dd_factors_inf_istrue_entity_location\"\n\n\nGROUP BY \"dd_weight_column_0\"'\n        "
        },
        "process/grounding/factor/inf_istrue_entity_taxon/materialize": {
          "dependencies_": [
            "process/grounding/variable/entity_taxon/assign_id"
          ],
          "input_": [
            "data/entity_taxon_candidate"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            # materialize factors using user input_query that pulls in assigned ids to involved variables\n            deepdive create table 'dd_factors_inf_istrue_entity_taxon' as '\n          SELECT R0.id AS \"entity_taxon.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_taxon R0, entity_taxon_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.author_year = R0.author_year  AND R1.prov = R0.prov '\n\n            # find distinct weights for the factors into a separate table\n            deepdive create table 'dd_weights_inf_istrue_entity_taxon' as 'SELECT \"dd_weight_column_0\"\n     , false AS \"isfixed\"\n     , 0 AS \"initvalue\"\n     , -1 AS \"id\"\nFROM \"dd_factors_inf_istrue_entity_taxon\"\n\n\nGROUP BY \"dd_weight_column_0\"'\n        "
        },
        "process/grounding/factor/inf_istrue_entity_temporal/materialize": {
          "dependencies_": [
            "process/grounding/variable/entity_temporal/assign_id"
          ],
          "input_": [
            "data/entity_temporal_candidate"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            # materialize factors using user input_query that pulls in assigned ids to involved variables\n            deepdive create table 'dd_factors_inf_istrue_entity_temporal' as '\n          SELECT R0.id AS \"entity_temporal.R0.id\" , R0.type AS \"dd_weight_column_0\" \n          FROM entity_temporal R0, entity_temporal_candidate R1\n        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov '\n\n            # find distinct weights for the factors into a separate table\n            deepdive create table 'dd_weights_inf_istrue_entity_temporal' as 'SELECT \"dd_weight_column_0\"\n     , false AS \"isfixed\"\n     , 0 AS \"initvalue\"\n     , -1 AS \"id\"\nFROM \"dd_factors_inf_istrue_entity_temporal\"\n\n\nGROUP BY \"dd_weight_column_0\"'\n        "
        },
        "process/grounding/factor/inf_istrue_relation_formation/materialize": {
          "dependencies_": [
            "process/grounding/variable/relation_formation/assign_id"
          ],
          "input_": [
            "data/relation_candidates"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            # materialize factors using user input_query that pulls in assigned ids to involved variables\n            deepdive create table 'dd_factors_inf_istrue_relation_formation' as '\n          SELECT R0.id AS \"relation_formation.R0.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_formation R0, relation_candidates R1\n        WHERE R1.docid = R0.docid  AND R1.type = '\\''FORMATION'\\'' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 '\n\n            # find distinct weights for the factors into a separate table\n            deepdive create table 'dd_weights_inf_istrue_relation_formation' as 'SELECT \"dd_weight_column_0\"\n     , false AS \"isfixed\"\n     , 0 AS \"initvalue\"\n     , -1 AS \"id\"\nFROM \"dd_factors_inf_istrue_relation_formation\"\n\n\nGROUP BY \"dd_weight_column_0\"'\n        "
        },
        "process/grounding/factor/inf_istrue_relation_formation_global/materialize": {
          "dependencies_": [
            "process/grounding/variable/relation_formation_global/assign_id",
            "process/grounding/variable/relation_formation/assign_id"
          ],
          "input_": [
            "data/relation_candidates"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            # materialize factors using user input_query that pulls in assigned ids to involved variables\n            deepdive create table 'dd_factors_inf_istrue_relation_formation_global' as '\n          SELECT R0.id AS \"relation_formation_global.R0.id\" , R1.id AS \"relation_formation.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_formation_global R0, relation_formation R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 '\n\n            # find distinct weights for the factors into a separate table\n            deepdive create table 'dd_weights_inf_istrue_relation_formation_global' as 'SELECT \"dd_weight_column_0\"\n     , false AS \"isfixed\"\n     , 0 AS \"initvalue\"\n     , -1 AS \"id\"\nFROM \"dd_factors_inf_istrue_relation_formation_global\"\n\n\nGROUP BY \"dd_weight_column_0\"'\n        "
        },
        "process/grounding/factor/inf_istrue_relation_formationtemporal/materialize": {
          "dependencies_": [
            "process/grounding/variable/relation_formationtemporal/assign_id",
            "process/grounding/variable/entity_formation/assign_id",
            "process/grounding/variable/entity_temporal/assign_id"
          ],
          "input_": [
            "data/relation_candidates"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            # materialize factors using user input_query that pulls in assigned ids to involved variables\n            deepdive create table 'dd_factors_inf_istrue_relation_formationtemporal' as '\n          SELECT R0.id AS \"relation_formationtemporal.R0.id\" , R2.id AS \"entity_formation.R2.id\" , R3.id AS \"entity_temporal.R3.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_formationtemporal R0, relation_candidates R1, entity_formation R2, entity_temporal R3\n        WHERE R1.docid = R0.docid  AND R1.type = '\\''FORMATIONINTERVAL'\\'' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2  AND R2.docid = R0.docid  AND R2.eid = R0.eid1  AND R2.entity = R0.entity1  AND R3.docid = R0.docid  AND R3.eid = R0.eid2  AND R3.entity = R0.entity2 '\n\n            # find distinct weights for the factors into a separate table\n            deepdive create table 'dd_weights_inf_istrue_relation_formationtemporal' as 'SELECT \"dd_weight_column_0\"\n     , false AS \"isfixed\"\n     , 0 AS \"initvalue\"\n     , -1 AS \"id\"\nFROM \"dd_factors_inf_istrue_relation_formationtemporal\"\n\n\nGROUP BY \"dd_weight_column_0\"'\n        "
        },
        "process/grounding/factor/inf_istrue_relation_formationtemporal_global/materialize": {
          "dependencies_": [
            "process/grounding/variable/relation_formationtemporal_global/assign_id",
            "process/grounding/variable/relation_formationtemporal/assign_id"
          ],
          "input_": [
            "data/relation_candidates"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            # materialize factors using user input_query that pulls in assigned ids to involved variables\n            deepdive create table 'dd_factors_inf_istrue_relation_formationtemporal_global' as '\n          SELECT R0.id AS \"relation_formationtemporal_global.R0.id\" , R1.id AS \"relation_formationtemporal.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_formationtemporal_global R0, relation_formationtemporal R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 '\n\n            # find distinct weights for the factors into a separate table\n            deepdive create table 'dd_weights_inf_istrue_relation_formationtemporal_global' as 'SELECT \"dd_weight_column_0\"\n     , false AS \"isfixed\"\n     , 0 AS \"initvalue\"\n     , -1 AS \"id\"\nFROM \"dd_factors_inf_istrue_relation_formationtemporal_global\"\n\n\nGROUP BY \"dd_weight_column_0\"'\n        "
        },
        "process/grounding/factor/inf_istrue_relation_taxonomy/materialize": {
          "dependencies_": [
            "process/grounding/variable/relation_taxonomy/assign_id"
          ],
          "input_": [
            "data/relation_candidates"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            # materialize factors using user input_query that pulls in assigned ids to involved variables\n            deepdive create table 'dd_factors_inf_istrue_relation_taxonomy' as '\n          SELECT R0.id AS \"relation_taxonomy.R0.id\" , R1.features AS \"dd_weight_column_0\" \n          FROM relation_taxonomy R0, relation_candidates R1\n        WHERE R1.docid = R0.docid  AND R1.type = '\\''TAXONOMY'\\'' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 '\n\n            # find distinct weights for the factors into a separate table\n            deepdive create table 'dd_weights_inf_istrue_relation_taxonomy' as 'SELECT \"dd_weight_column_0\"\n     , false AS \"isfixed\"\n     , 0 AS \"initvalue\"\n     , -1 AS \"id\"\nFROM \"dd_factors_inf_istrue_relation_taxonomy\"\n\n\nGROUP BY \"dd_weight_column_0\"'\n        "
        },
        "process/grounding/factor/inf_istrue_relation_taxonomy_global/materialize": {
          "dependencies_": [
            "process/grounding/variable/relation_taxonomy_global/assign_id",
            "process/grounding/variable/relation_taxonomy/assign_id"
          ],
          "input_": [
            "data/relation_candidates"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            # materialize factors using user input_query that pulls in assigned ids to involved variables\n            deepdive create table 'dd_factors_inf_istrue_relation_taxonomy_global' as '\n          SELECT R0.id AS \"relation_taxonomy_global.R0.id\" , R1.id AS \"relation_taxonomy.R1.id\" , R2.features AS \"dd_weight_column_0\" \n          FROM relation_taxonomy_global R0, relation_taxonomy R1, relation_candidates R2\n        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 '\n\n            # find distinct weights for the factors into a separate table\n            deepdive create table 'dd_weights_inf_istrue_relation_taxonomy_global' as 'SELECT \"dd_weight_column_0\"\n     , false AS \"isfixed\"\n     , 0 AS \"initvalue\"\n     , -1 AS \"id\"\nFROM \"dd_factors_inf_istrue_relation_taxonomy_global\"\n\n\nGROUP BY \"dd_weight_column_0\"'\n        "
        },
        "process/grounding/weight_id_partition": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_entity_formation/materialize",
            "process/grounding/factor/inf_istrue_entity_location/materialize",
            "process/grounding/factor/inf_istrue_entity_taxon/materialize",
            "process/grounding/factor/inf_istrue_entity_temporal/materialize",
            "process/grounding/factor/inf_istrue_relation_formation/materialize",
            "process/grounding/factor/inf_istrue_relation_formation_global/materialize",
            "process/grounding/factor/inf_istrue_relation_formationtemporal/materialize",
            "process/grounding/factor/inf_istrue_relation_formationtemporal_global/materialize",
            "process/grounding/factor/inf_istrue_relation_taxonomy/materialize",
            "process/grounding/factor/inf_istrue_relation_taxonomy_global/materialize"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n        # partition the id range for weights\n        RANGE_BEGIN=0 RANGE_STEP=1 \\\n        partition_id_range 'dd_weights_inf_istrue_entity_formation' 'dd_weights_inf_istrue_entity_location' 'dd_weights_inf_istrue_entity_taxon' 'dd_weights_inf_istrue_entity_temporal' 'dd_weights_inf_istrue_relation_formation' 'dd_weights_inf_istrue_relation_formation_global' 'dd_weights_inf_istrue_relation_formationtemporal' 'dd_weights_inf_istrue_relation_formationtemporal_global' 'dd_weights_inf_istrue_relation_taxonomy' 'dd_weights_inf_istrue_relation_taxonomy_global' | {\n            weightsCountTotal=0\n            while read table begin excludeEnd; do\n                factor=${table#'dd_weights_'}\n                facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/${factor}\n                mkdir -p \"$facPath\"\n                cd \"$facPath\"\n                echo $begin                      >weights_id_begin\n                echo $excludeEnd                 >weights_id_exclude_end\n                echo $(( $excludeEnd - $begin )) >weights_count\n                weightsCountTotal=$excludeEnd\n            done\n            echo $weightsCountTotal >\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights_count\n        }\n        "
        },
        "process/grounding/global_weight_table": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_entity_formation/materialize",
            "process/grounding/factor/inf_istrue_entity_location/materialize",
            "process/grounding/factor/inf_istrue_entity_taxon/materialize",
            "process/grounding/factor/inf_istrue_entity_temporal/materialize",
            "process/grounding/factor/inf_istrue_relation_formation/materialize",
            "process/grounding/factor/inf_istrue_relation_formation_global/materialize",
            "process/grounding/factor/inf_istrue_relation_formationtemporal/materialize",
            "process/grounding/factor/inf_istrue_relation_formationtemporal_global/materialize",
            "process/grounding/factor/inf_istrue_relation_taxonomy/materialize",
            "process/grounding/factor/inf_istrue_relation_taxonomy_global/materialize"
          ],
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n        # set up a union view for all weight tables (\"dd_graph_weights\")\n        deepdive create view 'dd_graph_weights' as '(SELECT \"id\"\n     , \"isfixed\"\n     , \"initvalue\"\n     , '\\''inf_istrue_entity_formation-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END AS \"description\"\n     , NULL AS \"categories\"\nFROM \"dd_weights_inf_istrue_entity_formation\")\nUNION ALL\n(SELECT \"id\"\n     , \"isfixed\"\n     , \"initvalue\"\n     , '\\''inf_istrue_entity_location-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END AS \"description\"\n     , NULL AS \"categories\"\nFROM \"dd_weights_inf_istrue_entity_location\")\nUNION ALL\n(SELECT \"id\"\n     , \"isfixed\"\n     , \"initvalue\"\n     , '\\''inf_istrue_entity_taxon-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END AS \"description\"\n     , NULL AS \"categories\"\nFROM \"dd_weights_inf_istrue_entity_taxon\")\nUNION ALL\n(SELECT \"id\"\n     , \"isfixed\"\n     , \"initvalue\"\n     , '\\''inf_istrue_entity_temporal-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END AS \"description\"\n     , NULL AS \"categories\"\nFROM \"dd_weights_inf_istrue_entity_temporal\")\nUNION ALL\n(SELECT \"id\"\n     , \"isfixed\"\n     , \"initvalue\"\n     , '\\''inf_istrue_relation_formation-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END AS \"description\"\n     , NULL AS \"categories\"\nFROM \"dd_weights_inf_istrue_relation_formation\")\nUNION ALL\n(SELECT \"id\"\n     , \"isfixed\"\n     , \"initvalue\"\n     , '\\''inf_istrue_relation_formation_global-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END AS \"description\"\n     , NULL AS \"categories\"\nFROM \"dd_weights_inf_istrue_relation_formation_global\")\nUNION ALL\n(SELECT \"id\"\n     , \"isfixed\"\n     , \"initvalue\"\n     , '\\''inf_istrue_relation_formationtemporal-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END AS \"description\"\n     , NULL AS \"categories\"\nFROM \"dd_weights_inf_istrue_relation_formationtemporal\")\nUNION ALL\n(SELECT \"id\"\n     , \"isfixed\"\n     , \"initvalue\"\n     , '\\''inf_istrue_relation_formationtemporal_global-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END AS \"description\"\n     , NULL AS \"categories\"\nFROM \"dd_weights_inf_istrue_relation_formationtemporal_global\")\nUNION ALL\n(SELECT \"id\"\n     , \"isfixed\"\n     , \"initvalue\"\n     , '\\''inf_istrue_relation_taxonomy-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END AS \"description\"\n     , NULL AS \"categories\"\nFROM \"dd_weights_inf_istrue_relation_taxonomy\")\nUNION ALL\n(SELECT \"id\"\n     , \"isfixed\"\n     , \"initvalue\"\n     , '\\''inf_istrue_relation_taxonomy_global-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END AS \"description\"\n     , NULL AS \"categories\"\nFROM \"dd_weights_inf_istrue_relation_taxonomy_global\")'\n        "
        },
        "process/grounding/factor/inf_istrue_entity_formation/assign_weight_id": {
          "dependencies_": [
            "process/grounding/weight_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            cd \"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_entity_formation'\n            baseId=$(cat weights_id_begin)\n            inc=1\n            \n\n            # assign weight ids according to the partition\n            deepdive db assign_sequential_id 'dd_weights_inf_istrue_entity_formation' id $baseId $inc\n\n            \n        "
        },
        "process/grounding/factor/inf_istrue_entity_location/assign_weight_id": {
          "dependencies_": [
            "process/grounding/weight_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            cd \"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_entity_location'\n            baseId=$(cat weights_id_begin)\n            inc=1\n            \n\n            # assign weight ids according to the partition\n            deepdive db assign_sequential_id 'dd_weights_inf_istrue_entity_location' id $baseId $inc\n\n            \n        "
        },
        "process/grounding/factor/inf_istrue_entity_taxon/assign_weight_id": {
          "dependencies_": [
            "process/grounding/weight_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            cd \"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_entity_taxon'\n            baseId=$(cat weights_id_begin)\n            inc=1\n            \n\n            # assign weight ids according to the partition\n            deepdive db assign_sequential_id 'dd_weights_inf_istrue_entity_taxon' id $baseId $inc\n\n            \n        "
        },
        "process/grounding/factor/inf_istrue_entity_temporal/assign_weight_id": {
          "dependencies_": [
            "process/grounding/weight_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            cd \"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_entity_temporal'\n            baseId=$(cat weights_id_begin)\n            inc=1\n            \n\n            # assign weight ids according to the partition\n            deepdive db assign_sequential_id 'dd_weights_inf_istrue_entity_temporal' id $baseId $inc\n\n            \n        "
        },
        "process/grounding/factor/inf_istrue_relation_formation/assign_weight_id": {
          "dependencies_": [
            "process/grounding/weight_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            cd \"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_formation'\n            baseId=$(cat weights_id_begin)\n            inc=1\n            \n\n            # assign weight ids according to the partition\n            deepdive db assign_sequential_id 'dd_weights_inf_istrue_relation_formation' id $baseId $inc\n\n            \n        "
        },
        "process/grounding/factor/inf_istrue_relation_formation_global/assign_weight_id": {
          "dependencies_": [
            "process/grounding/weight_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            cd \"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_formation_global'\n            baseId=$(cat weights_id_begin)\n            inc=1\n            \n\n            # assign weight ids according to the partition\n            deepdive db assign_sequential_id 'dd_weights_inf_istrue_relation_formation_global' id $baseId $inc\n\n            \n        "
        },
        "process/grounding/factor/inf_istrue_relation_formationtemporal/assign_weight_id": {
          "dependencies_": [
            "process/grounding/weight_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            cd \"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_formationtemporal'\n            baseId=$(cat weights_id_begin)\n            inc=1\n            \n\n            # assign weight ids according to the partition\n            deepdive db assign_sequential_id 'dd_weights_inf_istrue_relation_formationtemporal' id $baseId $inc\n\n            \n        "
        },
        "process/grounding/factor/inf_istrue_relation_formationtemporal_global/assign_weight_id": {
          "dependencies_": [
            "process/grounding/weight_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            cd \"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_formationtemporal_global'\n            baseId=$(cat weights_id_begin)\n            inc=1\n            \n\n            # assign weight ids according to the partition\n            deepdive db assign_sequential_id 'dd_weights_inf_istrue_relation_formationtemporal_global' id $baseId $inc\n\n            \n        "
        },
        "process/grounding/factor/inf_istrue_relation_taxonomy/assign_weight_id": {
          "dependencies_": [
            "process/grounding/weight_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            cd \"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_taxonomy'\n            baseId=$(cat weights_id_begin)\n            inc=1\n            \n\n            # assign weight ids according to the partition\n            deepdive db assign_sequential_id 'dd_weights_inf_istrue_relation_taxonomy' id $baseId $inc\n\n            \n        "
        },
        "process/grounding/factor/inf_istrue_relation_taxonomy_global/assign_weight_id": {
          "dependencies_": [
            "process/grounding/weight_id_partition"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n\n            cd \"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_taxonomy_global'\n            baseId=$(cat weights_id_begin)\n            inc=1\n            \n\n            # assign weight ids according to the partition\n            deepdive db assign_sequential_id 'dd_weights_inf_istrue_relation_taxonomy_global' id $baseId $inc\n\n            \n        "
        },
        "process/grounding/factor/inf_istrue_entity_formation/dump": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_entity_formation/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_entity_formation'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'factors.part-*.bin.bz2' \\\n                    -o -name 'nfactors.part-*'         \\\n                    -o -name   'nedges.part-*'         \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # dump the factors joining the assigned weight ids, converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql='SELECT \"weights\".\"id\" AS \"weight_id\"\n     , \"factors\".\"entity_formation.R0.id\"\nFROM \"dd_factors_inf_istrue_entity_formation\" \"factors\", \"dd_weights_inf_istrue_entity_formation\" \"weights\"\n\nWHERE \"factors\".\"dd_weight_column_0\" = \"weights\".\"dd_weight_column_0\"' \\\n                command='\n                    # also record the factor count\n                    tee >(wc -l >nfactors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}) |\n                    format_converter factor /dev/stdin >(pbzip2 >factors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2) 0 1 original 1 |\n                    # and the edge count\n                    tee nedges.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_entity_location/dump": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_entity_location/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_entity_location'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'factors.part-*.bin.bz2' \\\n                    -o -name 'nfactors.part-*'         \\\n                    -o -name   'nedges.part-*'         \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # dump the factors joining the assigned weight ids, converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql='SELECT \"weights\".\"id\" AS \"weight_id\"\n     , \"factors\".\"entity_location.R0.id\"\nFROM \"dd_factors_inf_istrue_entity_location\" \"factors\", \"dd_weights_inf_istrue_entity_location\" \"weights\"\n\nWHERE \"factors\".\"dd_weight_column_0\" = \"weights\".\"dd_weight_column_0\"' \\\n                command='\n                    # also record the factor count\n                    tee >(wc -l >nfactors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}) |\n                    format_converter factor /dev/stdin >(pbzip2 >factors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2) 0 1 original 1 |\n                    # and the edge count\n                    tee nedges.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_entity_taxon/dump": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_entity_taxon/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_entity_taxon'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'factors.part-*.bin.bz2' \\\n                    -o -name 'nfactors.part-*'         \\\n                    -o -name   'nedges.part-*'         \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # dump the factors joining the assigned weight ids, converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql='SELECT \"weights\".\"id\" AS \"weight_id\"\n     , \"factors\".\"entity_taxon.R0.id\"\nFROM \"dd_factors_inf_istrue_entity_taxon\" \"factors\", \"dd_weights_inf_istrue_entity_taxon\" \"weights\"\n\nWHERE \"factors\".\"dd_weight_column_0\" = \"weights\".\"dd_weight_column_0\"' \\\n                command='\n                    # also record the factor count\n                    tee >(wc -l >nfactors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}) |\n                    format_converter factor /dev/stdin >(pbzip2 >factors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2) 0 1 original 1 |\n                    # and the edge count\n                    tee nedges.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_entity_temporal/dump": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_entity_temporal/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_entity_temporal'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'factors.part-*.bin.bz2' \\\n                    -o -name 'nfactors.part-*'         \\\n                    -o -name   'nedges.part-*'         \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # dump the factors joining the assigned weight ids, converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql='SELECT \"weights\".\"id\" AS \"weight_id\"\n     , \"factors\".\"entity_temporal.R0.id\"\nFROM \"dd_factors_inf_istrue_entity_temporal\" \"factors\", \"dd_weights_inf_istrue_entity_temporal\" \"weights\"\n\nWHERE \"factors\".\"dd_weight_column_0\" = \"weights\".\"dd_weight_column_0\"' \\\n                command='\n                    # also record the factor count\n                    tee >(wc -l >nfactors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}) |\n                    format_converter factor /dev/stdin >(pbzip2 >factors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2) 0 1 original 1 |\n                    # and the edge count\n                    tee nedges.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_relation_formation/dump": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_relation_formation/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_formation'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'factors.part-*.bin.bz2' \\\n                    -o -name 'nfactors.part-*'         \\\n                    -o -name   'nedges.part-*'         \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # dump the factors joining the assigned weight ids, converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql='SELECT \"weights\".\"id\" AS \"weight_id\"\n     , \"factors\".\"relation_formation.R0.id\"\nFROM \"dd_factors_inf_istrue_relation_formation\" \"factors\", \"dd_weights_inf_istrue_relation_formation\" \"weights\"\n\nWHERE \"factors\".\"dd_weight_column_0\" = \"weights\".\"dd_weight_column_0\"' \\\n                command='\n                    # also record the factor count\n                    tee >(wc -l >nfactors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}) |\n                    format_converter factor /dev/stdin >(pbzip2 >factors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2) 0 1 original 1 |\n                    # and the edge count\n                    tee nedges.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_relation_formation_global/dump": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_relation_formation_global/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_formation_global'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'factors.part-*.bin.bz2' \\\n                    -o -name 'nfactors.part-*'         \\\n                    -o -name   'nedges.part-*'         \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # dump the factors joining the assigned weight ids, converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql='SELECT \"weights\".\"id\" AS \"weight_id\"\n     , \"factors\".\"relation_formation_global.R0.id\"\nFROM \"dd_factors_inf_istrue_relation_formation_global\" \"factors\", \"dd_weights_inf_istrue_relation_formation_global\" \"weights\"\n\nWHERE \"factors\".\"dd_weight_column_0\" = \"weights\".\"dd_weight_column_0\"' \\\n                command='\n                    # also record the factor count\n                    tee >(wc -l >nfactors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}) |\n                    format_converter factor /dev/stdin >(pbzip2 >factors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2) 0 1 original 1 |\n                    # and the edge count\n                    tee nedges.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_relation_formationtemporal/dump": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_relation_formationtemporal/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_formationtemporal'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'factors.part-*.bin.bz2' \\\n                    -o -name 'nfactors.part-*'         \\\n                    -o -name   'nedges.part-*'         \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # dump the factors joining the assigned weight ids, converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql='SELECT \"weights\".\"id\" AS \"weight_id\"\n     , \"factors\".\"relation_formationtemporal.R0.id\"\nFROM \"dd_factors_inf_istrue_relation_formationtemporal\" \"factors\", \"dd_weights_inf_istrue_relation_formationtemporal\" \"weights\"\n\nWHERE \"factors\".\"dd_weight_column_0\" = \"weights\".\"dd_weight_column_0\"' \\\n                command='\n                    # also record the factor count\n                    tee >(wc -l >nfactors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}) |\n                    format_converter factor /dev/stdin >(pbzip2 >factors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2) 0 1 original 1 |\n                    # and the edge count\n                    tee nedges.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_relation_formationtemporal_global/dump": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_relation_formationtemporal_global/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_formationtemporal_global'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'factors.part-*.bin.bz2' \\\n                    -o -name 'nfactors.part-*'         \\\n                    -o -name   'nedges.part-*'         \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # dump the factors joining the assigned weight ids, converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql='SELECT \"weights\".\"id\" AS \"weight_id\"\n     , \"factors\".\"relation_formationtemporal_global.R0.id\"\nFROM \"dd_factors_inf_istrue_relation_formationtemporal_global\" \"factors\", \"dd_weights_inf_istrue_relation_formationtemporal_global\" \"weights\"\n\nWHERE \"factors\".\"dd_weight_column_0\" = \"weights\".\"dd_weight_column_0\"' \\\n                command='\n                    # also record the factor count\n                    tee >(wc -l >nfactors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}) |\n                    format_converter factor /dev/stdin >(pbzip2 >factors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2) 0 1 original 1 |\n                    # and the edge count\n                    tee nedges.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_relation_taxonomy/dump": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_relation_taxonomy/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_taxonomy'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'factors.part-*.bin.bz2' \\\n                    -o -name 'nfactors.part-*'         \\\n                    -o -name   'nedges.part-*'         \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # dump the factors joining the assigned weight ids, converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql='SELECT \"weights\".\"id\" AS \"weight_id\"\n     , \"factors\".\"relation_taxonomy.R0.id\"\nFROM \"dd_factors_inf_istrue_relation_taxonomy\" \"factors\", \"dd_weights_inf_istrue_relation_taxonomy\" \"weights\"\n\nWHERE \"factors\".\"dd_weight_column_0\" = \"weights\".\"dd_weight_column_0\"' \\\n                command='\n                    # also record the factor count\n                    tee >(wc -l >nfactors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}) |\n                    format_converter factor /dev/stdin >(pbzip2 >factors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2) 0 1 original 1 |\n                    # and the edge count\n                    tee nedges.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_relation_taxonomy_global/dump": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_relation_taxonomy_global/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_taxonomy_global'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'factors.part-*.bin.bz2' \\\n                    -o -name 'nfactors.part-*'         \\\n                    -o -name   'nedges.part-*'         \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # dump the factors joining the assigned weight ids, converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql='SELECT \"weights\".\"id\" AS \"weight_id\"\n     , \"factors\".\"relation_taxonomy_global.R0.id\"\nFROM \"dd_factors_inf_istrue_relation_taxonomy_global\" \"factors\", \"dd_weights_inf_istrue_relation_taxonomy_global\" \"weights\"\n\nWHERE \"factors\".\"dd_weight_column_0\" = \"weights\".\"dd_weight_column_0\"' \\\n                command='\n                    # also record the factor count\n                    tee >(wc -l >nfactors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}) |\n                    format_converter factor /dev/stdin >(pbzip2 >factors.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2) 0 1 original 1 |\n                    # and the edge count\n                    tee nedges.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_entity_formation/dump_weights": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_entity_formation/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_entity_formation'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'weights.part-*.bin.bz2' \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # flag that signals whether to reuse weights or not\n            reuseFlag=\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights.reuse\n\n            # dump the weights (except the description column), converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql=\"$(if [[ -e \"$reuseFlag\" ]]; then\n                    echo 'SELECT \"w\".\"id\"\n     , CASE WHEN w.isfixed THEN 1 ELSE 0 END\n     , COALESCE(reuse.weight, w.initvalue, 0)\nFROM \"dd_weights_inf_istrue_entity_formation\" \"w\"\nLEFT OUTER JOIN \"dd_graph_weights_reuse\" \"reuse\" ON \"reuse\".\"description\" = '\\''inf_istrue_entity_formation-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END'\n                else\n                    echo 'SELECT \"id\"\n     , CASE WHEN isfixed THEN 1 ELSE 0 END\n     , COALESCE(initvalue, 0)\nFROM \"dd_weights_inf_istrue_entity_formation\"'\n                fi)\" \\\n                command='\n                    format_converter weight /dev/stdin >(pbzip2 >weights.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_entity_location/dump_weights": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_entity_location/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_entity_location'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'weights.part-*.bin.bz2' \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # flag that signals whether to reuse weights or not\n            reuseFlag=\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights.reuse\n\n            # dump the weights (except the description column), converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql=\"$(if [[ -e \"$reuseFlag\" ]]; then\n                    echo 'SELECT \"w\".\"id\"\n     , CASE WHEN w.isfixed THEN 1 ELSE 0 END\n     , COALESCE(reuse.weight, w.initvalue, 0)\nFROM \"dd_weights_inf_istrue_entity_location\" \"w\"\nLEFT OUTER JOIN \"dd_graph_weights_reuse\" \"reuse\" ON \"reuse\".\"description\" = '\\''inf_istrue_entity_location-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END'\n                else\n                    echo 'SELECT \"id\"\n     , CASE WHEN isfixed THEN 1 ELSE 0 END\n     , COALESCE(initvalue, 0)\nFROM \"dd_weights_inf_istrue_entity_location\"'\n                fi)\" \\\n                command='\n                    format_converter weight /dev/stdin >(pbzip2 >weights.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_entity_taxon/dump_weights": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_entity_taxon/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_entity_taxon'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'weights.part-*.bin.bz2' \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # flag that signals whether to reuse weights or not\n            reuseFlag=\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights.reuse\n\n            # dump the weights (except the description column), converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql=\"$(if [[ -e \"$reuseFlag\" ]]; then\n                    echo 'SELECT \"w\".\"id\"\n     , CASE WHEN w.isfixed THEN 1 ELSE 0 END\n     , COALESCE(reuse.weight, w.initvalue, 0)\nFROM \"dd_weights_inf_istrue_entity_taxon\" \"w\"\nLEFT OUTER JOIN \"dd_graph_weights_reuse\" \"reuse\" ON \"reuse\".\"description\" = '\\''inf_istrue_entity_taxon-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END'\n                else\n                    echo 'SELECT \"id\"\n     , CASE WHEN isfixed THEN 1 ELSE 0 END\n     , COALESCE(initvalue, 0)\nFROM \"dd_weights_inf_istrue_entity_taxon\"'\n                fi)\" \\\n                command='\n                    format_converter weight /dev/stdin >(pbzip2 >weights.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_entity_temporal/dump_weights": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_entity_temporal/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_entity_temporal'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'weights.part-*.bin.bz2' \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # flag that signals whether to reuse weights or not\n            reuseFlag=\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights.reuse\n\n            # dump the weights (except the description column), converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql=\"$(if [[ -e \"$reuseFlag\" ]]; then\n                    echo 'SELECT \"w\".\"id\"\n     , CASE WHEN w.isfixed THEN 1 ELSE 0 END\n     , COALESCE(reuse.weight, w.initvalue, 0)\nFROM \"dd_weights_inf_istrue_entity_temporal\" \"w\"\nLEFT OUTER JOIN \"dd_graph_weights_reuse\" \"reuse\" ON \"reuse\".\"description\" = '\\''inf_istrue_entity_temporal-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END'\n                else\n                    echo 'SELECT \"id\"\n     , CASE WHEN isfixed THEN 1 ELSE 0 END\n     , COALESCE(initvalue, 0)\nFROM \"dd_weights_inf_istrue_entity_temporal\"'\n                fi)\" \\\n                command='\n                    format_converter weight /dev/stdin >(pbzip2 >weights.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_relation_formation/dump_weights": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_relation_formation/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_formation'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'weights.part-*.bin.bz2' \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # flag that signals whether to reuse weights or not\n            reuseFlag=\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights.reuse\n\n            # dump the weights (except the description column), converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql=\"$(if [[ -e \"$reuseFlag\" ]]; then\n                    echo 'SELECT \"w\".\"id\"\n     , CASE WHEN w.isfixed THEN 1 ELSE 0 END\n     , COALESCE(reuse.weight, w.initvalue, 0)\nFROM \"dd_weights_inf_istrue_relation_formation\" \"w\"\nLEFT OUTER JOIN \"dd_graph_weights_reuse\" \"reuse\" ON \"reuse\".\"description\" = '\\''inf_istrue_relation_formation-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END'\n                else\n                    echo 'SELECT \"id\"\n     , CASE WHEN isfixed THEN 1 ELSE 0 END\n     , COALESCE(initvalue, 0)\nFROM \"dd_weights_inf_istrue_relation_formation\"'\n                fi)\" \\\n                command='\n                    format_converter weight /dev/stdin >(pbzip2 >weights.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_relation_formation_global/dump_weights": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_relation_formation_global/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_formation_global'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'weights.part-*.bin.bz2' \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # flag that signals whether to reuse weights or not\n            reuseFlag=\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights.reuse\n\n            # dump the weights (except the description column), converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql=\"$(if [[ -e \"$reuseFlag\" ]]; then\n                    echo 'SELECT \"w\".\"id\"\n     , CASE WHEN w.isfixed THEN 1 ELSE 0 END\n     , COALESCE(reuse.weight, w.initvalue, 0)\nFROM \"dd_weights_inf_istrue_relation_formation_global\" \"w\"\nLEFT OUTER JOIN \"dd_graph_weights_reuse\" \"reuse\" ON \"reuse\".\"description\" = '\\''inf_istrue_relation_formation_global-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END'\n                else\n                    echo 'SELECT \"id\"\n     , CASE WHEN isfixed THEN 1 ELSE 0 END\n     , COALESCE(initvalue, 0)\nFROM \"dd_weights_inf_istrue_relation_formation_global\"'\n                fi)\" \\\n                command='\n                    format_converter weight /dev/stdin >(pbzip2 >weights.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_relation_formationtemporal/dump_weights": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_relation_formationtemporal/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_formationtemporal'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'weights.part-*.bin.bz2' \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # flag that signals whether to reuse weights or not\n            reuseFlag=\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights.reuse\n\n            # dump the weights (except the description column), converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql=\"$(if [[ -e \"$reuseFlag\" ]]; then\n                    echo 'SELECT \"w\".\"id\"\n     , CASE WHEN w.isfixed THEN 1 ELSE 0 END\n     , COALESCE(reuse.weight, w.initvalue, 0)\nFROM \"dd_weights_inf_istrue_relation_formationtemporal\" \"w\"\nLEFT OUTER JOIN \"dd_graph_weights_reuse\" \"reuse\" ON \"reuse\".\"description\" = '\\''inf_istrue_relation_formationtemporal-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END'\n                else\n                    echo 'SELECT \"id\"\n     , CASE WHEN isfixed THEN 1 ELSE 0 END\n     , COALESCE(initvalue, 0)\nFROM \"dd_weights_inf_istrue_relation_formationtemporal\"'\n                fi)\" \\\n                command='\n                    format_converter weight /dev/stdin >(pbzip2 >weights.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_relation_formationtemporal_global/dump_weights": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_relation_formationtemporal_global/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_formationtemporal_global'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'weights.part-*.bin.bz2' \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # flag that signals whether to reuse weights or not\n            reuseFlag=\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights.reuse\n\n            # dump the weights (except the description column), converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql=\"$(if [[ -e \"$reuseFlag\" ]]; then\n                    echo 'SELECT \"w\".\"id\"\n     , CASE WHEN w.isfixed THEN 1 ELSE 0 END\n     , COALESCE(reuse.weight, w.initvalue, 0)\nFROM \"dd_weights_inf_istrue_relation_formationtemporal_global\" \"w\"\nLEFT OUTER JOIN \"dd_graph_weights_reuse\" \"reuse\" ON \"reuse\".\"description\" = '\\''inf_istrue_relation_formationtemporal_global-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END'\n                else\n                    echo 'SELECT \"id\"\n     , CASE WHEN isfixed THEN 1 ELSE 0 END\n     , COALESCE(initvalue, 0)\nFROM \"dd_weights_inf_istrue_relation_formationtemporal_global\"'\n                fi)\" \\\n                command='\n                    format_converter weight /dev/stdin >(pbzip2 >weights.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_relation_taxonomy/dump_weights": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_relation_taxonomy/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_taxonomy'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'weights.part-*.bin.bz2' \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # flag that signals whether to reuse weights or not\n            reuseFlag=\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights.reuse\n\n            # dump the weights (except the description column), converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql=\"$(if [[ -e \"$reuseFlag\" ]]; then\n                    echo 'SELECT \"w\".\"id\"\n     , CASE WHEN w.isfixed THEN 1 ELSE 0 END\n     , COALESCE(reuse.weight, w.initvalue, 0)\nFROM \"dd_weights_inf_istrue_relation_taxonomy\" \"w\"\nLEFT OUTER JOIN \"dd_graph_weights_reuse\" \"reuse\" ON \"reuse\".\"description\" = '\\''inf_istrue_relation_taxonomy-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END'\n                else\n                    echo 'SELECT \"id\"\n     , CASE WHEN isfixed THEN 1 ELSE 0 END\n     , COALESCE(initvalue, 0)\nFROM \"dd_weights_inf_istrue_relation_taxonomy\"'\n                fi)\" \\\n                command='\n                    format_converter weight /dev/stdin >(pbzip2 >weights.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/factor/inf_istrue_relation_taxonomy_global/dump_weights": {
          "dependencies_": [
            "process/grounding/factor/inf_istrue_relation_taxonomy_global/assign_weight_id"
          ],
          "style": "cmd_extractor",
          "cmd": "\n            : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n            facPath=\"$DEEPDIVE_GROUNDING_DIR\"/factor/'inf_istrue_relation_taxonomy_global'\n            mkdir -p \"$facPath\"\n            cd \"$facPath\"\n            find . \\( -name  'weights.part-*.bin.bz2' \\\n                   \\) -exec rm -rf {} +\n            export DEEPDIVE_LOAD_FORMAT=tsv\n            export DEEPDIVE_UNLOAD_MATERIALIZED=false\n\n            # flag that signals whether to reuse weights or not\n            reuseFlag=\"$DEEPDIVE_GROUNDING_DIR\"/factor/weights.reuse\n\n            # dump the weights (except the description column), converting into binary format for the inference engine\n            deepdive compute execute \\\n                input_sql=\"$(if [[ -e \"$reuseFlag\" ]]; then\n                    echo 'SELECT \"w\".\"id\"\n     , CASE WHEN w.isfixed THEN 1 ELSE 0 END\n     , COALESCE(reuse.weight, w.initvalue, 0)\nFROM \"dd_weights_inf_istrue_relation_taxonomy_global\" \"w\"\nLEFT OUTER JOIN \"dd_graph_weights_reuse\" \"reuse\" ON \"reuse\".\"description\" = '\\''inf_istrue_relation_taxonomy_global-'\\'' ||'\\''-'\\''|| CASE WHEN \"dd_weight_column_0\" IS NULL THEN '\\'''\\''\n              ELSE \"dd_weight_column_0\" || '\\'''\\''  -- XXX CAST(... AS TEXT) unsupported by MySQL\n          END'\n                else\n                    echo 'SELECT \"id\"\n     , CASE WHEN isfixed THEN 1 ELSE 0 END\n     , COALESCE(initvalue, 0)\nFROM \"dd_weights_inf_istrue_relation_taxonomy_global\"'\n                fi)\" \\\n                command='\n                    format_converter weight /dev/stdin >(pbzip2 >weights.part-${DEEPDIVE_CURRENT_PROCESS_INDEX}.bin.bz2)\n                ' \\\n                output_relation=\n        "
        },
        "process/grounding/combine_factorgraph": {
          "dependencies_": [
            "process/grounding/variable/entity_formation/dump",
            "process/grounding/variable/entity_location/dump",
            "process/grounding/variable/entity_taxon/dump",
            "process/grounding/variable/entity_temporal/dump",
            "process/grounding/variable/relation_formation/dump",
            "process/grounding/variable/relation_formation_global/dump",
            "process/grounding/variable/relation_formationtemporal/dump",
            "process/grounding/variable/relation_formationtemporal_global/dump",
            "process/grounding/variable/relation_taxonomy/dump",
            "process/grounding/variable/relation_taxonomy_global/dump",
            "process/grounding/factor/inf_istrue_entity_formation/dump",
            "process/grounding/factor/inf_istrue_entity_formation/dump_weights",
            "process/grounding/factor/inf_istrue_entity_location/dump",
            "process/grounding/factor/inf_istrue_entity_location/dump_weights",
            "process/grounding/factor/inf_istrue_entity_taxon/dump",
            "process/grounding/factor/inf_istrue_entity_taxon/dump_weights",
            "process/grounding/factor/inf_istrue_entity_temporal/dump",
            "process/grounding/factor/inf_istrue_entity_temporal/dump_weights",
            "process/grounding/factor/inf_istrue_relation_formation/dump",
            "process/grounding/factor/inf_istrue_relation_formation/dump_weights",
            "process/grounding/factor/inf_istrue_relation_formation_global/dump",
            "process/grounding/factor/inf_istrue_relation_formation_global/dump_weights",
            "process/grounding/factor/inf_istrue_relation_formationtemporal/dump",
            "process/grounding/factor/inf_istrue_relation_formationtemporal/dump_weights",
            "process/grounding/factor/inf_istrue_relation_formationtemporal_global/dump",
            "process/grounding/factor/inf_istrue_relation_formationtemporal_global/dump_weights",
            "process/grounding/factor/inf_istrue_relation_taxonomy/dump",
            "process/grounding/factor/inf_istrue_relation_taxonomy/dump_weights",
            "process/grounding/factor/inf_istrue_relation_taxonomy_global/dump",
            "process/grounding/factor/inf_istrue_relation_taxonomy_global/dump_weights",
            "process/grounding/global_weight_table"
          ],
          "output_": "model/factorgraph",
          "style": "cmd_extractor",
          "cmd": "\n        : ${DEEPDIVE_GROUNDING_DIR:=\"$DEEPDIVE_APP\"/run/model/grounding}\n        : ${DEEPDIVE_FACTORGRAPH_DIR:=\"$DEEPDIVE_APP\"/run/model/factorgraph}\n\n        # create a fresh empty directory for the new combined factor graph\n        rm -rf   \"$DEEPDIVE_FACTORGRAPH_DIR\"\n        mkdir -p \"$DEEPDIVE_FACTORGRAPH_DIR\"\n        cd \"$DEEPDIVE_FACTORGRAPH_DIR\"\n\n        # create symlinks to the grounded binaries by enumerating variables and factors\n        for v in 'entity_formation' 'entity_location' 'entity_taxon' 'entity_temporal' 'relation_formation' 'relation_formation_global' 'relation_formationtemporal' 'relation_formationtemporal_global' 'relation_taxonomy' 'relation_taxonomy_global'; do\n            mkdir -p variables/\"$v\"\n            find \"$DEEPDIVE_GROUNDING_DIR\"/variable/\"$v\" \\\n                -name 'variables.part-*.bin.bz2' -exec ln -sfnv -t variables/\"$v\"/ {} + \\\n                #\n        done\n        for f in 'inf_istrue_entity_formation' 'inf_istrue_entity_location' 'inf_istrue_entity_taxon' 'inf_istrue_entity_temporal' 'inf_istrue_relation_formation' 'inf_istrue_relation_formation_global' 'inf_istrue_relation_formationtemporal' 'inf_istrue_relation_formationtemporal_global' 'inf_istrue_relation_taxonomy' 'inf_istrue_relation_taxonomy_global'; do\n            mkdir -p {factors,weights}/\"$f\"\n            find \"$DEEPDIVE_GROUNDING_DIR\"/factor/\"$f\" \\\n                -name 'factors.part-*.bin.bz2' -exec ln -sfnv -t factors/\"$f\"/ {} + \\\n                -o \\\n                -name 'weights.part-*.bin.bz2' -exec ln -sfnv -t weights/\"$f\"/ {} + \\\n                #\n        done\n\n        # generate the metadata for the inference engine\n        {\n            # first line with counts of variables and edges in the grounded factor graph\n            cd \"$DEEPDIVE_GROUNDING_DIR\"\n            sumup() { { tr '\\n' +; echo 0; } | bc; }\n            counts=()\n            counts+=($(cat factor/weights_count))\n            # sum up the number of factors and edges\n            counts+=($(cat variable_count))\n            cd factor\n            counts+=($(find 'inf_istrue_entity_formation' 'inf_istrue_entity_location' 'inf_istrue_entity_taxon' 'inf_istrue_entity_temporal' 'inf_istrue_relation_formation' 'inf_istrue_relation_formation_global' 'inf_istrue_relation_formationtemporal' 'inf_istrue_relation_formationtemporal_global' 'inf_istrue_relation_taxonomy' 'inf_istrue_relation_taxonomy_global' -name 'nfactors.part-*' -exec cat {} + | sumup))\n            counts+=($(find 'inf_istrue_entity_formation' 'inf_istrue_entity_location' 'inf_istrue_entity_taxon' 'inf_istrue_entity_temporal' 'inf_istrue_relation_formation' 'inf_istrue_relation_formation_global' 'inf_istrue_relation_formationtemporal' 'inf_istrue_relation_formationtemporal_global' 'inf_istrue_relation_taxonomy' 'inf_istrue_relation_taxonomy_global' -name 'nedges.part-*'   -exec cat {} + | sumup))\n            (IFS=,; echo \"${counts[*]}\")\n            # second line with file paths\n            paths=(\"$DEEPDIVE_FACTORGRAPH_DIR\"/{weights,variables,factors,edges})\n            (IFS=,; echo \"${paths[*]}\")\n        } >meta\n        "
        },
        "process/model/learning": {
          "dependencies_": [
            "model/factorgraph"
          ],
          "output_": "model/weights",
          "style": "cmd_extractor",
          "cmd": "mkdir -p ../../../model && cd ../../../model\n            mkdir -p weights\n            [ -d factorgraph ] || error \"No factorgraph found\"\n            # run inference engine for learning and inference\n            flatten() { find -L \"$@\" -type f -exec pbzip2 -c -d -k {} +; }\n            sampler-dw \\\n                gibbs \\\n                -w <(flatten factorgraph/weights) \\\n                -v <(flatten factorgraph/variables) \\\n                -f <(flatten factorgraph/factors) \\\n                -m factorgraph/meta \\\n                -o weights \\\n                -l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence\n            mkdir -p probabilities\n            mv -f weights/inference_result.out.text probabilities/\n        "
        },
        "process/model/inference": {
          "dependencies_": [
            "model/factorgraph",
            "model/weights"
          ],
          "output_": "model/probabilities",
          "style": "cmd_extractor",
          "cmd": "mkdir -p ../../../model && cd ../../../model\n            [ -d factorgraph ] || error \"No factorgraph found\"\n            if [[ factorgraph/weights -nt probabilities/inference_result.out.text ]]; then\n                # no need to run inference unless the weights are fresher\n                # XXX this skipping may cause confusion\n                # run sampler for performing inference with given weights without learning\n                flatten() { find -L \"$@\" -type f -exec pbzip2 -c -d -k {} +; }\n                sampler-dw \\\n                    gibbs \\\n                    -w <(flatten factorgraph/weights) \\\n                    -v <(flatten factorgraph/variables) \\\n                    -f <(flatten factorgraph/factors) \\\n                    -m factorgraph/meta \\\n                    -o weights \\\n                    -l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence \\\n                    -l 0 \\\n                    #\n                mkdir -p probabilities\n                mv -f weights/inference_result.out.text probabilities/\n            fi\n        "
        },
        "process/model/load_weights": {
          "dependencies_": [
            "model/weights"
          ],
          "output_": "data/model/weights",
          "style": "cmd_extractor",
          "cmd": "mkdir -p ../../../model && cd ../../../model\n            # load weights to database\n            deepdive create table dd_inference_result_weights \\\n                id:BIGINT:'PRIMARY KEY' \\\n                weight:'DOUBLE PRECISION' \\\n                #\n            cat weights/inference_result.out.weights.text |\n            tr ' ' '\\t' | DEEPDIVE_LOAD_FORMAT=tsv \\\n            deepdive load dd_inference_result_weights /dev/stdin\n\n            # create views\n            deepdive create view dd_inference_result_weights_mapping as '\n                SELECT dd_graph_weights.*, dd_inference_result_weights.weight FROM\n                dd_graph_weights JOIN dd_inference_result_weights ON dd_graph_weights.id = dd_inference_result_weights.id\n                ORDER BY abs(weight) DESC\n            '\n\n            deepdive create view dd_inference_result_variables_mapped_weights as '\n                SELECT * FROM dd_inference_result_weights_mapping\n                ORDER BY abs(weight) DESC\n            '\n        "
        },
        "process/model/load_probabilities": {
          "dependencies_": [
            "model/probabilities"
          ],
          "output_": "data/model/probabilities",
          "style": "cmd_extractor",
          "cmd": "mkdir -p ../../../model && cd ../../../model\n            # load weights to database\n            deepdive create table dd_inference_result_variables \\\n                id:BIGINT \\\n                category:BIGINT \\\n                expectation:'DOUBLE PRECISION' \\\n                #\n            cat probabilities/inference_result.out.text |\n            tr ' ' '\\t' | DEEPDIVE_LOAD_FORMAT=tsv \\\n            deepdive load dd_inference_result_variables /dev/stdin\n\n            # create a view for each app schema variable\n            \n            deepdive create view 'entity_formation_label_inference' as '\n                SELECT entity_formation.*, mir.category, mir.expectation FROM\n                entity_formation, dd_inference_result_variables mir\n                WHERE entity_formation.id = mir.id\n                ORDER BY mir.expectation DESC\n                '\n\n            deepdive create view 'entity_location_label_inference' as '\n                SELECT entity_location.*, mir.category, mir.expectation FROM\n                entity_location, dd_inference_result_variables mir\n                WHERE entity_location.id = mir.id\n                ORDER BY mir.expectation DESC\n                '\n\n            deepdive create view 'entity_taxon_label_inference' as '\n                SELECT entity_taxon.*, mir.category, mir.expectation FROM\n                entity_taxon, dd_inference_result_variables mir\n                WHERE entity_taxon.id = mir.id\n                ORDER BY mir.expectation DESC\n                '\n\n            deepdive create view 'entity_temporal_label_inference' as '\n                SELECT entity_temporal.*, mir.category, mir.expectation FROM\n                entity_temporal, dd_inference_result_variables mir\n                WHERE entity_temporal.id = mir.id\n                ORDER BY mir.expectation DESC\n                '\n\n            deepdive create view 'relation_formation_label_inference' as '\n                SELECT relation_formation.*, mir.category, mir.expectation FROM\n                relation_formation, dd_inference_result_variables mir\n                WHERE relation_formation.id = mir.id\n                ORDER BY mir.expectation DESC\n                '\n\n            deepdive create view 'relation_formation_global_label_inference' as '\n                SELECT relation_formation_global.*, mir.category, mir.expectation FROM\n                relation_formation_global, dd_inference_result_variables mir\n                WHERE relation_formation_global.id = mir.id\n                ORDER BY mir.expectation DESC\n                '\n\n            deepdive create view 'relation_formationtemporal_label_inference' as '\n                SELECT relation_formationtemporal.*, mir.category, mir.expectation FROM\n                relation_formationtemporal, dd_inference_result_variables mir\n                WHERE relation_formationtemporal.id = mir.id\n                ORDER BY mir.expectation DESC\n                '\n\n            deepdive create view 'relation_formationtemporal_global_label_inference' as '\n                SELECT relation_formationtemporal_global.*, mir.category, mir.expectation FROM\n                relation_formationtemporal_global, dd_inference_result_variables mir\n                WHERE relation_formationtemporal_global.id = mir.id\n                ORDER BY mir.expectation DESC\n                '\n\n            deepdive create view 'relation_taxonomy_label_inference' as '\n                SELECT relation_taxonomy.*, mir.category, mir.expectation FROM\n                relation_taxonomy, dd_inference_result_variables mir\n                WHERE relation_taxonomy.id = mir.id\n                ORDER BY mir.expectation DESC\n                '\n\n            deepdive create view 'relation_taxonomy_global_label_inference' as '\n                SELECT relation_taxonomy_global.*, mir.category, mir.expectation FROM\n                relation_taxonomy_global, dd_inference_result_variables mir\n                WHERE relation_taxonomy_global.id = mir.id\n                ORDER BY mir.expectation DESC\n                '\n        "
        }
      }
    },
    "calibration": null
  }
}
