
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: ORIGINAL
    }
    


      deepdive.schema.variables {
        relation_taxonomy.label: Boolean
entity_formation.label: Boolean
relation_formation.label: Boolean
entity_location.label: Boolean
entity_temporal.label: Boolean
relation_taxonomy_global.label: Boolean
entity_taxon.label: Boolean
relation_formation_global.label: Boolean
relation_formationtemporal_global.label: Boolean
relation_formationtemporal.label: Boolean
      }
    

      deepdive.extraction.extractors.ext_formation_per_doc {
        cmd: """

	# TODO use temporary table
	deepdive create table "formation_per_doc"
	deepdive sql 'INSERT INTO formation_per_doc SELECT R0.docid AS "entity_formation_candidate_local.R0.docid", ARRAY_AGG(R0.entity) AS column_1, ARRAY_AGG(R0.type) AS column_2
FROM entity_formation_candidate_local R0
        
        GROUP BY R0.docid'
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "formation_per_doc"
        style: "cmd_extractor"
          dependencies: [ "ext_entity_formation_candidate_local_by_ext_entity_formation_local" ]
          input_relations: [
            entity_formation_candidate_local
          ]
      }
    

      deepdive.extraction.extractors.ext_sentences {
        cmd: """

	# TODO use temporary table
	deepdive create table "sentences"
	deepdive sql 'INSERT INTO sentences SELECT R0.docid AS "sentences_original.R0.docid", R0.sentid AS "sentences_original.R0.sentid", R0.wordindex AS "sentences_original.R0.wordindex", R0.words AS "sentences_original.R0.words", R0.poses AS "sentences_original.R0.poses", R0.ners AS "sentences_original.R0.ners", R0.lemmas AS "sentences_original.R0.lemmas", R0.dep_paths AS "sentences_original.R0.dep_paths", R0.dep_parents AS "sentences_original.R0.dep_parents", NULL AS column_9, NULL AS column_9
FROM sentences_original R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "sentences"
        style: "cmd_extractor"
          
          input_relations: [
            sentences_original
          ]
      }
    

      deepdive.extraction.extractors.ext_all_entity_per_doc {
        cmd: """

	# TODO use temporary table
	deepdive create table "all_entity_per_doc"
	deepdive sql 'INSERT INTO all_entity_per_doc SELECT R0.docid AS "all_entity_candidate.R0.docid", ARRAY_AGG(R0.eid) AS column_1, ARRAY_AGG(R0.entity) AS column_2, ARRAY_AGG(R0.type) AS column_3, ARRAY_AGG(R0.prov) AS column_4
FROM all_entity_candidate R0
        
        GROUP BY R0.docid'
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "all_entity_per_doc"
        style: "cmd_extractor"
          dependencies: [ "ext_all_entity_candidate" ]
          input_relations: [
            all_entity_candidate
          ]
      }
    

      deepdive.extraction.extractors.ext_documents_serialized {
        cmd: """

	# TODO use temporary table
	deepdive create table "documents_serialized"
	deepdive sql 'INSERT INTO documents_serialized SELECT R0.docid AS "documents.R0.docid", array_to_string(R0.sentids, '\''|||||'\'') AS column_1, array_to_string(R0.wordidxs, '\''|||||'\'') AS column_2, array_to_string(R0.words, '\''|||||'\'') AS column_3, array_to_string(R0.poses, '\''|||||'\'') AS column_4, array_to_string(R0.ners, '\''|||||'\'') AS column_5, array_to_string(R0.lemmas, '\''|||||'\'') AS column_6, array_to_string(R0.dep_paths, '\''|||||'\'') AS column_7, array_to_string(R0.dep_parents, '\''|||||'\'') AS column_8, array_to_string(R0.font, '\''|||||'\'') AS column_9, array_to_string(R0.layout, '\''|||||'\'') AS column_10
FROM documents R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "documents_serialized"
        style: "cmd_extractor"
          dependencies: [ "ext_documents" ]
          input_relations: [
            documents
          ]
      }
    

      deepdive.extraction.extractors.ext_relation_formationtemporal_global {
        cmd: """

	# TODO use temporary table
	deepdive create table "relation_formationtemporal_global"
	deepdive sql 'INSERT INTO relation_formationtemporal_global SELECT DISTINCT R0.type AS "relation_formationtemporal.R0.type", R0.eid1 AS "relation_formationtemporal.R0.eid1", R0.eid2 AS "relation_formationtemporal.R0.eid2"
FROM relation_formationtemporal R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "relation_formationtemporal_global"
        style: "cmd_extractor"
          dependencies: [ "ext_relation_formationtemporal" ]
          input_relations: [
            relation_formationtemporal
          ]
      }
    

      deepdive.extraction.extractors.ext_document_with_taxon_entities {
        cmd: """

	# TODO use temporary table
	deepdive create table "document_with_taxon_entities"
	deepdive sql 'INSERT INTO document_with_taxon_entities SELECT R0.docid AS "taxon_per_doc.R0.docid", array_to_string(R0.entity, '\''@@@@@'\'') AS column_1, array_to_string(R0.type, '\''@@@@@'\'') AS column_2, R1.sentids AS "documents_serialized.R1.sentids", R1.wordidxs AS "documents_serialized.R1.wordidxs", R1.words AS "documents_serialized.R1.words", R1.poses AS "documents_serialized.R1.poses", R1.ners AS "documents_serialized.R1.ners", R1.lemmas AS "documents_serialized.R1.lemmas", R1.dep_paths AS "documents_serialized.R1.dep_paths", R1.dep_parents AS "documents_serialized.R1.dep_parents", R1.font AS "documents_serialized.R1.font", R1.layout AS "documents_serialized.R1.layout"
FROM taxon_per_doc R0, documents_serialized R1
        WHERE R1.docid = R0.docid '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "document_with_taxon_entities"
        style: "cmd_extractor"
          dependencies: [ "ext_taxon_per_doc" ,  "ext_documents_serialized" ]
          input_relations: [
            taxon_per_doc
            documents_serialized
          ]
      }
    

      deepdive.extraction.extractors.ext_relation_formationtemporal {
        cmd: """

	# TODO use temporary table
	deepdive create table "relation_formationtemporal"
	deepdive sql 'INSERT INTO relation_formationtemporal SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label
          FROM relation_formationtemporal_supervise R0
        
          '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "relation_formationtemporal"
        style: "cmd_extractor"
          dependencies: [ "ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal" ]
          input_relations: [
            relation_formationtemporal_supervise
          ]
      }
    

      deepdive.extraction.extractors.ext_entity_location {
        cmd: """

	# TODO use temporary table
	deepdive create table "entity_location"
	deepdive sql 'INSERT INTO entity_location SELECT R0.docid AS "entity_location_candidate.R0.docid", R0.type AS "entity_location_candidate.R0.type", R0.eid AS "entity_location_candidate.R0.eid", R0.entity AS "entity_location_candidate.R0.entity", R0.prov AS "entity_location_candidate.R0.prov"
FROM entity_location_candidate R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "entity_location"
        style: "cmd_extractor"
          dependencies: [ "ext_entity_location_candidate_by_ext_entity_location_global" ]
          input_relations: [
            entity_location_candidate
          ]
      }
    

      deepdive.extraction.extractors.ext_relation_formation_global {
        cmd: """

	# TODO use temporary table
	deepdive create table "relation_formation_global"
	deepdive sql 'INSERT INTO relation_formation_global SELECT DISTINCT R0.type AS "relation_formation.R0.type", R0.eid1 AS "relation_formation.R0.eid1", R0.eid2 AS "relation_formation.R0.eid2"
FROM relation_formation R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "relation_formation_global"
        style: "cmd_extractor"
          dependencies: [ "ext_relation_formation" ]
          input_relations: [
            relation_formation
          ]
      }
    

      deepdive.extraction.extractors.ext_documents {
        cmd: """

	# TODO use temporary table
	deepdive create table "documents"
	deepdive sql 'INSERT INTO documents SELECT DISTINCT R0.docid AS "sentences_serialized.R0.docid", ARRAY_AGG(R0.sentid) AS column_1, ARRAY_AGG(R0.wordidxs) AS column_2, ARRAY_AGG(R0.words) AS column_3, ARRAY_AGG(R0.poses) AS column_4, ARRAY_AGG(R0.ners) AS column_5, ARRAY_AGG(R0.lemmas) AS column_6, ARRAY_AGG(R0.dep_paths) AS column_7, ARRAY_AGG(R0.dep_parents) AS column_8, ARRAY_AGG(R0.font) AS column_9, ARRAY_AGG(R0.layout) AS column_10
FROM sentences_serialized R0
        
        GROUP BY R0.docid'
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "documents"
        style: "cmd_extractor"
          dependencies: [ "ext_sentences_serialized" ]
          input_relations: [
            sentences_serialized
          ]
      }
    

      deepdive.extraction.extractors.ext_all_entity_candidate {
        cmd: """

	# TODO use temporary table
	deepdive create table "all_entity_candidate"
	deepdive sql 'INSERT INTO all_entity_candidate SELECT R0.docid AS "entity_formation_candidate.R0.docid", '\''FORMATION'\'' AS column_1, R0.eid AS "entity_formation_candidate.R0.eid", R0.entity AS "entity_formation_candidate.R0.entity", R0.prov AS "entity_formation_candidate.R0.prov"
FROM entity_formation_candidate R0
        
UNION ALL
SELECT R0.docid AS "entity_temporal_candidate.R0.docid", '\''INTERVAL'\'' AS column_1, R0.eid AS "entity_temporal_candidate.R0.eid", R0.entity AS "entity_temporal_candidate.R0.entity", R0.prov AS "entity_temporal_candidate.R0.prov"
FROM entity_temporal_candidate R0
        
UNION ALL
SELECT R0.docid AS "entity_taxon_candidate.R0.docid", '\''TAXON-'\'' || R0.type AS column_1, R0.eid AS "entity_taxon_candidate.R0.eid", R0.entity AS "entity_taxon_candidate.R0.entity", R0.prov AS "entity_taxon_candidate.R0.prov"
FROM entity_taxon_candidate R0
        
UNION ALL
SELECT R0.docid AS "entity_location_candidate.R0.docid", '\''LOCATION'\'' AS column_1, R0.eid AS "entity_location_candidate.R0.eid", R0.entity AS "entity_location_candidate.R0.entity", R0.prov AS "entity_location_candidate.R0.prov"
FROM entity_location_candidate R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "all_entity_candidate"
        style: "cmd_extractor"
          dependencies: [ "ext_entity_formation_candidate" ,  "ext_entity_temporal_candidate_by_ext_entity_temporal_local" ,  "ext_entity_taxon_candidate" ,  "ext_entity_location_candidate_by_ext_entity_location_global" ]
          input_relations: [
            entity_formation_candidate
            entity_temporal_candidate
            entity_taxon_candidate
            entity_location_candidate
          ]
      }
    

      deepdive.extraction.extractors.ext_entity_formation_candidate {
        cmd: """

	# TODO use temporary table
	deepdive create table "entity_formation_candidate"
	deepdive sql 'INSERT INTO entity_formation_candidate SELECT R0.docid AS "entity_formation_candidate__0.R0.docid", R0.type AS "entity_formation_candidate__0.R0.type", R0.eid AS "entity_formation_candidate__0.R0.eid", R0.entity AS "entity_formation_candidate__0.R0.entity", R0.prov AS "entity_formation_candidate__0.R0.prov"
FROM entity_formation_candidate__0 R0
        
UNION ALL
SELECT R0.docid AS "entity_formation_candidate_local.R0.docid", R0.type AS "entity_formation_candidate_local.R0.type", R0.eid AS "entity_formation_candidate_local.R0.eid", R0.entity AS "entity_formation_candidate_local.R0.entity", R0.prov AS "entity_formation_candidate_local.R0.prov"
FROM entity_formation_candidate_local R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "entity_formation_candidate"
        style: "cmd_extractor"
          dependencies: [ "ext_entity_formation_candidate__0_by_ext_entity_formation_global" ,  "ext_entity_formation_candidate_local_by_ext_entity_formation_local" ]
          input_relations: [
            entity_formation_candidate__0
            entity_formation_candidate_local
          ]
      }
    

      deepdive.extraction.extractors.ext_document_with_formation_entities {
        cmd: """

	# TODO use temporary table
	deepdive create table "document_with_formation_entities"
	deepdive sql 'INSERT INTO document_with_formation_entities SELECT R0.docid AS "formation_per_doc.R0.docid", array_to_string(R0.entity, '\''@@@@@'\'') AS column_1, array_to_string(R0.type, '\''@@@@@'\'') AS column_2, R1.sentids AS "documents_serialized.R1.sentids", R1.wordidxs AS "documents_serialized.R1.wordidxs", R1.words AS "documents_serialized.R1.words", R1.poses AS "documents_serialized.R1.poses", R1.ners AS "documents_serialized.R1.ners", R1.lemmas AS "documents_serialized.R1.lemmas", R1.dep_paths AS "documents_serialized.R1.dep_paths", R1.dep_parents AS "documents_serialized.R1.dep_parents", R1.font AS "documents_serialized.R1.font", R1.layout AS "documents_serialized.R1.layout"
FROM formation_per_doc R0, documents_serialized R1
        WHERE R1.docid = R0.docid '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "document_with_formation_entities"
        style: "cmd_extractor"
          dependencies: [ "ext_formation_per_doc" ,  "ext_documents_serialized" ]
          input_relations: [
            formation_per_doc
            documents_serialized
          ]
      }
    

      deepdive.extraction.extractors.ext_entity_temporal {
        cmd: """

	# TODO use temporary table
	deepdive create table "entity_temporal"
	deepdive sql 'INSERT INTO entity_temporal SELECT R0.docid AS "entity_temporal_candidate.R0.docid", R0.type AS "entity_temporal_candidate.R0.type", R0.eid AS "entity_temporal_candidate.R0.eid", R0.entity AS "entity_temporal_candidate.R0.entity", R0.prov AS "entity_temporal_candidate.R0.prov"
FROM entity_temporal_candidate R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "entity_temporal"
        style: "cmd_extractor"
          dependencies: [ "ext_entity_temporal_candidate_by_ext_entity_temporal_local" ]
          input_relations: [
            entity_temporal_candidate
          ]
      }
    

      deepdive.extraction.extractors.ext_relation_formation {
        cmd: """

	# TODO use temporary table
	deepdive create table "relation_formation"
	deepdive sql 'INSERT INTO relation_formation SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label
          FROM relation_formation_supervise R0
        
          '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "relation_formation"
        style: "cmd_extractor"
          dependencies: [ "ext_relation_formation_supervise_by_ext_relation_variable_formation" ]
          input_relations: [
            relation_formation_supervise
          ]
      }
    

      deepdive.extraction.extractors.ext_entity_taxon {
        cmd: """

	# TODO use temporary table
	deepdive create table "entity_taxon"
	deepdive sql 'INSERT INTO entity_taxon SELECT R0.docid AS "entity_taxon_candidate.R0.docid", R0.type AS "entity_taxon_candidate.R0.type", R0.eid AS "entity_taxon_candidate.R0.eid", R0.entity AS "entity_taxon_candidate.R0.entity", R0.author_year AS "entity_taxon_candidate.R0.author_year", R0.prov AS "entity_taxon_candidate.R0.prov"
FROM entity_taxon_candidate R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "entity_taxon"
        style: "cmd_extractor"
          dependencies: [ "ext_entity_taxon_candidate" ]
          input_relations: [
            entity_taxon_candidate
          ]
      }
    

      deepdive.extraction.extractors.ext_relation_taxonomy {
        cmd: """

	# TODO use temporary table
	deepdive create table "relation_taxonomy"
	deepdive sql 'INSERT INTO relation_taxonomy SELECT DISTINCT R0.docid, R0.type, R0.eid1, R0.eid2, R0.entity1, R0.entity2, 0 AS id, R0.label AS label
          FROM relation_taxonomy_supervise R0
        
          '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "relation_taxonomy"
        style: "cmd_extractor"
          dependencies: [ "ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy" ]
          input_relations: [
            relation_taxonomy_supervise
          ]
      }
    

      deepdive.extraction.extractors.ext_sentences_serialized {
        cmd: """

	# TODO use temporary table
	deepdive create table "sentences_serialized"
	deepdive sql 'INSERT INTO sentences_serialized SELECT DISTINCT R0.docid AS "sentences.R0.docid", R0.sentid AS "sentences.R0.sentid", array_to_string(R0.wordindex, '\''@@@@@'\'') AS column_2, array_to_string(R0.words, '\''@@@@@'\'') AS column_3, array_to_string(R0.poses, '\''@@@@@'\'') AS column_4, array_to_string(R0.ners, '\''@@@@@'\'') AS column_5, array_to_string(R0.lemmas, '\''@@@@@'\'') AS column_6, array_to_string(R0.dep_paths, '\''@@@@@'\'') AS column_7, array_to_string(R0.dep_parents, '\''@@@@@'\'') AS column_8, array_to_string(R0.font, '\''@@@@@'\'') AS column_9, array_to_string(R0.layout, '\''@@@@@'\'') AS column_10
FROM sentences R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "sentences_serialized"
        style: "cmd_extractor"
          dependencies: [ "ext_sentences" ]
          input_relations: [
            sentences
          ]
      }
    

      deepdive.extraction.extractors.ext_relation_taxonomy_global {
        cmd: """

	# TODO use temporary table
	deepdive create table "relation_taxonomy_global"
	deepdive sql 'INSERT INTO relation_taxonomy_global SELECT DISTINCT R0.type AS "relation_taxonomy.R0.type", R0.eid1 AS "relation_taxonomy.R0.eid1", R0.eid2 AS "relation_taxonomy.R0.eid2"
FROM relation_taxonomy R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "relation_taxonomy_global"
        style: "cmd_extractor"
          dependencies: [ "ext_relation_taxonomy" ]
          input_relations: [
            relation_taxonomy
          ]
      }
    

      deepdive.extraction.extractors.ext_taxon_per_doc {
        cmd: """

	# TODO use temporary table
	deepdive create table "taxon_per_doc"
	deepdive sql 'INSERT INTO taxon_per_doc SELECT R0.docid AS "entity_taxon_candidate_local.R0.docid", ARRAY_AGG(R0.entity) AS column_1, ARRAY_AGG(R0.type) AS column_2
FROM entity_taxon_candidate_local R0
        
        GROUP BY R0.docid'
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "taxon_per_doc"
        style: "cmd_extractor"
          dependencies: [ "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local" ]
          input_relations: [
            entity_taxon_candidate_local
          ]
      }
    

      deepdive.extraction.extractors.ext_document_with_all_entities {
        cmd: """

	# TODO use temporary table
	deepdive create table "document_with_all_entities"
	deepdive sql 'INSERT INTO document_with_all_entities SELECT R0.docid AS "all_entity_per_doc.R0.docid", array_to_string(R0.entity, '\''@@@@@'\'') AS column_1, array_to_string(R0.type, '\''@@@@@'\'') AS column_2, array_to_string(R0.eid, '\''@@@@@'\'') AS column_3, array_to_string(R0.prov, '\''@@@@@'\'') AS column_4, R1.sentids AS "documents_serialized.R1.sentids", R1.wordidxs AS "documents_serialized.R1.wordidxs", R1.words AS "documents_serialized.R1.words", R1.poses AS "documents_serialized.R1.poses", R1.ners AS "documents_serialized.R1.ners", R1.lemmas AS "documents_serialized.R1.lemmas", R1.dep_paths AS "documents_serialized.R1.dep_paths", R1.dep_parents AS "documents_serialized.R1.dep_parents", R1.font AS "documents_serialized.R1.font", R1.layout AS "documents_serialized.R1.layout"
FROM all_entity_per_doc R0, documents_serialized R1
        WHERE R1.docid = R0.docid '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "document_with_all_entities"
        style: "cmd_extractor"
          dependencies: [ "ext_all_entity_per_doc" ,  "ext_documents_serialized" ]
          input_relations: [
            all_entity_per_doc
            documents_serialized
          ]
      }
    

      deepdive.extraction.extractors.ext_entity_formation {
        cmd: """

	# TODO use temporary table
	deepdive create table "entity_formation"
	deepdive sql 'INSERT INTO entity_formation SELECT R0.docid AS "entity_formation_candidate.R0.docid", R0.type AS "entity_formation_candidate.R0.type", R0.eid AS "entity_formation_candidate.R0.eid", R0.entity AS "entity_formation_candidate.R0.entity", R0.prov AS "entity_formation_candidate.R0.prov"
FROM entity_formation_candidate R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "entity_formation"
        style: "cmd_extractor"
          dependencies: [ "ext_entity_formation_candidate" ]
          input_relations: [
            entity_formation_candidate
          ]
      }
    

      deepdive.extraction.extractors.ext_entity_taxon_candidate {
        cmd: """

	# TODO use temporary table
	deepdive create table "entity_taxon_candidate"
	deepdive sql 'INSERT INTO entity_taxon_candidate SELECT R0.docid AS "entity_taxon_candidate__0.R0.docid", R0.type AS "entity_taxon_candidate__0.R0.type", R0.eid AS "entity_taxon_candidate__0.R0.eid", R0.entity AS "entity_taxon_candidate__0.R0.entity", R0.author_year AS "entity_taxon_candidate__0.R0.author_year", R0.prov AS "entity_taxon_candidate__0.R0.prov"
FROM entity_taxon_candidate__0 R0
        
UNION ALL
SELECT R0.docid AS "entity_taxon_candidate_local.R0.docid", R0.type AS "entity_taxon_candidate_local.R0.type", R0.eid AS "entity_taxon_candidate_local.R0.eid", R0.entity AS "entity_taxon_candidate_local.R0.entity", R0.author_year AS "entity_taxon_candidate_local.R0.author_year", R0.prov AS "entity_taxon_candidate_local.R0.prov"
FROM entity_taxon_candidate_local R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "entity_taxon_candidate"
        style: "cmd_extractor"
          dependencies: [ "ext_entity_taxon_candidate__0_by_ext_entity_taxon_global" ,  "ext_entity_taxon_candidate_local_by_ext_entity_taxon_local" ]
          input_relations: [
            entity_taxon_candidate__0
            entity_taxon_candidate_local
          ]
      }
    

        deepdive.extraction.extractors.ext_entity_formation_candidate_local_by_ext_entity_formation_local {
          input: """ SELECT R0.docid AS "sentences_serialized.R0.docid", R0.sentid AS "sentences_serialized.R0.sentid", R0.wordidxs AS "sentences_serialized.R0.wordidxs", R0.words AS "sentences_serialized.R0.words", R0.poses AS "sentences_serialized.R0.poses", R0.ners AS "sentences_serialized.R0.ners", R0.lemmas AS "sentences_serialized.R0.lemmas", R0.dep_paths AS "sentences_serialized.R0.dep_paths", R0.dep_parents AS "sentences_serialized.R0.dep_parents", R0.font AS "sentences_serialized.R0.font", R0.layout AS "sentences_serialized.R0.layout"
FROM sentences_serialized R0
        
          """
          output_relation: "entity_formation_candidate_local"
          udf: ${APP_HOME}"//udf/ext_formation_local.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_sentences_serialized" ]
          input_relations: [
            sentences_serialized
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_entity_temporal_candidate_by_ext_entity_temporal_local {
          input: """ SELECT R0.docid AS "sentences_serialized.R0.docid", R0.sentid AS "sentences_serialized.R0.sentid", R0.wordidxs AS "sentences_serialized.R0.wordidxs", R0.words AS "sentences_serialized.R0.words", R0.poses AS "sentences_serialized.R0.poses", R0.ners AS "sentences_serialized.R0.ners", R0.lemmas AS "sentences_serialized.R0.lemmas", R0.dep_paths AS "sentences_serialized.R0.dep_paths", R0.dep_parents AS "sentences_serialized.R0.dep_parents", R0.font AS "sentences_serialized.R0.font", R0.layout AS "sentences_serialized.R0.layout"
FROM sentences_serialized R0
        
          """
          output_relation: "entity_temporal_candidate"
          udf: ${APP_HOME}"//udf/ext_temporal_local.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_sentences_serialized" ]
          input_relations: [
            sentences_serialized
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_entity_taxon_candidate_local_by_ext_entity_taxon_local {
          input: """ SELECT R0.docid AS "sentences_serialized.R0.docid", R0.sentid AS "sentences_serialized.R0.sentid", R0.wordidxs AS "sentences_serialized.R0.wordidxs", R0.words AS "sentences_serialized.R0.words", R0.poses AS "sentences_serialized.R0.poses", R0.ners AS "sentences_serialized.R0.ners", R0.lemmas AS "sentences_serialized.R0.lemmas", R0.dep_paths AS "sentences_serialized.R0.dep_paths", R0.dep_parents AS "sentences_serialized.R0.dep_parents", R0.font AS "sentences_serialized.R0.font", R0.layout AS "sentences_serialized.R0.layout"
FROM sentences_serialized R0
        
          """
          output_relation: "entity_taxon_candidate_local"
          udf: ${APP_HOME}"//udf/ext_taxon_local.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_sentences_serialized" ]
          input_relations: [
            sentences_serialized
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_entity_formation_candidate__0_by_ext_entity_formation_global {
          input: """ SELECT R0.docid AS "document_with_formation_entities.R0.docid", R0.entities AS "document_with_formation_entities.R0.entities", R0.types AS "document_with_formation_entities.R0.types", R0.sentids AS "document_with_formation_entities.R0.sentids", R0.wordidxs AS "document_with_formation_entities.R0.wordidxs", R0.words AS "document_with_formation_entities.R0.words", R0.poses AS "document_with_formation_entities.R0.poses", R0.ners AS "document_with_formation_entities.R0.ners", R0.lemmas AS "document_with_formation_entities.R0.lemmas", R0.dep_paths AS "document_with_formation_entities.R0.dep_paths", R0.dep_parents AS "document_with_formation_entities.R0.dep_parents", R0.font AS "document_with_formation_entities.R0.font", R0.layout AS "document_with_formation_entities.R0.layout"
FROM document_with_formation_entities R0
        
          """
          output_relation: "entity_formation_candidate__0"
          udf: ${APP_HOME}"//udf/ext_formation_global.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_document_with_formation_entities" ]
          input_relations: [
            document_with_formation_entities
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_entity_taxon_candidate__0_by_ext_entity_taxon_global {
          input: """ SELECT R0.docid AS "document_with_taxon_entities.R0.docid", R0.entities AS "document_with_taxon_entities.R0.entities", R0.types AS "document_with_taxon_entities.R0.types", R0.sentids AS "document_with_taxon_entities.R0.sentids", R0.wordidxs AS "document_with_taxon_entities.R0.wordidxs", R0.words AS "document_with_taxon_entities.R0.words", R0.poses AS "document_with_taxon_entities.R0.poses", R0.ners AS "document_with_taxon_entities.R0.ners", R0.lemmas AS "document_with_taxon_entities.R0.lemmas", R0.dep_paths AS "document_with_taxon_entities.R0.dep_paths", R0.dep_parents AS "document_with_taxon_entities.R0.dep_parents", R0.font AS "document_with_taxon_entities.R0.font", R0.layout AS "document_with_taxon_entities.R0.layout"
FROM document_with_taxon_entities R0
        
          """
          output_relation: "entity_taxon_candidate__0"
          udf: ${APP_HOME}"//udf/ext_taxon_global.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_document_with_taxon_entities" ]
          input_relations: [
            document_with_taxon_entities
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_entity_location_candidate_by_ext_entity_location_global {
          input: """ SELECT R0.docid AS "documents_serialized.R0.docid", R0.sentids AS "documents_serialized.R0.sentids", R0.wordidxs AS "documents_serialized.R0.wordidxs", R0.words AS "documents_serialized.R0.words", R0.poses AS "documents_serialized.R0.poses", R0.ners AS "documents_serialized.R0.ners", R0.lemmas AS "documents_serialized.R0.lemmas", R0.dep_paths AS "documents_serialized.R0.dep_paths", R0.dep_parents AS "documents_serialized.R0.dep_parents", R0.font AS "documents_serialized.R0.font", R0.layout AS "documents_serialized.R0.layout"
FROM documents_serialized R0
        
          """
          output_relation: "entity_location_candidate"
          udf: ${APP_HOME}"//udf/ext_location_global.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_documents_serialized" ]
          input_relations: [
            documents_serialized
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_relation_candidates_by_ext_relation_same_sent {
          input: """ SELECT R0.docid AS "document_with_all_entities.R0.docid", R0.entities AS "document_with_all_entities.R0.entities", R0.types AS "document_with_all_entities.R0.types", R0.eids AS "document_with_all_entities.R0.eids", R0.provs AS "document_with_all_entities.R0.provs", R0.sentids AS "document_with_all_entities.R0.sentids", R0.wordidxs AS "document_with_all_entities.R0.wordidxs", R0.words AS "document_with_all_entities.R0.words", R0.poses AS "document_with_all_entities.R0.poses", R0.ners AS "document_with_all_entities.R0.ners", R0.lemmas AS "document_with_all_entities.R0.lemmas", R0.dep_paths AS "document_with_all_entities.R0.dep_paths", R0.dep_parents AS "document_with_all_entities.R0.dep_parents", R0.font AS "document_with_all_entities.R0.font", R0.layout AS "document_with_all_entities.R0.layout"
FROM document_with_all_entities R0
        
          """
          output_relation: "relation_candidates"
          udf: ${APP_HOME}"//udf/ext_relation_samesent.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_document_with_all_entities" ]
          input_relations: [
            document_with_all_entities
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal {
          input: """ SELECT R0.docid AS "relation_candidates.R0.docid", R0.type AS "relation_candidates.R0.type", R0.eid1 AS "relation_candidates.R0.eid1", R0.eid2 AS "relation_candidates.R0.eid2", R0.entity1 AS "relation_candidates.R0.entity1", R0.entity2 AS "relation_candidates.R0.entity2", R0.features AS "relation_candidates.R0.features"
FROM relation_candidates R0
        
          """
          output_relation: "relation_formationtemporal_supervise"
          udf: ${APP_HOME}"//udf/supervise_formationtemporal.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_relation_candidates_by_ext_relation_same_sent" ]
          input_relations: [
            relation_candidates
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy {
          input: """ SELECT R0.docid AS "relation_candidates.R0.docid", R0.type AS "relation_candidates.R0.type", R0.eid1 AS "relation_candidates.R0.eid1", R0.eid2 AS "relation_candidates.R0.eid2", R0.entity1 AS "relation_candidates.R0.entity1", R0.entity2 AS "relation_candidates.R0.entity2", R0.features AS "relation_candidates.R0.features"
FROM relation_candidates R0
        
          """
          output_relation: "relation_taxonomy_supervise"
          udf: ${APP_HOME}"//udf/supervise_taxonomy.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_relation_candidates_by_ext_relation_same_sent" ]
          input_relations: [
            relation_candidates
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_relation_formation_supervise_by_ext_relation_variable_formation {
          input: """ SELECT R0.docid AS "relation_candidates.R0.docid", R0.type AS "relation_candidates.R0.type", R0.eid1 AS "relation_candidates.R0.eid1", R0.eid2 AS "relation_candidates.R0.eid2", R0.entity1 AS "relation_candidates.R0.entity1", R0.entity2 AS "relation_candidates.R0.entity2", R0.features AS "relation_candidates.R0.features"
FROM relation_candidates R0
        
          """
          output_relation: "relation_formation_supervise"
          udf: ${APP_HOME}"//udf/supervise_formation.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_relation_candidates_by_ext_relation_same_sent" ]
          input_relations: [
            relation_candidates
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.inference.factors.inf_istrue_relation_formation {
          input_query: """
          SELECT R0.id AS "relation_formation.R0.id" , R1.features AS "dd_weight_column_0" 
          FROM relation_formation R0, relation_candidates R1
        WHERE R1.docid = R0.docid  AND R1.type = 'FORMATION' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 """
          function: "Imply(relation_formation.R0.label)"
          weight: "?(dd_weight_column_0)"
          dependencies: [ "ext_relation_candidates_by_ext_relation_same_sent" ]
          input_relations: [
            relation_formation
            relation_candidates
          ]
        }
      

        deepdive.inference.factors.inf_istrue_relation_formationtemporal {
          input_query: """
          SELECT R0.id AS "relation_formationtemporal.R0.id" , R2.id AS "entity_formation.R2.id" , R3.id AS "entity_temporal.R3.id" , R1.features AS "dd_weight_column_0" 
          FROM relation_formationtemporal R0, relation_candidates R1, entity_formation R2, entity_temporal R3
        WHERE R1.docid = R0.docid  AND R1.type = 'FORMATIONINTERVAL' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2  AND R2.docid = R0.docid  AND R2.eid = R0.eid1  AND R2.entity = R0.entity1  AND R3.docid = R0.docid  AND R3.eid = R0.eid2  AND R3.entity = R0.entity2 """
          function: "Imply(relation_formationtemporal.R0.label)"
          weight: "?(dd_weight_column_0)"
          dependencies: [ "ext_relation_candidates_by_ext_relation_same_sent" ,  "ext_entity_formation" ,  "ext_entity_temporal" ]
          input_relations: [
            relation_formationtemporal
            relation_candidates
            entity_formation
            entity_temporal
          ]
        }
      

        deepdive.inference.factors.inf_istrue_relation_taxonomy {
          input_query: """
          SELECT R0.id AS "relation_taxonomy.R0.id" , R1.features AS "dd_weight_column_0" 
          FROM relation_taxonomy R0, relation_candidates R1
        WHERE R1.docid = R0.docid  AND R1.type = 'TAXONOMY' AND R1.eid1 = R0.eid1  AND R1.eid2 = R0.eid2  AND R1.entity1 = R0.entity1  AND R1.entity2 = R0.entity2 """
          function: "Imply(relation_taxonomy.R0.label)"
          weight: "?(dd_weight_column_0)"
          dependencies: [ "ext_relation_candidates_by_ext_relation_same_sent" ]
          input_relations: [
            relation_taxonomy
            relation_candidates
          ]
        }
      

        deepdive.inference.factors.inf_istrue_relation_formation_global {
          input_query: """
          SELECT R0.id AS "relation_formation_global.R0.id" , R1.id AS "relation_formation.R1.id" , R2.features AS "dd_weight_column_0" 
          FROM relation_formation_global R0, relation_formation R1, relation_candidates R2
        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 """
          function: "Imply(relation_formation_global.R0.label)"
          weight: "?(dd_weight_column_0)"
          dependencies: [ "ext_relation_formation" ,  "ext_relation_candidates_by_ext_relation_same_sent" ]
          input_relations: [
            relation_formation_global
            relation_formation
            relation_candidates
          ]
        }
      

        deepdive.inference.factors.inf_istrue_relation_formationtemporal_global {
          input_query: """
          SELECT R0.id AS "relation_formationtemporal_global.R0.id" , R1.id AS "relation_formationtemporal.R1.id" , R2.features AS "dd_weight_column_0" 
          FROM relation_formationtemporal_global R0, relation_formationtemporal R1, relation_candidates R2
        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 """
          function: "Imply(relation_formationtemporal_global.R0.label)"
          weight: "?(dd_weight_column_0)"
          dependencies: [ "ext_relation_formationtemporal" ,  "ext_relation_candidates_by_ext_relation_same_sent" ]
          input_relations: [
            relation_formationtemporal_global
            relation_formationtemporal
            relation_candidates
          ]
        }
      

        deepdive.inference.factors.inf_istrue_relation_taxonomy_global {
          input_query: """
          SELECT R0.id AS "relation_taxonomy_global.R0.id" , R1.id AS "relation_taxonomy.R1.id" , R2.features AS "dd_weight_column_0" 
          FROM relation_taxonomy_global R0, relation_taxonomy R1, relation_candidates R2
        WHERE R1.type = R0.type  AND R1.eid1 = R0.entity1  AND R1.eid2 = R0.entity2  AND R2.docid = R1.docid  AND R2.eid1 = R0.entity1  AND R2.eid2 = R0.entity2  AND R2.entity1 = R1.entity1  AND R2.entity2 = R1.entity2 """
          function: "Imply(relation_taxonomy_global.R0.label)"
          weight: "?(dd_weight_column_0)"
          dependencies: [ "ext_relation_taxonomy" ,  "ext_relation_candidates_by_ext_relation_same_sent" ]
          input_relations: [
            relation_taxonomy_global
            relation_taxonomy
            relation_candidates
          ]
        }
      

        deepdive.inference.factors.inf_istrue_entity_formation {
          input_query: """
          SELECT R0.id AS "entity_formation.R0.id" , R0.type AS "dd_weight_column_0" 
          FROM entity_formation R0, entity_formation_candidate R1
        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov """
          function: "Imply(entity_formation.R0.label)"
          weight: "?(dd_weight_column_0)"
          dependencies: [ "ext_entity_formation_candidate" ]
          input_relations: [
            entity_formation
            entity_formation_candidate
          ]
        }
      

        deepdive.inference.factors.inf_istrue_entity_temporal {
          input_query: """
          SELECT R0.id AS "entity_temporal.R0.id" , R0.type AS "dd_weight_column_0" 
          FROM entity_temporal R0, entity_temporal_candidate R1
        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov """
          function: "Imply(entity_temporal.R0.label)"
          weight: "?(dd_weight_column_0)"
          dependencies: [ "ext_entity_temporal_candidate_by_ext_entity_temporal_local" ]
          input_relations: [
            entity_temporal
            entity_temporal_candidate
          ]
        }
      

        deepdive.inference.factors.inf_istrue_entity_location {
          input_query: """
          SELECT R0.id AS "entity_location.R0.id" , R0.type AS "dd_weight_column_0" 
          FROM entity_location R0, entity_location_candidate R1
        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.prov = R0.prov """
          function: "Imply(entity_location.R0.label)"
          weight: "?(dd_weight_column_0)"
          dependencies: [ "ext_entity_location_candidate_by_ext_entity_location_global" ]
          input_relations: [
            entity_location
            entity_location_candidate
          ]
        }
      

        deepdive.inference.factors.inf_istrue_entity_taxon {
          input_query: """
          SELECT R0.id AS "entity_taxon.R0.id" , R0.type AS "dd_weight_column_0" 
          FROM entity_taxon R0, entity_taxon_candidate R1
        WHERE R1.docid = R0.docid  AND R1.type = R0.type  AND R1.eid = R0.eid  AND R1.entity = R0.entity  AND R1.author_year = R0.author_year  AND R1.prov = R0.prov """
          function: "Imply(entity_taxon.R0.label)"
          weight: "?(dd_weight_column_0)"
          dependencies: [ "ext_entity_taxon_candidate" ]
          input_relations: [
            entity_taxon
            entity_taxon_candidate
          ]
        }
      
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.extraction: [
  ext_entity_location
  ext_document_with_formation_entities
  ext_sentences
  ext_all_entity_per_doc
  ext_documents_serialized
  ext_relation_taxonomy
  ext_documents
  ext_entity_formation_candidate
  ext_taxon_per_doc
  ext_document_with_taxon_entities
  ext_entity_taxon
  ext_entity_location_candidate_by_ext_entity_location_global
  ext_relation_taxonomy_global
  ext_relation_formationtemporal
  ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy
  ext_relation_formation
  ext_entity_temporal_candidate_by_ext_entity_temporal_local
  ext_entity_formation_candidate_local_by_ext_entity_formation_local
  ext_entity_formation_candidate__0_by_ext_entity_formation_global
  ext_entity_formation
  ext_document_with_all_entities
  ext_relation_formationtemporal_global
  ext_relation_formation_supervise_by_ext_relation_variable_formation
  ext_sentences_serialized
  ext_formation_per_doc
  ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal
  ext_relation_formation_global
  ext_entity_taxon_candidate
  ext_relation_candidates_by_ext_relation_same_sent
  ext_entity_taxon_candidate__0_by_ext_entity_taxon_global
  ext_entity_temporal
  ext_all_entity_candidate
  ext_entity_taxon_candidate_local_by_ext_entity_taxon_local
]
deepdive.pipeline.pipelines.inference: [
  inf_istrue_relation_formation
  inf_istrue_relation_formationtemporal
  inf_istrue_relation_taxonomy
  inf_istrue_relation_formation_global
  inf_istrue_relation_formationtemporal_global
  inf_istrue_relation_taxonomy_global
  inf_istrue_entity_formation
  inf_istrue_entity_temporal
  inf_istrue_entity_location
  inf_istrue_entity_taxon
]
deepdive.pipeline.pipelines.endtoend: [
  ext_entity_location
  ext_document_with_formation_entities
  ext_sentences
  ext_all_entity_per_doc
  ext_documents_serialized
  ext_relation_taxonomy
  ext_documents
  ext_entity_formation_candidate
  ext_taxon_per_doc
  ext_document_with_taxon_entities
  ext_entity_taxon
  ext_entity_location_candidate_by_ext_entity_location_global
  ext_relation_taxonomy_global
  ext_relation_formationtemporal
  ext_relation_taxonomy_supervise_by_ext_relation_variable_taxonomy
  ext_relation_formation
  ext_entity_temporal_candidate_by_ext_entity_temporal_local
  ext_entity_formation_candidate_local_by_ext_entity_formation_local
  ext_entity_formation_candidate__0_by_ext_entity_formation_global
  ext_entity_formation
  ext_document_with_all_entities
  ext_relation_formationtemporal_global
  ext_relation_formation_supervise_by_ext_relation_variable_formation
  ext_sentences_serialized
  ext_formation_per_doc
  ext_relation_formationtemporal_supervise_by_ext_relation_variable_formationtemporal
  ext_relation_formation_global
  ext_entity_taxon_candidate
  ext_relation_candidates_by_ext_relation_same_sent
  ext_entity_taxon_candidate__0_by_ext_entity_taxon_global
  ext_entity_temporal
  ext_all_entity_candidate
  ext_entity_taxon_candidate_local_by_ext_entity_taxon_local
  inf_istrue_relation_formation
  inf_istrue_relation_formationtemporal
  inf_istrue_relation_taxonomy
  inf_istrue_relation_formation_global
  inf_istrue_relation_formationtemporal_global
  inf_istrue_relation_taxonomy_global
  inf_istrue_entity_formation
  inf_istrue_entity_temporal
  inf_istrue_entity_location
  inf_istrue_entity_taxon
]
deepdive.schema {"relations" : {"formation_per_doc" : {"columns" : {"docid" : {"type" : "text", "index" : 0}, "entity" : {"type" : "text[]", "index" : 1}, "type" : {"type" : "text[]", "index" : 2}}}, "sentences" : {"columns" : {"ners" : {"type" : "text[]", "index" : 5}, "sentid" : {"type" : "text", "index" : 1}, "docid" : {"type" : "text", "index" : 0}, "poses" : {"type" : "text[]", "index" : 4}, "font" : {"type" : "text[]", "index" : 9}, "lemmas" : {"type" : "text[]", "index" : 6}, "wordindex" : {"type" : "text[]", "index" : 2}, "words" : {"type" : "text[]", "index" : 3}, "layout" : {"type" : "text[]", "index" : 10}, "dep_paths" : {"type" : "text[]", "index" : 7}, "dep_parents" : {"type" : "text[]", "index" : 8}}}, "entity_taxon_candidate__0" : {"columns" : {"prov" : {"type" : "text", "index" : 5}, "eid" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "author_year" : {"type" : "text", "index" : 4}, "entity" : {"type" : "text", "index" : 3}, "type" : {"type" : "text", "index" : 1}}}, "relation_candidates" : {"columns" : {"eid1" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "features" : {"type" : "text", "index" : 6}, "entity1" : {"type" : "text", "index" : 4}, "type" : {"type" : "text", "index" : 1}, "eid2" : {"type" : "text", "index" : 3}, "entity2" : {"type" : "text", "index" : 5}}}, "entity_formation_candidate_local" : {"columns" : {"prov" : {"type" : "text", "index" : 4}, "eid" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "entity" : {"type" : "text", "index" : 3}, "type" : {"type" : "text", "index" : 1}}}, "all_entity_per_doc" : {"columns" : {"prov" : {"type" : "text[]", "index" : 4}, "eid" : {"type" : "text[]", "index" : 1}, "docid" : {"type" : "text", "index" : 0}, "entity" : {"type" : "text[]", "index" : 2}, "type" : {"type" : "text[]", "index" : 3}}}, "entity_taxon_candidate_local" : {"columns" : {"prov" : {"type" : "text", "index" : 5}, "eid" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "author_year" : {"type" : "text", "index" : 4}, "entity" : {"type" : "text", "index" : 3}, "type" : {"type" : "text", "index" : 1}}}, "documents_serialized" : {"columns" : {"wordidxs" : {"type" : "text", "index" : 2}, "ners" : {"type" : "text", "index" : 5}, "docid" : {"type" : "text", "index" : 0}, "poses" : {"type" : "text", "index" : 4}, "font" : {"type" : "text", "index" : 9}, "lemmas" : {"type" : "text", "index" : 6}, "sentids" : {"type" : "text", "index" : 1}, "words" : {"type" : "text", "index" : 3}, "layout" : {"type" : "text", "index" : 10}, "dep_paths" : {"type" : "text", "index" : 7}, "dep_parents" : {"type" : "text", "index" : 8}}}, "relation_formationtemporal_global" : {"columns" : {"type" : {"type" : "text", "index" : 0}, "entity1" : {"type" : "text", "index" : 1}, "entity2" : {"type" : "text", "index" : 2}}, "variable_type" : "boolean", "variable_cardinality" : 2}, "document_with_taxon_entities" : {"columns" : {"wordidxs" : {"type" : "text", "index" : 4}, "entities" : {"type" : "text", "index" : 1}, "ners" : {"type" : "text", "index" : 7}, "docid" : {"type" : "text", "index" : 0}, "poses" : {"type" : "text", "index" : 6}, "font" : {"type" : "text", "index" : 11}, "lemmas" : {"type" : "text", "index" : 8}, "sentids" : {"type" : "text", "index" : 3}, "words" : {"type" : "text", "index" : 5}, "layout" : {"type" : "text", "index" : 12}, "types" : {"type" : "text", "index" : 2}, "dep_paths" : {"type" : "text", "index" : 9}, "dep_parents" : {"type" : "text", "index" : 10}}}, "relation_formationtemporal" : {"columns" : {"eid1" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "entity1" : {"type" : "text", "index" : 4}, "type" : {"type" : "text", "index" : 1}, "eid2" : {"type" : "text", "index" : 3}, "entity2" : {"type" : "text", "index" : 5}}, "variable_type" : "boolean", "variable_cardinality" : 2}, "entity_location" : {"columns" : {"prov" : {"type" : "text", "index" : 4}, "eid" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "entity" : {"type" : "text", "index" : 3}, "type" : {"type" : "text", "index" : 1}}, "variable_type" : "boolean", "variable_cardinality" : 2}, "relation_formation_global" : {"columns" : {"type" : {"type" : "text", "index" : 0}, "entity1" : {"type" : "text", "index" : 1}, "entity2" : {"type" : "text", "index" : 2}}, "variable_type" : "boolean", "variable_cardinality" : 2}, "relation_formation_supervise" : {"columns" : {"eid1" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "label" : {"type" : "boolean", "index" : 6}, "entity1" : {"type" : "text", "index" : 4}, "type" : {"type" : "text", "index" : 1}, "eid2" : {"type" : "text", "index" : 3}, "entity2" : {"type" : "text", "index" : 5}}}, "documents" : {"columns" : {"wordidxs" : {"type" : "text[]", "index" : 2}, "ners" : {"type" : "text[]", "index" : 5}, "docid" : {"type" : "text", "index" : 0}, "poses" : {"type" : "text[]", "index" : 4}, "font" : {"type" : "text[]", "index" : 9}, "lemmas" : {"type" : "text[]", "index" : 6}, "sentids" : {"type" : "text[]", "index" : 1}, "words" : {"type" : "text[]", "index" : 3}, "layout" : {"type" : "text[]", "index" : 10}, "dep_paths" : {"type" : "text[]", "index" : 7}, "dep_parents" : {"type" : "text[]", "index" : 8}}}, "relation_taxonomy_supervise" : {"columns" : {"eid1" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "label" : {"type" : "boolean", "index" : 6}, "entity1" : {"type" : "text", "index" : 4}, "type" : {"type" : "text", "index" : 1}, "eid2" : {"type" : "text", "index" : 3}, "entity2" : {"type" : "text", "index" : 5}}}, "all_entity_candidate" : {"columns" : {"prov" : {"type" : "text", "index" : 4}, "eid" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "entity" : {"type" : "text", "index" : 3}, "type" : {"type" : "text", "index" : 1}}}, "entity_formation_candidate" : {"columns" : {"prov" : {"type" : "text", "index" : 4}, "eid" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "entity" : {"type" : "text", "index" : 3}, "type" : {"type" : "text", "index" : 1}}}, "document_with_formation_entities" : {"columns" : {"wordidxs" : {"type" : "text", "index" : 4}, "entities" : {"type" : "text", "index" : 1}, "ners" : {"type" : "text", "index" : 7}, "docid" : {"type" : "text", "index" : 0}, "poses" : {"type" : "text", "index" : 6}, "font" : {"type" : "text", "index" : 11}, "lemmas" : {"type" : "text", "index" : 8}, "sentids" : {"type" : "text", "index" : 3}, "words" : {"type" : "text", "index" : 5}, "layout" : {"type" : "text", "index" : 12}, "types" : {"type" : "text", "index" : 2}, "dep_paths" : {"type" : "text", "index" : 9}, "dep_parents" : {"type" : "text", "index" : 10}}}, "entity_temporal" : {"columns" : {"prov" : {"type" : "text", "index" : 4}, "eid" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "entity" : {"type" : "text", "index" : 3}, "type" : {"type" : "text", "index" : 1}}, "variable_type" : "boolean", "variable_cardinality" : 2}, "relation_formation" : {"columns" : {"eid1" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "entity1" : {"type" : "text", "index" : 4}, "type" : {"type" : "text", "index" : 1}, "eid2" : {"type" : "text", "index" : 3}, "entity2" : {"type" : "text", "index" : 5}}, "variable_type" : "boolean", "variable_cardinality" : 2}, "entity_temporal_candidate" : {"columns" : {"prov" : {"type" : "text", "index" : 4}, "eid" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "entity" : {"type" : "text", "index" : 3}, "type" : {"type" : "text", "index" : 1}}}, "entity_taxon" : {"columns" : {"prov" : {"type" : "text", "index" : 5}, "eid" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "author_year" : {"type" : "text", "index" : 4}, "entity" : {"type" : "text", "index" : 3}, "type" : {"type" : "text", "index" : 1}}, "variable_type" : "boolean", "variable_cardinality" : 2}, "relation_taxonomy" : {"columns" : {"eid1" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "entity1" : {"type" : "text", "index" : 4}, "type" : {"type" : "text", "index" : 1}, "eid2" : {"type" : "text", "index" : 3}, "entity2" : {"type" : "text", "index" : 5}}, "variable_type" : "boolean", "variable_cardinality" : 2}, "sentences_original" : {"columns" : {"bounding_boxes" : {"type" : "text[]", "index" : 9}, "ners" : {"type" : "text[]", "index" : 5}, "sentid" : {"type" : "text", "index" : 1}, "docid" : {"type" : "text", "index" : 0}, "poses" : {"type" : "text[]", "index" : 4}, "lemmas" : {"type" : "text[]", "index" : 6}, "wordindex" : {"type" : "text[]", "index" : 2}, "words" : {"type" : "text[]", "index" : 3}, "dep_paths" : {"type" : "text[]", "index" : 7}, "dep_parents" : {"type" : "text[]", "index" : 8}}}, "sentences_serialized" : {"columns" : {"wordidxs" : {"type" : "text", "index" : 2}, "ners" : {"type" : "text", "index" : 5}, "sentid" : {"type" : "text", "index" : 1}, "docid" : {"type" : "text", "index" : 0}, "poses" : {"type" : "text", "index" : 4}, "font" : {"type" : "text", "index" : 9}, "lemmas" : {"type" : "text", "index" : 6}, "words" : {"type" : "text", "index" : 3}, "layout" : {"type" : "text", "index" : 10}, "dep_paths" : {"type" : "text", "index" : 7}, "dep_parents" : {"type" : "text", "index" : 8}}}, "relation_taxonomy_global" : {"columns" : {"type" : {"type" : "text", "index" : 0}, "entity1" : {"type" : "text", "index" : 1}, "entity2" : {"type" : "text", "index" : 2}}, "variable_type" : "boolean", "variable_cardinality" : 2}, "entity_formation_candidate__0" : {"columns" : {"prov" : {"type" : "text", "index" : 4}, "eid" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "entity" : {"type" : "text", "index" : 3}, "type" : {"type" : "text", "index" : 1}}}, "taxon_per_doc" : {"columns" : {"docid" : {"type" : "text", "index" : 0}, "entity" : {"type" : "text[]", "index" : 1}, "type" : {"type" : "text[]", "index" : 2}}}, "relation_formationtemporal_supervise" : {"columns" : {"eid1" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "label" : {"type" : "boolean", "index" : 6}, "entity1" : {"type" : "text", "index" : 4}, "type" : {"type" : "text", "index" : 1}, "eid2" : {"type" : "text", "index" : 3}, "entity2" : {"type" : "text", "index" : 5}}}, "document_with_all_entities" : {"columns" : {"wordidxs" : {"type" : "text", "index" : 6}, "entities" : {"type" : "text", "index" : 1}, "ners" : {"type" : "text", "index" : 9}, "docid" : {"type" : "text", "index" : 0}, "provs" : {"type" : "text", "index" : 4}, "poses" : {"type" : "text", "index" : 8}, "eids" : {"type" : "text", "index" : 3}, "font" : {"type" : "text", "index" : 13}, "lemmas" : {"type" : "text", "index" : 10}, "sentids" : {"type" : "text", "index" : 5}, "words" : {"type" : "text", "index" : 7}, "layout" : {"type" : "text", "index" : 14}, "types" : {"type" : "text", "index" : 2}, "dep_paths" : {"type" : "text", "index" : 11}, "dep_parents" : {"type" : "text", "index" : 12}}}, "entity_formation" : {"columns" : {"prov" : {"type" : "text", "index" : 4}, "eid" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "entity" : {"type" : "text", "index" : 3}, "type" : {"type" : "text", "index" : 1}}, "variable_type" : "boolean", "variable_cardinality" : 2}, "entity_taxon_candidate" : {"columns" : {"prov" : {"type" : "text", "index" : 5}, "eid" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "author_year" : {"type" : "text", "index" : 4}, "entity" : {"type" : "text", "index" : 3}, "type" : {"type" : "text", "index" : 1}}}, "entity_location_candidate" : {"columns" : {"prov" : {"type" : "text", "index" : 4}, "eid" : {"type" : "text", "index" : 2}, "docid" : {"type" : "text", "index" : 0}, "entity" : {"type" : "text", "index" : 3}, "type" : {"type" : "text", "index" : 1}}}}}
